,warning id,project,bug_pattern,commit,last_commit_checked,?,bug pattern category,package,class,field,method,type,expr,idents,start_line,end_line,label (automatically determined),commit url,"commit url (of the version compared to, if closed)",code (if open),label,method_content
0,355,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SubqueryNode,,changeToCorrespondingExpressionType,,subqueryType,subqueryType,2379,2423,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java#L2379,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,,close,"private void changeToCorrespondingExpressionType()
		throws StandardException
	{
  		BinaryOperatorNode bcon = null;

  		switch (subqueryType)
  		{
  			case EQ_ANY_SUBQUERY:
  			case IN_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  									C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
  									leftOperand,
  									this,
  									getContextManager());
  				break;

  			case NE_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  								C_NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE,
  								leftOperand,
  								this,
  								getContextManager());
  				break;

  			case LE_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  								C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
  								leftOperand,
  								this,
  								getContextManager());
  				break;

  			case LT_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  							C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE,
  							leftOperand,
  							this,
  							getContextManager());
  				break;

  			case GE_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  							C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
  							leftOperand,
  							this,
  							getContextManager());
  				break;

  			case GT_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  								C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,
  								leftOperand,
  								this,
  								getContextManager());
  				break;
  		}

  		// clean up the state of the tree to reflect a bound expression subquery
  		subqueryType = EXPRESSION_SUBQUERY;
  		setDataTypeServices(resultSet.getResultColumns());

  		parentComparisonOperator = (BinaryComparisonOperatorNode) bcon;
  		/* Set type info for the operator node */
  		parentComparisonOperator.bindComparisonOperator();
  		leftOperand = null;
   }"
1,412,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.client.am,org.apache.derby.client.am.Statement,,flowExecute,,switch (sqlMode_) {,,2029,2094,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/client/org/apache/derby/client/am/Statement.java#L2029,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/client/org/apache/derby/client/am/Statement.java,,unknown,"private void flowExecute(int executeType, String sql) throws SqlException {
        checkForClosedStatement(); // Per jdbc spec (see java.sql.Statement.close() javadoc)       
        clearWarningsX(); // Per jdbc spec 0.7, and getWarnings() javadoc
        sql = escape(sql);
        parseSqlAndSetSqlModes(sql);
        checkAutoGeneratedKeysParameters();
        if (sqlMode_ == isUpdate__) {
            updateCount_ = 0;
        } else {
            updateCount_ = -1;
        }

        checkForAppropriateSqlMode(executeType, sqlMode_);

        // DERBY-1036: Moved check till execute time to comply with embedded
        // behavior. Since we check here and not in setCursorName, several
        // statements can have the same cursor name as long as their result
        // sets are not simultaneously open.

        if (sqlMode_ == isQuery__) {
            checkForDuplicateCursorName();
        }

        boolean timeoutSent = false;

            agent_.beginWriteChain(this);
            boolean piggybackedAutoCommit = writeCloseResultSets(true);  // true means permit auto-commits

            ResultSet scrollableRS = null;
            Section newSection = null;
            boolean repositionedCursor = false;

            // DERBY-1692: Statement objects need to send the timeout value for
            // each execution since the server will create a new statement
            // object each time. Since the server forgets the timeout value,
            // doWriteTimeout should not be reset, and it is OK not to send the
            // timeout value when it is zero.
            if (doWriteTimeout && (timeout_ > 0)) {
                timeoutArrayList.set(0, TIMEOUT_STATEMENT + timeout_);
                writeSetSpecialRegister(timeoutArrayList);
                timeoutSent = true;
            }
            switch (sqlMode_) {
            case isQuery__:
                newSection = agent_.sectionManager_.getDynamicSection(resultSetHoldability_);

                writePrepareDescribeOutput(sql, newSection);
                writeOpenQuery(newSection,
                        fetchSize_,
                        resultSetType_);
                break;
            case isUpdate__:
                String cursorName = null;
                if (sqlUpdateMode_ == isDeleteSql__ || sqlUpdateMode_ == isUpdateSql__) {
                    String[] sqlAndCursorName = extractCursorNameFromWhereCurrentOf(sql);
                    if (sqlAndCursorName != null) {
                        cursorName = sqlAndCursorName[0];
                        sql = sqlAndCursorName[1];
                    }
                }
                if (cursorName != null) {
                    newSection = agent_.sectionManager_.getPositionedUpdateSection(cursorName, true); // true means get an execute immediate section
                    if (newSection == null) {
                        throw new SqlException(agent_.logWriter_, 
                            new ClientMessageId(SQLState.LANG_CURSOR_NOT_FOUND),
                            cursorName);
                    }
                    scrollableRS = agent_.sectionManager_.getPositionedUpdateResultSet(cursorName);
                    // do not need to reposition for rowset cursors
                    if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                        repositionedCursor =
                                scrollableRS.repositionScrollableResultSetBeforeJDBC1PositionedUpdateDelete();
                        if (!repositionedCursor) {
                            scrollableRS = null;
                        }
                    }

                    // if client's cursor name is set, and the cursor name in the positioned update
                    // string is the same as the client's cursor name, replace client's cursor name
                    // with the server's cursor name.
                    if (newSection.getClientCursorName() != null &&
                            cursorName.compareTo(newSection.getClientCursorName()) == 0) {
                        // substitute cusor name in pass thru sql string
                        sql = substituteClientCursorNameWithServerCursorName(sql, newSection);
                    }
                    writeExecuteImmediate(sql, newSection);
                }
            
               else {
                    newSection = agent_.sectionManager_.getDynamicSection(resultSetHoldability_);

                    writeExecuteImmediate(sql, newSection);
                    if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
                        // chain a ""select from identity_val_local()"" to the insert statement
                        prepareAutoGeneratedKeysStatement();
                        writeOpenQuery(preparedStatementForAutoGeneratedKeys_.section_,
                                preparedStatementForAutoGeneratedKeys_.fetchSize_,
                                preparedStatementForAutoGeneratedKeys_.resultSetType_);
                    }
                }

                // maybe duplicate a commit here if the sql is a ""commit""
                if (connection_.autoCommit_) {
                    connection_.writeAutoCommit();
                }
                break;
            case isCall__:
                newSection = writeExecuteCall(sql, false);

                break;
            }

            agent_.flow(this);

            readCloseResultSets(true);  // true means permit auto-commits

            if (timeoutSent) {
                readSetSpecialRegister(); // Read response to the EXCSQLSET
            }

            // turn inUnitOfWork_ flag back on and add statement
            // back on commitListeners_ list if they were off
            // by an autocommit chained to a close cursor.
            if (piggybackedAutoCommit) {
                connection_.completeTransactionStart();
            }

            markResultSetsClosed(true); // true means remove from list of commit and rollback listeners
            markClosedOnServer();
            section_ = newSection;

            switch (sqlMode_) {
            case isQuery__:
                // parse out the reply to a chained prepare and open request
                readPrepareDescribeOutput();
                // This establishes statement.resultSet
                readOpenQuery();

                // resultSet_ is null if open query failed.
                // check for null resultSet_ before using it.
                // the first rowset comes back on OPEN for static non-rowset cursors.
                // no row is returned on open for rowset cursors.
                if (resultSet_ != null) {
                    resultSet_.parseScrollableRowset();

                    // DERBY-1183: If we set it up it earlier, the entry in
                    // clientCursorNameCache_ gets wiped out by the closing of
                    // result sets happening during readCloseResultSets above
                    // because ResultSet#markClosed calls
                    // Statement#removeClientCursorNameFromCache.
                    setupCursorNameCacheAndMappings();
                }

                break;

            case isUpdate__:

                // do not need to reposition for rowset cursors.
                if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                    scrollableRS.readPositioningFetch_();
                }
                readExecuteImmediate();

                if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
                    readPrepareAutoGeneratedKeysStatement();
                    preparedStatementForAutoGeneratedKeys_.readOpenQuery();
                    generatedKeysResultSet_ = preparedStatementForAutoGeneratedKeys_.resultSet_;
                    preparedStatementForAutoGeneratedKeys_.resultSet_ = null;
                    generatedKeysResultSet_.outerStatement_ = this;
                }

                if (connection_.autoCommit_) {
                    connection_.readAutoCommit();
                }
                break;

            case isCall__:
                readPrepare();
                readExecuteCall();
                break;

            }

            // in the case the stored procedure call is uncatalogued, we need to catch that
            // kind exception and changed the call from dynamic to static
            agent_.endReadChain();

            //  If we hear from Sun that we can just set a warning for this, then move this code to the ResultSet constructor.
            // Throw an exception if holdability returned by the server is different from requested.
            if (resultSet_ != null && resultSet_.resultSetHoldability_ != resultSetHoldability_ && sqlMode_ != isCall__) {
                throw new SqlException(agent_.logWriter_, 
                    new ClientMessageId(SQLState.UNABLE_TO_OPEN_RS_WITH_REQUESTED_HOLDABILITY),
                    resultSetHoldability_);
            }

        // In the case of executing a call to a stored procedure.
        if (sqlMode_ == isCall__) {
            parseStorProcReturnedScrollableRowset();
            checkForStoredProcResultSetCount(executeType);
            // When there is no result sets back, we will commit immediately when autocommit is true.
            if (connection_.autoCommit_ && resultSet_ == null && resultSetList_ == null) {
                connection_.flowAutoCommit();
            }
        }

        // The JDBC spec says that executeUpdate() should return 0
        // when no row count is returned.
        if (executeType == executeUpdateMethod__ && updateCount_ < 0) {
            updateCount_ = 0;
        }
    }"
2,431,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SubqueryNode,,pushNewPredicate,,subqueryType,subqueryType,1474,1497,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java#L1474,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,,unknown,"private UnaryComparisonOperatorNode pushNewPredicate(
				int numTables)
			throws StandardException
	{
		AndNode						andNode;
		BinaryComparisonOperatorNode bcoNode = null;
		JBitSet						tableMap;
		Predicate					predicate;
		ResultColumn				firstRC;
		ResultColumnList			resultColumns;
		UnaryComparisonOperatorNode	ucoNode = null;
		ValueNode					oldWhereClause;
		ValueNode					rightOperand;

		/* We have to ensure that the resultSet immediately under us has
		 * a PredicateList, otherwise we can't push the predicate down.
		 */
		resultSet = resultSet.ensurePredicateList(numTables);

		/* RESOLVE - once we understand how correlated columns will work, 
		 * we probably want to mark leftOperand as a correlated column
		 */
		resultColumns = resultSet.getResultColumns();

		/*
		** Create a new PR node.  Put it over the original subquery.  resulSet
		** is now the new PR.  We give the chance that things under the PR node
		** can be materialized.  See beetle 4373.
		*/
		ResultColumnList newRCL = resultColumns.copyListAndObjects();
		newRCL.genVirtualColumnNodes(resultSet, resultColumns);
		resultSet = (ResultSetNode) getNodeFactory().getNode(
										C_NodeTypes.PROJECT_RESTRICT_NODE,
										resultSet,	// child
										newRCL,			// result columns
										null,			// restriction
										null, 			// restriction list
										null,			// project subqueries
										null,			// restrict subqueries	
										null,
										getContextManager());
		resultColumns = newRCL;
	
		firstRC = (ResultColumn) resultColumns.elementAt(0);
		rightOperand = firstRC.getExpression();

		bcoNode = getNewJoinCondition(leftOperand, rightOperand);

		ValueNode andLeft = bcoNode;

		/* For NOT IN or ALL, and if either side of the comparison is nullable, and the
		 * subquery can not be flattened (because of that), we need to add IS NULL node
		 * on top of the nullables, such that the behavior is (beetle 5173):
		 *
		 *    (1) If we have nulls in right operand, no row is returned.
		 *    (2) If subquery result is empty before applying join predicate, every
		 *		  left row (including NULLs) is returned.
		 *	  (3) Otherwise, return {all left row} - {NULLs}
		 */
		if (isNOT_IN() || isALL())
		{
			boolean leftNullable = leftOperand.getTypeServices().isNullable();
			boolean rightNullable = rightOperand.getTypeServices().isNullable();
			if (leftNullable || rightNullable)
			{
				/* Create a normalized structure.
				 */
				BooleanConstantNode falseNode = (BooleanConstantNode) getNodeFactory().getNode(
												C_NodeTypes.BOOLEAN_CONSTANT_NODE,
												Boolean.FALSE,
												getContextManager());
				OrNode newOr = (OrNode) getNodeFactory().getNode(
												C_NodeTypes.OR_NODE,
												bcoNode,
												falseNode,
												getContextManager());
				newOr.postBindFixup();
				andLeft = newOr;

				if (leftNullable)
				{
					UnaryComparisonOperatorNode leftIsNull = (UnaryComparisonOperatorNode)
									getNodeFactory().getNode(
														C_NodeTypes.IS_NULL_NODE,
														leftOperand,
														getContextManager());
					leftIsNull.bindComparisonOperator();
					newOr = (OrNode) getNodeFactory().getNode(
													C_NodeTypes.OR_NODE,
													leftIsNull,
													andLeft,
													getContextManager());
					newOr.postBindFixup();
					andLeft = newOr;
				}
				if (rightNullable)
				{
					UnaryComparisonOperatorNode rightIsNull = (UnaryComparisonOperatorNode)
									getNodeFactory().getNode(
														C_NodeTypes.IS_NULL_NODE,
														rightOperand,
														getContextManager());
					rightIsNull.bindComparisonOperator();
					newOr = (OrNode) getNodeFactory().getNode(
													C_NodeTypes.OR_NODE,
													rightIsNull,
													andLeft,
													getContextManager());
					newOr.postBindFixup();
					andLeft = newOr;
				}
			}
		}

		/* Place an AndNode above the <BinaryComparisonOperator> */
		andNode = (AndNode) getNodeFactory().getNode(
													C_NodeTypes.AND_NODE,
													andLeft,
													getTrueNode(),
													getContextManager());

		/* Build the referenced table map for the new predicate */
		tableMap = new JBitSet(numTables);
		andNode.postBindFixup();

		/* Put the AndNode under a Predicate */
		predicate = (Predicate) getNodeFactory().getNode(
										C_NodeTypes.PREDICATE,
										andNode,
										tableMap,
										getContextManager());
		predicate.categorize();

		/* Push the new Predicate to the subquery's list */
		resultSet = resultSet.addNewPredicate(predicate);

		/* Clean up the leftOperand and subquery ResultColumn */
		leftOperand = null;
		firstRC.setType(getTypeServices());
		firstRC.setExpression(getTrueNode());

		/* Add the IS [NOT] NULL above the SubqueryNode */
		switch (subqueryType)
		{
			case IN_SUBQUERY:
			case EQ_ANY_SUBQUERY:
			case NE_ANY_SUBQUERY:
			case LE_ANY_SUBQUERY:
			case LT_ANY_SUBQUERY:
			case GE_ANY_SUBQUERY:
			case GT_ANY_SUBQUERY:
				ucoNode = (UnaryComparisonOperatorNode) 
									getNodeFactory().getNode(
												C_NodeTypes.IS_NOT_NULL_NODE,
												this,
												getContextManager());
				break;

			case NOT_IN_SUBQUERY:
			case EQ_ALL_SUBQUERY:
			case NE_ALL_SUBQUERY:
			case LE_ALL_SUBQUERY:
			case LT_ALL_SUBQUERY:
			case GE_ALL_SUBQUERY:
			case GT_ALL_SUBQUERY:
				ucoNode = (UnaryComparisonOperatorNode) 
									getNodeFactory().getNode(
													C_NodeTypes.IS_NULL_NODE,
													this,
													getContextManager());
				break;
		}
		ucoNode.bindComparisonOperator();
		return ucoNode;
	}"
3,464,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.client.am,org.apache.derby.client.am.PreparedStatement,,flowExecute,,switch (sqlMode_) {,,2021,2078,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/client/org/apache/derby/client/am/PreparedStatement.java#L2021,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/client/org/apache/derby/client/am/PreparedStatement.java,,unknown,"private void flowExecute(int executeType) throws SqlException {
        checkForClosedStatement();
        checkAutoGeneratedKeysParameters();
        clearWarningsX();
        checkForAppropriateSqlMode(executeType, sqlMode_);
        checkThatAllParametersAreSet();

        if (sqlMode_ == isUpdate__) {
            updateCount_ = 0;
        } else {
            updateCount_ = -1;
        }

        // DERBY-1036: Moved check till execute time to comply with embedded
        // behavior. Since we check here and not in setCursorName, several
        // statements can have the same cursor name as long as their result
        // sets are not simultaneously open.

        if (sqlMode_ == isQuery__) {
            checkForDuplicateCursorName();
        }

            agent_.beginWriteChain(this);

            boolean piggybackedAutocommit = writeCloseResultSets(true);  // true means permit auto-commits

            int numInputColumns;
            boolean outputExpected;
            try
            {
                numInputColumns = (parameterMetaData_ != null) ? parameterMetaData_.getColumnCount() : 0;
                outputExpected = (resultSetMetaData_ != null && resultSetMetaData_.getColumnCount() > 0);
            }
            catch ( SQLException se )
            {
                // Generate a SqlException for this, we don't want to throw
                // SQLException in this internal method
                throw new SqlException(se);
            }
            boolean chainAutoCommit = false;
            boolean commitSubstituted = false;
            boolean repositionedCursor = false;
            boolean timeoutSent = false;
            ResultSet scrollableRS = null;

            if (doWriteTimeout) {
                timeoutArrayList.set(0, TIMEOUT_STATEMENT + timeout_);
                writeSetSpecialRegister(timeoutArrayList);
                doWriteTimeout = false;
                timeoutSent = true;
            }
            switch (sqlMode_) {
            case isUpdate__:
                if (positionedUpdateCursorName_ != null) {
                    scrollableRS = agent_.sectionManager_.getPositionedUpdateResultSet(positionedUpdateCursorName_);
                }
                if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                    repositionedCursor =
                            scrollableRS.repositionScrollableResultSetBeforeJDBC1PositionedUpdateDelete();
                    if (!repositionedCursor) {
                        scrollableRS = null;
                    }
                }

                chainAutoCommit = connection_.willAutoCommitGenerateFlow() && isAutoCommittableStatement_;

                boolean chainOpenQueryForAutoGeneratedKeys = (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS);
                writeExecute(section_,
                        parameterMetaData_,
                        parameters_,
                        numInputColumns,
                        outputExpected,
                        (chainAutoCommit || chainOpenQueryForAutoGeneratedKeys)// chain flag
                ); // chain flag

                if (chainOpenQueryForAutoGeneratedKeys) {
                    prepareAutoGeneratedKeysStatement();
                    writeOpenQuery(preparedStatementForAutoGeneratedKeys_.section_,
                            preparedStatementForAutoGeneratedKeys_.fetchSize_,
                            preparedStatementForAutoGeneratedKeys_.resultSetType_);
                }
                

                if (chainAutoCommit) {
                    // we have encountered an error in writing the execute, so do not
                    // flow an autocommit
                    if (agent_.accumulatedReadExceptions_ != null) {
                        // currently, the only write exception we encounter is for
                        // data truncation: SQLSTATE 01004, so we don't bother checking for this
                        connection_.writeCommitSubstitute_();
                        commitSubstituted = true;
                    } else {
                        // there is no write error, so flow the commit
                        connection_.writeCommit();
                    }
                }
                break;

            case isQuery__:
                writeOpenQuery(section_,
                        fetchSize_,
                        resultSetType_,
                        numInputColumns,
                        parameterMetaData_,
                        parameters_);
                break;

            case isCall__:
                writeExecuteCall(outputRegistered_, // if no out/inout parameter, outputExpected = false
                        null,
                        section_,
                        fetchSize_,
                        false, // do not suppress ResultSets for regular CALLs
                        resultSetType_,
                        parameterMetaData_,
                        parameters_); // cross conversion
                break;
            }

            agent_.flow(this);

            super.readCloseResultSets(true);  // true means permit auto-commits

            // turn inUnitOfWork_ flag back on and add statement
            // back on commitListeners_ list if they were off
            // by an autocommit chained to a close cursor.
            if (piggybackedAutocommit) {
                connection_.completeTransactionStart();
            }

            markResultSetsClosed(true); // true means remove from list of commit and rollback listeners

            if (timeoutSent) {
                readSetSpecialRegister(); // Read response to the EXCSQLSET
            }

            switch (sqlMode_) {
            case isUpdate__:
                // do not need to reposition for a rowset cursor
                if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                    scrollableRS.readPositioningFetch_();
                }

                else {
                    readExecute();

                    if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
                        readPrepareAutoGeneratedKeysStatement();
                        preparedStatementForAutoGeneratedKeys_.readOpenQuery();
                        generatedKeysResultSet_ = preparedStatementForAutoGeneratedKeys_.resultSet_;
                        preparedStatementForAutoGeneratedKeys_.resultSet_ = null;
                    }
                }

                if (chainAutoCommit) {
                    if (commitSubstituted) {
                        connection_.readCommitSubstitute_();
                    } else {
                        connection_.readCommit();
                    }
                }
                break;

            case isQuery__:
                try {
                    readOpenQuery();
                } catch (DisconnectException dise) {
                    throw dise;
                } catch (SqlException e) {
                    throw e;
                }
                // resultSet_ is null if open query failed.
                // check for null resultSet_ before using it.
                if (resultSet_ != null) {
                    resultSet_.parseScrollableRowset();
                    //if (resultSet_.scrollable_) resultSet_.getRowCount();

                    // DERBY-1183: If we set it up earlier, the entry in
                    // clientCursorNameCache_ gets wiped out by the closing of
                    // result sets happening during readCloseResultSets above
                    // because ResultSet#markClosed calls
                    // Statement#removeClientCursorNameFromCache.
                    setupCursorNameCacheAndMappings();
                }
                break;

            case isCall__:
                readExecuteCall();
                break;

            }


            try {
                agent_.endReadChain();
            } catch (SqlException e) {
                throw e;

            }

            if (sqlMode_ == isCall__) {
                parseStorProcReturnedScrollableRowset();
                checkForStoredProcResultSetCount(executeType);
                // When there are no result sets back, we will commit immediately when autocommit is true.
                // make sure a commit is not performed when making the call to the sqlca message procedure
                if (connection_.autoCommit_ && resultSet_ == null && resultSetList_ == null && isAutoCommittableStatement_) {
                    connection_.flowAutoCommit();
                }
            }

            // The JDBC spec says that executeUpdate() should return 0
            // when no row count is returned.
            if (executeType == executeUpdateMethod__ && updateCount_ < 0) {
                updateCount_ = 0;
            }

            // Throw an exception if holdability returned by the server is different from requested.
            if (resultSet_ != null && resultSet_.resultSetHoldability_ != resultSetHoldability_ && sqlMode_ != isCall__) {
                throw new SqlException(agent_.logWriter_, 
                    new ClientMessageId(SQLState.UNABLE_TO_OPEN_RESULTSET_WITH_REQUESTED_HOLDABILTY),
                        resultSetHoldability_);
            }
    }"
4,615,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.CastNode,,getCastFromNumericType,,destJDBCTypeId,destJDBCTypeId,682,722,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/engine/org/apache/derby/impl/sql/compile/CastNode.java#L682,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/engine/org/apache/derby/impl/sql/compile/CastNode.java,,open,"private ValueNode getCastFromNumericType(
									  DataValueDescriptor constantValue, 
									  int destJDBCTypeId)
		throws StandardException
	{
		int nodeType = -1;
		Object constantObject = null;

		switch (destJDBCTypeId)
		{
			case Types.CHAR:
				nodeType = C_NodeTypes.CHAR_CONSTANT_NODE;
				constantObject = constantValue.getString();
				return (ValueNode) getNodeFactory().getNode(
										nodeType,
										constantObject, 
										ReuseFactory.getInteger(
                                                getTypeServices().getMaximumWidth()),
										getContextManager());

			case Types.TINYINT:
				nodeType = C_NodeTypes.TINYINT_CONSTANT_NODE;
				constantObject = new Byte(constantValue.getByte());
				break;

			case Types.SMALLINT:
				nodeType = C_NodeTypes.SMALLINT_CONSTANT_NODE;
				constantObject = ReuseFactory.getShort(constantValue.getShort());
				break;

			case Types.INTEGER:
				nodeType = C_NodeTypes.INT_CONSTANT_NODE;
				constantObject = ReuseFactory.getInteger(constantValue.getInt());
				break;

			case Types.BIGINT:
				nodeType = C_NodeTypes.LONGINT_CONSTANT_NODE;
				constantObject = ReuseFactory.getLong(constantValue.getLong());
				break;

			case Types.REAL:
				nodeType = C_NodeTypes.FLOAT_CONSTANT_NODE;
				constantObject = new Float(NumberDataType.normalizeREAL(constantValue.getDouble()));
				break;

			case Types.DOUBLE:
				// no need to normalize here because no constant could be out of range for a double
				nodeType = C_NodeTypes.DOUBLE_CONSTANT_NODE;
				constantObject = new Double(constantValue.getDouble());
				break;
		}

		if (nodeType == -1)
			return this;


		return (ValueNode) getNodeFactory().getNode(
										nodeType,
										constantObject, 
										getContextManager());

	}"
5,135,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,commonDatatypeName,,switch (getToken(start+1).kind),,761,768,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L761,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
6,383,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.tools.dblook,org.apache.derby.impl.tools.dblook.DB_Alias,,createProcFuncOrUDTString,,aliasType,aliasType,171,175,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//java/tools/org/apache/derby/impl/tools/dblook/DB_Alias.java#L171,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/tools/org/apache/derby/impl/tools/dblook/DB_Alias.java,,unknown,"private static String createProcFuncOrUDTString(String aliasName,
		ResultSet aliasInfo, char aliasType) throws SQLException
	{

		StringBuffer alias = new StringBuffer(""CREATE "");

        switch( aliasType )
        {
        case UDT_TYPE: alias.append( ""TYPE "" ); break;
        case PROCEDURE_TYPE: alias.append(""PROCEDURE ""); break;
        case FUNCTION_TYPE: alias.append(""FUNCTION ""); break;
        }
		alias.append(aliasName);
		alias.append("" "");

		String params = aliasInfo.getString(2);

        if ( aliasType != UDT_TYPE )
        {
            // Just grab the parameter part; we'll get the method name later.
            alias.append(params.substring(params.indexOf(""(""), params.length()));
            alias.append("" "");
        }

		// Now add the external name.
		alias.append(""EXTERNAL NAME '"");
		alias.append(aliasInfo.getString(5));

        if ( aliasType == UDT_TYPE )
        {
            alias.append(""' "");
            alias.append( params );
        }
        else
        {
            alias.append(""."");
            // Get method name from parameter string fetched above.
            alias.append(params.substring(0, params.indexOf(""("")));
            alias.append(""' "");
        }

		return alias.toString();

	}"
7,403,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,dataTypeCheck,,switch (getToken(start).kind),,703,708,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L703,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
8,473,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,remainingPredicateFollows,,switch (getToken(2).kind),,942,947,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L942,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
9,658,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,jj_rescan_token,,switch (i) {,,21569,21655,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L21569,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
10,2155,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.benchmark.byTask.utils,org.apache.lucene.benchmark.byTask.utils.Algorithm,,<init>,,c,c,123,231,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java#L123,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java,,unknown,
11,2199,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.index,org.apache.lucene.index.TestIndexWriterReader$AddDirectoriesThreads,,doBody,,switch (j % 4) {,,489,502,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java#L489,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java,,unknown,"void doBody(int j, Directory[] dirs) throws Throwable {
      switch (j % 4) {
        case 0:
          mainWriter.addIndexes(dirs);
          mainWriter.forceMerge(1);
          break;
        case 1:
          mainWriter.addIndexes(dirs);
          numaddIndexes.incrementAndGet();
          break;
        case 2:
          mainWriter.addIndexes(readers);
          break;
        case 3:
          mainWriter.commit();
      }
      count.addAndGet(dirs.length*NUM_INIT_DOCS);
    }"
12,2319,lucene-solr,SF_SWITCH_FALLTHROUGH,A,last,,STYLE,org.apache.lucene.index,org.apache.lucene.index.TestDocValuesIndexing,,runTestNumerics,,mod,mod,277,282,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing.java#L277,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing.java,,unknown,"@SuppressWarnings(""fallthrough"")
  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)
      throws IOException {
    Directory d = newDirectory();
    IndexWriter w = new IndexWriter(d, cfg);
    final int numValues = 50 + atLeast(10);
    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);

    // run in random order to test if fill works correctly during merges
    Collections.shuffle(numVariantList, random);
    for (Type val : numVariantList) {
      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,
          withDeletions, 7);
      List<Closeable> closeables = new ArrayList<Closeable>();
      IndexReader r = IndexReader.open(w, true);
      final int numRemainingValues = numValues - deleted.cardinality();
      final int base = r.numDocs() - numRemainingValues;
      // for FIXED_INTS_8 we use value mod 128 - to enable testing in 
      // one go we simply use numValues as the mod for all other INT types
      int mod = numValues;
      switch (val) {
      case FIXED_INTS_8:
        mod = 128;
      case FIXED_INTS_16:
      case FIXED_INTS_32:
      case FIXED_INTS_64:
      case VAR_INTS: {
        DocValues intsReader = getDocValues(r, val.name());
        assertNotNull(intsReader);

        Source ints = getSource(intsReader);

        for (int i = 0; i < base; i++) {
          long value = ints.getInt(i);
          assertEquals(""index "" + i, 0, value);
        }

        int expected = 0;
        for (int i = base; i < r.numDocs(); i++, expected++) {
          while (deleted.get(expected)) {
            expected++;
          }
          assertEquals(val + "" mod: "" + mod + "" index: "" +  i, expected%mod, ints.getInt(i));
        }
      }
        break;
      case FLOAT_32:
      case FLOAT_64: {
        DocValues floatReader = getDocValues(r, val.name());
        assertNotNull(floatReader);
        Source floats = getSource(floatReader);
        for (int i = 0; i < base; i++) {
          double value = floats.getFloat(i);
          assertEquals(val + "" failed for doc: "" + i + "" base: "" + base,
              0.0d, value, 0.0d);
        }
        int expected = 0;
        for (int i = base; i < r.numDocs(); i++, expected++) {
          while (deleted.get(expected)) {
            expected++;
          }
          assertEquals(""index "" + i, 2.0 * expected, floats.getFloat(i),
              0.00001);
        }
      }
        break;
      default:
        fail(""unexpected value "" + val);
      }

      closeables.add(r);
      for (Closeable toClose : closeables) {
        toClose.close();
      }
    }
    w.close();
    d.close();
  }"
13,2321,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.util,org.apache.lucene.util.English,,longToEnglish,,i,i,79,102,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/java/org/apache/lucene/util/English.java#L79,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/java/org/apache/lucene/util/English.java,,unknown,"public static String longToEnglish(long i) {
    StringBuilder result = new StringBuilder();
    longToEnglish(i, result);
    return result.toString();
  }"
14,2489,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.analysis.nl,org.apache.lucene.analysis.nl.DutchStemmer,,storeYandI,,i,"i,sb,charAt",362,374,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java#L362,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java,,unknown,"private void storeYandI(StringBuilder sb) {
    if (sb.charAt(0) == 'y')
      sb.setCharAt(0, 'Y');

    int last = sb.length() - 1;

    for (int i = 1; i < last; i++) {
      switch (sb.charAt(i)) {
        case 'i':
          {
            if (isVowel(sb.charAt(i - 1)) &&
                isVowel(sb.charAt(i + 1))
            )
              sb.setCharAt(i, 'I');
            break;
          }
        case 'y':
          {
            if (isVowel(sb.charAt(i - 1)))
              sb.setCharAt(i, 'Y');
            break;
          }
      }
    }
    if (last > 0 && sb.charAt(last) == 'y' && isVowel(sb.charAt(last - 1)))
      sb.setCharAt(last, 'Y');
  }"
15,2610,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.solr.handler,org.apache.solr.handler.XMLLoader,,processDelete,,event,event,198,230,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/core/src/java/org/apache/solr/handler/XMLLoader.java#L198,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/core/src/java/org/apache/solr/handler/XMLLoader.java,,unknown,"void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {
    // Parse the command
    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);

    for (int i = 0; i < parser.getAttributeCount(); i++) {
      String attrName = parser.getAttributeLocalName(i);
      String attrVal = parser.getAttributeValue(i);
      if (""fromPending"".equals(attrName)) {
        // deprecated
      } else if (""fromCommitted"".equals(attrName)) {
        // deprecated
      } else {
        XmlUpdateRequestHandler.log.warn(""unexpected attribute delete/@"" + attrName);
      }
    }

    StringBuilder text = new StringBuilder();
    while (true) {
      int event = parser.next();
      switch (event) {
        case XMLStreamConstants.START_ELEMENT:
          String mode = parser.getLocalName();
          if (!(""id"".equals(mode) || ""query"".equals(mode))) {
            XmlUpdateRequestHandler.log.warn(""unexpected XML tag /delete/"" + mode);
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                    ""unexpected XML tag /delete/"" + mode);
          }
          text.setLength(0);
          break;

        case XMLStreamConstants.END_ELEMENT:
          String currTag = parser.getLocalName();
          if (""id"".equals(currTag)) {
            deleteCmd.id = text.toString();
          } else if (""query"".equals(currTag)) {
            deleteCmd.query = text.toString();
          } else if (""delete"".equals(currTag)) {
            return;
          } else {
            XmlUpdateRequestHandler.log.warn(""unexpected XML tag /delete/"" + currTag);
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                    ""unexpected XML tag /delete/"" + currTag);
          }
          processor.processDelete(deleteCmd);
          deleteCmd.clear();
          break;

          // Add everything to the text
        case XMLStreamConstants.SPACE:
        case XMLStreamConstants.CDATA:
        case XMLStreamConstants.CHARACTERS:
          text.append(parser.getText());
          break;
      }
    }
  }"
16,2759,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.index,org.apache.lucene.index.TestStressIndexing2$IndexingThread,,indexDoc,,switch (nextInt(4)) {,,785,797,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java#L785,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java,,unknown,"public void indexDoc() throws IOException {
      Document d = new Document();

      FieldType customType1 = new FieldType(TextField.TYPE_STORED);
      customType1.setTokenized(false);
      customType1.setOmitNorms(true);
      
      ArrayList<Field> fields = new ArrayList<Field>();      
      String idString = getIdString();
      Field idField =  newField(""id"", idString, customType1);
      fields.add(idField);

      int nFields = nextInt(maxFields);
      for (int i=0; i<nFields; i++) {

        FieldType customType = new FieldType();
        switch (nextInt(4)) {
        case 0:
          break;
        case 1:
          customType.setStoreTermVectors(true);
          break;
        case 2:
          customType.setStoreTermVectors(true);
          customType.setStoreTermVectorPositions(true);
          break;
        case 3:
          customType.setStoreTermVectors(true);
          customType.setStoreTermVectorOffsets(true);
          break;
        }
        
        switch (nextInt(4)) {
          case 0:
            customType.setStored(true);
            customType.setOmitNorms(true);
            customType.setIndexed(true);
            fields.add(newField(""f"" + nextInt(100), getString(1), customType));
            break;
          case 1:
            customType.setIndexed(true);
            customType.setTokenized(true);
            fields.add(newField(""f"" + nextInt(100), getString(0), customType));
            break;
          case 2:
            customType.setStored(true);
            customType.setStoreTermVectors(false);
            customType.setStoreTermVectorOffsets(false);
            customType.setStoreTermVectorPositions(false);
            fields.add(newField(""f"" + nextInt(100), getString(0), customType));
            break;
          case 3:
            customType.setStored(true);
            customType.setIndexed(true);
            customType.setTokenized(true);
            fields.add(newField(""f"" + nextInt(100), getString(bigFieldSize), customType));
            break;          
        }
      }

      if (sameFieldOrder) {
        Collections.sort(fields, fieldNameComparator);
      } else {
        // random placement of id field also
        Collections.swap(fields,nextInt(fields.size()), 0);
      }

      for (int i=0; i<fields.size(); i++) {
        d.add(fields.get(i));
      }
      if (VERBOSE) {
        System.out.println(Thread.currentThread().getName() + "": indexing id:"" + idString);
      }
      w.updateDocument(new Term(""id"", idString), d);
      //System.out.println(Thread.currentThread().getName() + "": indexing ""+d);
      docs.put(idString, d);
    }"
17,2765,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.benchmark.byTask.feeds.demohtml,org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser,,jj_rescan_token,,switch (i) {,,712,714,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/HTMLParser.java#L712,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/HTMLParser.java,,unknown,"private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }"
18,2783,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.solr.analysis,org.apache.solr.analysis.MappingCharFilterFactory,,parseString,,c,c,109,121,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java#L109,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java,,unknown,"protected String parseString( String s ){
    int readPos = 0;
    int len = s.length();
    int writePos = 0;
    while( readPos < len ){
      char c = s.charAt( readPos++ );
      if( c == '\\' ){
        if( readPos >= len )
          throw new RuntimeException( ""Invalid escaped char in ["" + s + ""]"" );
        c = s.charAt( readPos++ );
        switch( c ) {
          case '\\' : c = '\\'; break;
          case '""' : c = '""'; break;
          case 'n' : c = '\n'; break;
          case 't' : c = '\t'; break;
          case 'r' : c = '\r'; break;
          case 'b' : c = '\b'; break;
          case 'f' : c = '\f'; break;
          case 'u' :
            if( readPos + 3 >= len )
              throw new RuntimeException( ""Invalid escaped char in ["" + s + ""]"" );
            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );
            readPos += 4;
            break;
        }
      }
      out[writePos++] = c;
    }
    return new String( out, 0, writePos );
  }"
19,2970,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.analysis.nl,org.apache.lucene.analysis.nl.DutchStemmer,,substitute,,buffer,"buffer,i,charAt",269,297,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java#L269,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java,,unknown,"private void substitute(StringBuilder buffer) {
    for (int i = 0; i < buffer.length(); i++) {
      switch (buffer.charAt(i)) {
        case 'ä':
        case 'á':
          {
            buffer.setCharAt(i, 'a');
            break;
          }
        case 'ë':
        case 'é':
          {
            buffer.setCharAt(i, 'e');
            break;
          }
        case 'ü':
        case 'ú':
          {
            buffer.setCharAt(i, 'u');
            break;
          }
        case 'ï':
        case 'i':
          {
            buffer.setCharAt(i, 'i');
            break;
          }
        case 'ö':
        case 'ó':
          {
            buffer.setCharAt(i, 'o');
            break;
          }
      }
    }
  }"
20,1802,lucene-solr,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.lucene.search.join,org.apache.lucene.search.join.TermsWithScoreCollector$SV,,collect,,scoreMode,scoreMode,118,124,close,https://github.com/apache/lucene-solr/tree/43535fecb8455b3f9364f447e129ae05f79697e2//lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java#L118,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java,,close,"@Override
    public void collect(int doc) throws IOException {
      fromDocTerms.get(doc, spare);
      int ord = collectedTerms.add(spare);
      if (ord < 0) {
        ord = -ord - 1;
      } else {
        if (ord >= scoreSums.length) {
          scoreSums = ArrayUtil.grow(scoreSums);
        }
      }

      float current = scorer.score();
      float existing = scoreSums[ord];
      if (Float.compare(existing, 0.0f) == 0) {
        scoreSums[ord] = current;
      } else {
        switch (scoreMode) {
          case Total:
            scoreSums[ord] = scoreSums[ord] + current;
            break;
          case Max:
            if (current > existing) {
              scoreSums[ord] = current;
            }
        }
      }
    }"
21,2017,lucene-solr,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.lucene.expressions.js,org.apache.lucene.expressions.js.JavascriptLexer,,mTokens,,alt17,alt17,1588,1809,close,https://github.com/apache/lucene-solr/tree/43535fecb8455b3f9364f447e129ae05f79697e2//lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java#L1588,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java,,unknown,"@Override
  public void mTokens() throws RecognitionException {
    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )
    int alt17=32;
    switch ( input.LA(1) ) {
    case '+':
      {
      alt17=1;
      }
      break;
    case '&':
      {
      int LA17_2 = input.LA(2);
      if ( (LA17_2=='&') ) {
        alt17=9;
      }

      else {
        alt17=2;
      }

      }
      break;
    case '~':
      {
      alt17=3;
      }
      break;
    case '|':
      {
      int LA17_4 = input.LA(2);
      if ( (LA17_4=='|') ) {
        alt17=11;
      }

      else {
        alt17=4;
      }

      }
      break;
    case '<':
      {
      switch ( input.LA(2) ) {
      case '<':
        {
        alt17=5;
        }
        break;
      case '=':
        {
        alt17=18;
        }
        break;
      default:
        alt17=17;
      }
      }
      break;
    case '>':
      {
      switch ( input.LA(2) ) {
      case '>':
        {
        int LA17_31 = input.LA(3);
        if ( (LA17_31=='>') ) {
          alt17=7;
        }

        else {
          alt17=6;
        }

        }
        break;
      case '=':
        {
        alt17=16;
        }
        break;
      default:
        alt17=15;
      }
      }
      break;
    case '^':
      {
      alt17=8;
      }
      break;
    case '!':
      {
      int LA17_8 = input.LA(2);
      if ( (LA17_8=='=') ) {
        alt17=19;
      }

      else {
        alt17=10;
      }

      }
      break;
    case ':':
      {
      alt17=12;
      }
      break;
    case ',':
      {
      alt17=13;
      }
      break;
    case '=':
      {
      alt17=14;
      }
      break;
    case '?':
      {
      alt17=20;
      }
      break;
    case '/':
      {
      alt17=21;
      }
      break;
    case '.':
      {
      int LA17_14 = input.LA(2);
      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {
        alt17=30;
      }

      else {
        alt17=22;
      }

      }
      break;
    case '(':
      {
      alt17=23;
      }
      break;
    case '%':
      {
      alt17=24;
      }
      break;
    case '*':
      {
      alt17=25;
      }
      break;
    case ')':
      {
      alt17=26;
      }
      break;
    case '-':
      {
      alt17=27;
      }
      break;
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '_':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
      {
      alt17=28;
      }
      break;
    case '\t':
    case '\n':
    case '\r':
    case ' ':
      {
      alt17=29;
      }
      break;
    case '0':
      {
      switch ( input.LA(2) ) {
      case 'X':
      case 'x':
        {
        alt17=32;
        }
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
        {
        alt17=31;
        }
        break;
      default:
        alt17=30;
      }
      }
      break;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      {
      alt17=30;
      }
      break;
    default:
      NoViableAltException nvae =
        new NoViableAltException("""", 17, 0, input);
      throw nvae;
    }
    switch (alt17) {
      case 1 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD
        {
        mAT_ADD(); 

        }
        break;
      case 2 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND
        {
        mAT_BIT_AND(); 

        }
        break;
      case 3 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT
        {
        mAT_BIT_NOT(); 

        }
        break;
      case 4 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR
        {
        mAT_BIT_OR(); 

        }
        break;
      case 5 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL
        {
        mAT_BIT_SHL(); 

        }
        break;
      case 6 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR
        {
        mAT_BIT_SHR(); 

        }
        break;
      case 7 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU
        {
        mAT_BIT_SHU(); 

        }
        break;
      case 8 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR
        {
        mAT_BIT_XOR(); 

        }
        break;
      case 9 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND
        {
        mAT_BOOL_AND(); 

        }
        break;
      case 10 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT
        {
        mAT_BOOL_NOT(); 

        }
        break;
      case 11 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR
        {
        mAT_BOOL_OR(); 

        }
        break;
      case 12 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON
        {
        mAT_COLON(); 

        }
        break;
      case 13 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA
        {
        mAT_COMMA(); 

        }
        break;
      case 14 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ
        {
        mAT_COMP_EQ(); 

        }
        break;
      case 15 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT
        {
        mAT_COMP_GT(); 

        }
        break;
      case 16 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE
        {
        mAT_COMP_GTE(); 

        }
        break;
      case 17 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT
        {
        mAT_COMP_LT(); 

        }
        break;
      case 18 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE
        {
        mAT_COMP_LTE(); 

        }
        break;
      case 19 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ
        {
        mAT_COMP_NEQ(); 

        }
        break;
      case 20 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE
        {
        mAT_COND_QUE(); 

        }
        break;
      case 21 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE
        {
        mAT_DIVIDE(); 

        }
        break;
      case 22 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT
        {
        mAT_DOT(); 

        }
        break;
      case 23 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN
        {
        mAT_LPAREN(); 

        }
        break;
      case 24 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO
        {
        mAT_MODULO(); 

        }
        break;
      case 25 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY
        {
        mAT_MULTIPLY(); 

        }
        break;
      case 26 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN
        {
        mAT_RPAREN(); 

        }
        break;
      case 27 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT
        {
        mAT_SUBTRACT(); 

        }
        break;
      case 28 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID
        {
        mNAMESPACE_ID(); 

        }
        break;
      case 29 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS
        {
        mWS(); 

        }
        break;
      case 30 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL
        {
        mDECIMAL(); 

        }
        break;
      case 31 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL
        {
        mOCTAL(); 

        }
        break;
      case 32 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX
        {
        mHEX(); 

        }
        break;

    }
  }"
22,10062,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.DateUtils,,modify,,field,field,1047,1073,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/DateUtils.java#L1047,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/DateUtils.java,,close,"private static void modify(final Calendar val, final int field, final int modType) {
        if (val.get(Calendar.YEAR) > 280000000) {
            throw new ArithmeticException(""Calendar value too large for accurate calculations"");
        }
        
        if (field == Calendar.MILLISECOND) {
            return;
        }

        // ----------------- Fix for LANG-59 ---------------------- START ---------------
        // see http://issues.apache.org/jira/browse/LANG-59
        //
        // Manually truncate milliseconds, seconds and minutes, rather than using
        // Calendar methods.

        final Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

        // truncate milliseconds
        final int millisecs = val.get(Calendar.MILLISECOND);
        if (MODIFY_TRUNCATE == modType || millisecs < 500) {
            time = time - millisecs;
        }
        if (field == Calendar.SECOND) {
            done = true;
        }

        // truncate seconds
        final int seconds = val.get(Calendar.SECOND);
        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {
            time = time - (seconds * 1000L);
        }
        if (field == Calendar.MINUTE) {
            done = true;
        }

        // truncate minutes
        final int minutes = val.get(Calendar.MINUTE);
        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

        // reset time
        if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }
        // ----------------- Fix for LANG-59 ----------------------- END ----------------

        boolean roundUp = false;
        for (final int[] aField : fields) {
            for (final int element : aField) {
                if (element == field) {
                    //This is our field... we stop looping
                    if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {
                        if (field == DateUtils.SEMI_MONTH) {
                            //This is a special case that's hard to generalize
                            //If the date is 1, we round up to 16, otherwise
                            //  we subtract 15 days and add 1 month
                            if (val.get(Calendar.DATE) == 1) {
                                val.add(Calendar.DATE, 15);
                            } else {
                                val.add(Calendar.DATE, -15);
                                val.add(Calendar.MONTH, 1);
                            }
// ----------------- Fix for LANG-440 ---------------------- START ---------------
                        } else if (field == Calendar.AM_PM) {
                            // This is a special case
                            // If the time is 0, we round up to 12, otherwise
                            //  we subtract 12 hours and add 1 day
                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {
                                val.add(Calendar.HOUR_OF_DAY, 12);
                            } else {
                                val.add(Calendar.HOUR_OF_DAY, -12);
                                val.add(Calendar.DATE, 1);
                            }
// ----------------- Fix for LANG-440 ---------------------- END ---------------
                        } else {
                            //We need at add one to this field since the
                            //  last number causes us to round up
                            val.add(aField[0], 1);
                        }
                    }
                    return;
                }
            }
            //We have various fields that are not easy roundings
            int offset = 0;
            boolean offsetSet = false;
            //These are special types of fields that require different rounding rules
            switch (field) {
                case DateUtils.SEMI_MONTH:
                    if (aField[0] == Calendar.DATE) {
                        //If we're going to drop the DATE field's value,
                        //  we want to do this our own way.
                        //We need to subtrace 1 since the date has a minimum of 1
                        offset = val.get(Calendar.DATE) - 1;
                        //If we're above 15 days adjustment, that means we're in the
                        //  bottom half of the month and should stay accordingly.
                        if (offset >= 15) {
                            offset -= 15;
                        }
                        //Record whether we're in the top or bottom half of that range
                        roundUp = offset > 7;
                        offsetSet = true;
                    }
                    break;
                case Calendar.AM_PM:
                    if (aField[0] == Calendar.HOUR_OF_DAY) {
                        //If we're going to drop the HOUR field's value,
                        //  we want to do this our own way.
                        offset = val.get(Calendar.HOUR_OF_DAY);
                        if (offset >= 12) {
                            offset -= 12;
                        }
                        roundUp = offset >= 6;
                        offsetSet = true;
                    }
                    break;
            }
            if (!offsetSet) {
                final int min = val.getActualMinimum(aField[0]);
                final int max = val.getActualMaximum(aField[0]);
                //Calculate the offset from the minimum allowed value
                offset = val.get(aField[0]) - min;
                //Set roundUp if this is more than half way between the minimum and maximum
                roundUp = offset > ((max - min) / 2);
            }
            //We need to remove this field
            if (offset != 0) {
                val.set(aField[0], val.get(aField[0]) - offset);
            }
        }
        throw new IllegalArgumentException(""The field "" + field + "" is not supported"");

    }"
23,10067,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.DateUtils,,iterator,,rangeStyle,rangeStyle,1182,1196,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/DateUtils.java#L1182,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/DateUtils.java,,close,"public static Iterator<Calendar> iterator(final Date focus, final int rangeStyle) {
        if (focus == null) {
            throw new IllegalArgumentException(""The date must not be null"");
        }
        final Calendar gval = Calendar.getInstance();
        gval.setTime(focus);
        return iterator(gval, rangeStyle);
    }"
24,10195,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.FastDateParser,,getStrategy,,switch(formatField.charAt(0)) {,,433,474,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/FastDateParser.java#L433,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/FastDateParser.java,,open,"private Strategy getStrategy(String formatField, final Calendar definingCalendar) {
        switch(formatField.charAt(0)) {
        case '\'':
            if(formatField.length()>2) {
                formatField= formatField.substring(1, formatField.length()-1);
            }
            //$FALL-THROUGH$
        default:
            return new CopyQuotedStrategy(formatField);
        case 'D':
            return DAY_OF_YEAR_STRATEGY;
        case 'E':
            return getLocaleSpecificStrategy(Calendar.DAY_OF_WEEK, definingCalendar);
        case 'F':
            return DAY_OF_WEEK_IN_MONTH_STRATEGY;
        case 'G':
            return getLocaleSpecificStrategy(Calendar.ERA, definingCalendar);
        case 'H':
            return MODULO_HOUR_OF_DAY_STRATEGY;
        case 'K':
            return HOUR_STRATEGY;
        case 'M':
            return formatField.length()>=3 ?getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) :NUMBER_MONTH_STRATEGY;
        case 'S':
            return MILLISECOND_STRATEGY;
        case 'W':
            return WEEK_OF_MONTH_STRATEGY;
        case 'a':
            return getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);
        case 'd':
            return DAY_OF_MONTH_STRATEGY;
        case 'h':
            return MODULO_HOUR_STRATEGY;
        case 'k':
            return HOUR_OF_DAY_STRATEGY;
        case 'm':
            return MINUTE_STRATEGY;
        case 's':
            return SECOND_STRATEGY;
        case 'w':
            return WEEK_OF_YEAR_STRATEGY;
        case 'y':
            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;
        case 'Z':
        case 'z':
            return getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);
        }
    }"
25,10200,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.text,org.apache.commons.lang3.text.ExtendedMessageFormat,,parseFormatDescription,,pattern,"pattern,pos,charAt,getIndex",378,389,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java#L378,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java,,close,"private String parseFormatDescription(final String pattern, final ParsePosition pos) {
        final int start = pos.getIndex();
        seekNonWs(pattern, pos);
        final int text = pos.getIndex();
        int depth = 1;
        for (; pos.getIndex() < pattern.length(); next(pos)) {
            switch (pattern.charAt(pos.getIndex())) {
            case START_FE:
                depth++;
                break;
            case END_FE:
                depth--;
                if (depth == 0) {
                    return pattern.substring(text, pos.getIndex());
                }
                break;
            case QUOTE:
                getQuotedString(pattern, pos, false);
                break;
            }
        }
        throw new IllegalArgumentException(
                ""Unterminated format element at position "" + start);
    }"
26,10428,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.DateUtils,,getFragment,,fragment,fragment,1690,1695,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/DateUtils.java#L1690,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/DateUtils.java,,close,"private static long getFragment(final Date date, final int fragment, final int unit) {
        if(date == null) {
            throw  new IllegalArgumentException(""The date must not be null"");
        }
        final Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        return getFragment(calendar, fragment, unit);
    }"
27,10691,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.FastDateParser,,escapeRegex,,switch(c) {,,309,333,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/FastDateParser.java#L309,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/FastDateParser.java,,unknown,"private static StringBuilder escapeRegex(final StringBuilder regex, final String value, final boolean unquote) {
        regex.append(""\\Q"");
        for(int i= 0; i<value.length(); ++i) {
            char c= value.charAt(i);
            switch(c) {
            case '\'':
                if(unquote) {
                    if(++i==value.length()) {
                        return regex;
                    }
                    c= value.charAt(i);
                }
                break;
            case '\\':
                if(++i==value.length()) {
                    break;
                }                
                /*
                 * If we have found \E, we replace it with \E\\E\Q, i.e. we stop the quoting,
                 * quote the \ in \E, then restart the quoting.
                 * 
                 * Otherwise we just output the two characters.
                 * In each case the initial \ needs to be output and the final char is done at the end
                 */
                regex.append(c); // we always want the original \
                c = value.charAt(i); // Is it followed by E ?
                if (c == 'E') { // \E detected
                  regex.append(""E\\\\E\\""); // see comment above
                  c = 'Q'; // appended below
                }
                break;
            }
            regex.append(c);
        }
        regex.append(""\\E"");
        return regex;
    }"
28,9776,ant,SF_SWITCH_FALLTHROUGH,C,last,,STYLE,org.apache.tools.ant.util,org.apache.tools.ant.util.JavaEnvUtils,,getJrePackageTestCases,,tests,"tests,addElement",457,461,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/util/JavaEnvUtils.java#L457,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/util/JavaEnvUtils.java,,open,"public static Vector getJrePackageTestCases() {
        Vector tests = new Vector();
        tests.addElement(""java.lang.Object"");
        switch(javaVersionNumber) {
            case VERSION_1_8:
            case VERSION_1_7:
            case VERSION_1_6:
            case VERSION_1_5:
                tests.addElement(
                    ""com.sun.org.apache.xerces.internal.jaxp.datatype.DatatypeFactoryImpl "");
                // Fall tru
            case VERSION_1_4:
                tests.addElement(""sun.audio.AudioPlayer"");
                if (javaVersionNumber == VERSION_1_4) {
                    tests.addElement(""org.apache.crimson.parser.ContentModel"");
                    tests.addElement(""org.apache.xalan.processor.ProcessorImport"");
                    tests.addElement(""org.apache.xml.utils.URI"");
                    tests.addElement(""org.apache.xpath.XPathFactory"");
                }
                tests.addElement(""org.ietf.jgss.Oid"");
                tests.addElement(""org.w3c.dom.Attr"");
                tests.addElement(""org.xml.sax.XMLReader"");
                // fall through
            case VERSION_1_3:
                tests.addElement(""org.omg.CORBA.Any"");
                tests.addElement(""com.sun.corba.se.internal.corba.AnyImpl"");
                tests.addElement(""com.sun.jndi.ldap.LdapURL"");
                tests.addElement(""com.sun.media.sound.Printer"");
                tests.addElement(""com.sun.naming.internal.VersionHelper"");
                tests.addElement(""com.sun.org.omg.CORBA.Initializer"");
                tests.addElement(""sunw.io.Serializable"");
                tests.addElement(""sunw.util.EventListener"");
                // fall through
            case VERSION_1_2:
                tests.addElement(""javax.accessibility.Accessible"");
                tests.addElement(""sun.misc.BASE64Encoder"");
                tests.addElement(""com.sun.image.codec.jpeg.JPEGCodec"");
                // fall through
            case VERSION_1_1:
            default:
                //things like sun.reflection, sun.misc, sun.net
                tests.addElement(""sun.reflect.SerializationConstructorAccessorImpl"");
                tests.addElement(""sun.net.www.http.HttpClient"");
                tests.addElement(""sun.audio.AudioPlayer"");
                break;
        }
        return tests;
    }"
29,9927,ant,SF_SWITCH_FALLTHROUGH,C,last,,STYLE,org.apache.tools.ant.util,org.apache.tools.ant.util.JavaEnvUtils,,buildJrePackages,,jrePackages,"jrePackages,addElement",406,409,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/util/JavaEnvUtils.java#L406,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/util/JavaEnvUtils.java,,open,"private static void buildJrePackages() {
        jrePackages = new Vector<String>();
        switch(javaVersionNumber) {
            case VERSION_1_8:
            case VERSION_1_7:
            case VERSION_1_6:
            case VERSION_1_5:
                //In Java1.5, the apache stuff moved.
                jrePackages.addElement(""com.sun.org.apache"");
                //fall through.
            case VERSION_1_4:
                if (javaVersionNumber == VERSION_1_4) {
                    jrePackages.addElement(""org.apache.crimson"");
                    jrePackages.addElement(""org.apache.xalan"");
                    jrePackages.addElement(""org.apache.xml"");
                    jrePackages.addElement(""org.apache.xpath"");
                }
                jrePackages.addElement(""org.ietf.jgss"");
                jrePackages.addElement(""org.w3c.dom"");
                jrePackages.addElement(""org.xml.sax"");
                // fall through
            case VERSION_1_3:
                jrePackages.addElement(""org.omg"");
                jrePackages.addElement(""com.sun.corba"");
                jrePackages.addElement(""com.sun.jndi"");
                jrePackages.addElement(""com.sun.media"");
                jrePackages.addElement(""com.sun.naming"");
                jrePackages.addElement(""com.sun.org.omg"");
                jrePackages.addElement(""com.sun.rmi"");
                jrePackages.addElement(""sunw.io"");
                jrePackages.addElement(""sunw.util"");
                // fall through
            case VERSION_1_2:
                jrePackages.addElement(""com.sun.java"");
                jrePackages.addElement(""com.sun.image"");
                // are there any here that we forgot?
                // fall through
            case VERSION_1_1:
            default:
                //things like sun.reflection, sun.misc, sun.net
                jrePackages.addElement(""sun"");
                jrePackages.addElement(""java"");
                jrePackages.addElement(""javax"");
                break;
        }
    }"
30,1105,tomcat,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.catalina.servlets,org.apache.catalina.servlets.WebdavServlet,,parseProperties,,type,type,1936,2156,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/servlets/WebdavServlet.java#L1936,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/servlets/WebdavServlet.java,,unknown,"private void parseProperties(HttpServletRequest req,
                                 XMLWriter generatedXML,
                                 String path, int type,
                                 Vector<String> propertiesVector) {

        // Exclude any resource in the /WEB-INF and /META-INF subdirectories
        if (isSpecialPath(path))
            return;

        WebResource resource = resources.getResource(path);
        if (!resource.exists()) {
            // File is in directory listing but doesn't appear to exist
            // Broken symlink or odd permission settings?
            return;
        }

        generatedXML.writeElement(""D"", ""response"", XMLWriter.OPENING);
        String status = ""HTTP/1.1 "" + WebdavStatus.SC_OK + "" "" +
                WebdavStatus.getStatusText(WebdavStatus.SC_OK);

        // Generating href element
        generatedXML.writeElement(""D"", ""href"", XMLWriter.OPENING);

        String href = req.getContextPath() + req.getServletPath();
        if ((href.endsWith(""/"")) && (path.startsWith(""/"")))
            href += path.substring(1);
        else
            href += path;
        if (resource.isDirectory() && (!href.endsWith(""/"")))
            href += ""/"";

        generatedXML.writeText(rewriteUrl(href));

        generatedXML.writeElement(""D"", ""href"", XMLWriter.CLOSING);

        String resourceName = path;
        int lastSlash = path.lastIndexOf('/');
        if (lastSlash != -1)
            resourceName = resourceName.substring(lastSlash + 1);

        switch (type) {

        case FIND_ALL_PROP :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeProperty(""D"", ""creationdate"",
                    getISOCreationDate(resource.getCreation()));
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.OPENING);
            generatedXML.writeData(resourceName);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.CLOSING);
            if (resource.isFile()) {
                generatedXML.writeProperty
                    (""D"", ""getlastmodified"", FastHttpDateFormat.formatDate
                           (resource.getLastModified(), null));
                generatedXML.writeProperty
                    (""D"", ""getcontentlength"",
                     String.valueOf(resource.getContentLength()));
                String contentType = getServletContext().getMimeType(
                        resource.getName());
                if (contentType != null) {
                    generatedXML.writeProperty(""D"", ""getcontenttype"",
                            contentType);
                }
                generatedXML.writeProperty(""D"", ""getetag"",resource.getETag());
                generatedXML.writeElement(""D"", ""resourcetype"",
                        XMLWriter.NO_CONTENT);
            } else {
                generatedXML.writeElement(""D"", ""resourcetype"",
                        XMLWriter.OPENING);
                generatedXML.writeElement(""D"", ""collection"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""resourcetype"",
                        XMLWriter.CLOSING);
            }

            generatedXML.writeProperty(""D"", ""source"", """");

            String supportedLocks = ""<D:lockentry>""
                + ""<D:lockscope><D:exclusive/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"" + ""<D:lockentry>""
                + ""<D:lockscope><D:shared/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"";
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.OPENING);
            generatedXML.writeText(supportedLocks);
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.CLOSING);

            generateLockDiscovery(path, generatedXML);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_PROPERTY_NAMES :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeElement(""D"", ""creationdate"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.NO_CONTENT);
            if (resource.isFile()) {
                generatedXML.writeElement(""D"", ""getcontentlanguage"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getcontentlength"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getcontenttype"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getetag"", XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getlastmodified"",
                        XMLWriter.NO_CONTENT);
            }
            generatedXML.writeElement(""D"", ""resourcetype"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""source"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""lockdiscovery"",
                                      XMLWriter.NO_CONTENT);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_BY_PROPERTY :

            Vector<String> propertiesNotFound = new Vector<>();

            // Parse the list of properties

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            Enumeration<String> properties = propertiesVector.elements();

            while (properties.hasMoreElements()) {

                String property = properties.nextElement();

                if (property.equals(""creationdate"")) {
                    generatedXML.writeProperty
                        (""D"", ""creationdate"",
                         getISOCreationDate(resource.getCreation()));
                } else if (property.equals(""displayname"")) {
                    generatedXML.writeElement
                        (""D"", ""displayname"", XMLWriter.OPENING);
                    generatedXML.writeData(resourceName);
                    generatedXML.writeElement
                        (""D"", ""displayname"", XMLWriter.CLOSING);
                } else if (property.equals(""getcontentlanguage"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeElement(""D"", ""getcontentlanguage"",
                                                  XMLWriter.NO_CONTENT);
                    }
                } else if (property.equals(""getcontentlength"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getcontentlength"",
                             (String.valueOf(resource.getContentLength())));
                    }
                } else if (property.equals(""getcontenttype"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getcontenttype"",
                             getServletContext().getMimeType
                             (resource.getName()));
                    }
                } else if (property.equals(""getetag"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getetag"", resource.getETag());
                    }
                } else if (property.equals(""getlastmodified"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getlastmodified"", FastHttpDateFormat.formatDate
                                    (resource.getLastModified(), null));
                    }
                } else if (property.equals(""resourcetype"")) {
                    if (resource.isDirectory()) {
                        generatedXML.writeElement(""D"", ""resourcetype"",
                                XMLWriter.OPENING);
                        generatedXML.writeElement(""D"", ""collection"",
                                XMLWriter.NO_CONTENT);
                        generatedXML.writeElement(""D"", ""resourcetype"",
                                XMLWriter.CLOSING);
                    } else {
                        generatedXML.writeElement(""D"", ""resourcetype"",
                                XMLWriter.NO_CONTENT);
                    }
                } else if (property.equals(""source"")) {
                    generatedXML.writeProperty(""D"", ""source"", """");
                } else if (property.equals(""supportedlock"")) {
                    supportedLocks = ""<D:lockentry>""
                        + ""<D:lockscope><D:exclusive/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"" + ""<D:lockentry>""
                        + ""<D:lockscope><D:shared/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"";
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.OPENING);
                    generatedXML.writeText(supportedLocks);
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""lockdiscovery"")) {
                    if (!generateLockDiscovery(path, generatedXML))
                        propertiesNotFound.addElement(property);
                } else {
                    propertiesNotFound.addElement(property);
                }

            }

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            Enumeration<String> propertiesNotFoundList =
                propertiesNotFound.elements();

            if (propertiesNotFoundList.hasMoreElements()) {

                status = ""HTTP/1.1 "" + WebdavStatus.SC_NOT_FOUND + "" "" +
                        WebdavStatus.getStatusText(WebdavStatus.SC_NOT_FOUND);

                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
                generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

                while (propertiesNotFoundList.hasMoreElements()) {
                    generatedXML.writeElement
                        (""D"", propertiesNotFoundList.nextElement(),
                         XMLWriter.NO_CONTENT);
                }

                generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
                generatedXML.writeText(status);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            }

            break;

        }

        generatedXML.writeElement(""D"", ""response"", XMLWriter.CLOSING);

    }"
31,1188,tomcat,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.catalina.servlets,org.apache.catalina.servlets.WebdavServlet,,parseLockNullProperties,,type,type,2217,2390,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/servlets/WebdavServlet.java#L2217,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/servlets/WebdavServlet.java,,unknown,"private void parseLockNullProperties(HttpServletRequest req,
                                         XMLWriter generatedXML,
                                         String path, int type,
                                         Vector<String> propertiesVector) {

        // Exclude any resource in the /WEB-INF and /META-INF subdirectories
        if (isSpecialPath(path))
            return;

        // Retrieving the lock associated with the lock-null resource
        LockInfo lock = resourceLocks.get(path);

        if (lock == null)
            return;

        generatedXML.writeElement(""D"", ""response"", XMLWriter.OPENING);
        String status = ""HTTP/1.1 "" + WebdavStatus.SC_OK + "" "" +
                WebdavStatus.getStatusText(WebdavStatus.SC_OK);

        // Generating href element
        generatedXML.writeElement(""D"", ""href"", XMLWriter.OPENING);

        String absoluteUri = req.getRequestURI();
        String relativePath = getRelativePath(req);
        String toAppend = path.substring(relativePath.length());
        if (!toAppend.startsWith(""/""))
            toAppend = ""/"" + toAppend;

        generatedXML.writeText(rewriteUrl(RequestUtil.normalize(
                absoluteUri + toAppend)));

        generatedXML.writeElement(""D"", ""href"", XMLWriter.CLOSING);

        String resourceName = path;
        int lastSlash = path.lastIndexOf('/');
        if (lastSlash != -1)
            resourceName = resourceName.substring(lastSlash + 1);

        switch (type) {

        case FIND_ALL_PROP :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeProperty(""D"", ""creationdate"",
                    getISOCreationDate(lock.creationDate.getTime()));
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.OPENING);
            generatedXML.writeData(resourceName);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.CLOSING);
            generatedXML.writeProperty(""D"", ""getlastmodified"",
                                       FastHttpDateFormat.formatDate
                                       (lock.creationDate.getTime(), null));
            generatedXML.writeProperty(""D"", ""getcontentlength"",
                    String.valueOf(0));
            generatedXML.writeProperty(""D"", ""getcontenttype"", """");
            generatedXML.writeProperty(""D"", ""getetag"", """");
            generatedXML.writeElement(""D"", ""resourcetype"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""lock-null"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""resourcetype"", XMLWriter.CLOSING);

            generatedXML.writeProperty(""D"", ""source"", """");

            String supportedLocks = ""<D:lockentry>""
                + ""<D:lockscope><D:exclusive/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"" + ""<D:lockentry>""
                + ""<D:lockscope><D:shared/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"";
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.OPENING);
            generatedXML.writeText(supportedLocks);
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.CLOSING);

            generateLockDiscovery(path, generatedXML);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_PROPERTY_NAMES :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeElement(""D"", ""creationdate"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getcontentlanguage"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getcontentlength"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getcontenttype"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getetag"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getlastmodified"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""resourcetype"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""source"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""lockdiscovery"",
                                      XMLWriter.NO_CONTENT);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_BY_PROPERTY :

            Vector<String> propertiesNotFound = new Vector<>();

            // Parse the list of properties

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            Enumeration<String> properties = propertiesVector.elements();

            while (properties.hasMoreElements()) {

                String property = properties.nextElement();

                if (property.equals(""creationdate"")) {
                    generatedXML.writeProperty(""D"", ""creationdate"",
                            getISOCreationDate(lock.creationDate.getTime()));
                } else if (property.equals(""displayname"")) {
                    generatedXML.writeElement(""D"", ""displayname"",
                            XMLWriter.OPENING);
                    generatedXML.writeData(resourceName);
                    generatedXML.writeElement(""D"", ""displayname"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""getcontentlanguage"")) {
                    generatedXML.writeElement(""D"", ""getcontentlanguage"",
                            XMLWriter.NO_CONTENT);
                } else if (property.equals(""getcontentlength"")) {
                    generatedXML.writeProperty(""D"", ""getcontentlength"",
                            (String.valueOf(0)));
                } else if (property.equals(""getcontenttype"")) {
                    generatedXML.writeProperty(""D"", ""getcontenttype"", """");
                } else if (property.equals(""getetag"")) {
                    generatedXML.writeProperty(""D"", ""getetag"", """");
                } else if (property.equals(""getlastmodified"")) {
                    generatedXML.writeProperty
                        (""D"", ""getlastmodified"",
                          FastHttpDateFormat.formatDate
                         (lock.creationDate.getTime(), null));
                } else if (property.equals(""resourcetype"")) {
                    generatedXML.writeElement(""D"", ""resourcetype"",
                            XMLWriter.OPENING);
                    generatedXML.writeElement(""D"", ""lock-null"",
                            XMLWriter.NO_CONTENT);
                    generatedXML.writeElement(""D"", ""resourcetype"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""source"")) {
                    generatedXML.writeProperty(""D"", ""source"", """");
                } else if (property.equals(""supportedlock"")) {
                    supportedLocks = ""<D:lockentry>""
                        + ""<D:lockscope><D:exclusive/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"" + ""<D:lockentry>""
                        + ""<D:lockscope><D:shared/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"";
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.OPENING);
                    generatedXML.writeText(supportedLocks);
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""lockdiscovery"")) {
                    if (!generateLockDiscovery(path, generatedXML))
                        propertiesNotFound.addElement(property);
                } else {
                    propertiesNotFound.addElement(property);
                }

            }

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            Enumeration<String> propertiesNotFoundList = propertiesNotFound.elements();

            if (propertiesNotFoundList.hasMoreElements()) {

                status = ""HTTP/1.1 "" + WebdavStatus.SC_NOT_FOUND + "" "" +
                        WebdavStatus.getStatusText(WebdavStatus.SC_NOT_FOUND);

                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
                generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

                while (propertiesNotFoundList.hasMoreElements()) {
                    generatedXML.writeElement
                        (""D"", propertiesNotFoundList.nextElement(),
                         XMLWriter.NO_CONTENT);
                }

                generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
                generatedXML.writeText(status);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            }

            break;

        }

        generatedXML.writeElement(""D"", ""response"", XMLWriter.CLOSING);

    }"
32,1634,tomcat,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.catalina.ha.authenticator,org.apache.catalina.ha.authenticator.ClusterSingleSignOnListener,,messageReceived,,action,action,71,105,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java#L71,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java,,unknown,"@Override
    public void messageReceived(ClusterMessage myobj) {
        if (myobj != null && myobj instanceof SingleSignOnMessage) {
            SingleSignOnMessage msg = (SingleSignOnMessage) myobj;
            int action = msg.getAction();
            Session session = null;
            Principal principal = null;

            if (log.isDebugEnabled())
                log.debug(""SingleSignOnMessage Received with action ""
                          + msg.getAction());

            switch(action) {
            case SingleSignOnMessage.ADD_SESSION:
                session = getSession(msg.getSessionId(),
                                     msg.getContextName());
                if (session != null)
                    clusterSSO.associateLocal(msg.getSsoId(), session);
                break;
            case SingleSignOnMessage.DEREGISTER_SESSION:
                session = getSession(msg.getSessionId(),
                                     msg.getContextName());
                if (session != null)
                    clusterSSO.deregisterLocal(msg.getSsoId(), session);
                break;
            case SingleSignOnMessage.LOGOUT_SESSION:
                clusterSSO.deregisterLocal(msg.getSsoId());
                break;
            case SingleSignOnMessage.REGISTER_SESSION:
                if (msg.getPrincipal() != null) {
                    principal = msg.getPrincipal().getPrincipal();
                }
                clusterSSO.registerLocal(msg.getSsoId(), principal, msg.getAuthType(),
                                         msg.getUsername(), msg.getPassword());
                break;
            case SingleSignOnMessage.UPDATE_SESSION:
                if (msg.getPrincipal() != null) {
                    principal = msg.getPrincipal().getPrincipal();
                }
                clusterSSO.updateLocal(msg.getSsoId(), principal, msg.getAuthType(),
                                       msg.getUsername(), msg.getPassword());
                break;
            case SingleSignOnMessage.REMOVE_SESSION:
                session = getSession(msg.getSessionId(),
                                     msg.getContextName());
                if (session != null)
                    clusterSSO.removeSessionLocal(msg.getSsoId(), session);
                break;
            }
        }
    }"
33,1007,tomcat,SF_SWITCH_FALLTHROUGH,A,last,,STYLE,org.apache.tomcat.util.bcel.classfile,org.apache.tomcat.util.bcel.classfile.Utility,,codeToString,,buf,"buf,append",311,314,close,https://github.com/apache/tomcat/tree/3787242a83ee5555c79fd2e4c6b6952e9195ed8b//java/org/apache/tomcat/util/bcel/classfile/Utility.java#L311,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/tomcat/util/bcel/classfile/Utility.java,,unknown,"public static final String codeToString( byte[] code, ConstantPool constant_pool, int index,
            int length, boolean verbose ) {
        StringBuilder buf = new StringBuilder(code.length * 20); // Should be sufficient
        ByteSequence stream = new ByteSequence(code);
        try {
            for (int i = 0; i < index; i++) {
                codeToString(stream, constant_pool, verbose);
            }
            for (int i = 0; stream.available() > 0; i++) {
                if ((length < 0) || (i < length)) {
                    String indices = fillup(stream.getIndex() + "":"", 6, true, ' ');
                    buf.append(indices).append(codeToString(stream, constant_pool, verbose))
                            .append('\n');
                }
            }
        } catch (IOException e) {
            System.out.println(buf.toString());
            e.printStackTrace();
            throw new ClassFormatException(""Byte code error: "" + e, e);
        }
        return buf.toString();
    }"
34,9595,jmeter,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.ServerPanel,,getHealthyImageIcon,,health,health,134,145,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/monitor/components/org/apache/jmeter/visualizers/ServerPanel.java#L134,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/monitor/components/org/apache/jmeter/visualizers/ServerPanel.java,,unknown,"private static ImageIcon getHealthyImageIcon(int health) {
        ImageIcon i = null;
        switch (health) {
        case Stats.HEALTHY:
            i = HEALTHY;
            break;
        case Stats.ACTIVE:
            i = ACTIVE;
            break;
        case Stats.WARNING:
            i = WARNING;
            break;
        case Stats.DEAD:
            i = DEAD;
            break;
        }
        return i;
    }"
35,9563,jmeter,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.SamplerResultTab,,setupTabPane,,responseLevel,responseLevel,249,257,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/components/org/apache/jmeter/visualizers/SamplerResultTab.java#L249,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/visualizers/SamplerResultTab.java,,close,"@SuppressWarnings(""boxing"")
    public void setupTabPane() {
        // Clear all data before display a new
        this.clearData();
        StyledDocument statsDoc = stats.getStyledDocument();
        try {
            if (userObject instanceof SampleResult) {
                sampleResult = (SampleResult) userObject;
                // We are displaying a SampleResult
                setupTabPaneForSampleResult();
                requestPanel.setSamplerResult(sampleResult);                

                final String samplerClass = sampleResult.getClass().getName();
                String typeResult = samplerClass.substring(1 + samplerClass.lastIndexOf('.'));
                
                StringBuilder statsBuff = new StringBuilder(200);
                statsBuff.append(JMeterUtils.getResString(""view_results_thread_name"")).append(sampleResult.getThreadName()).append(NL); //$NON-NLS-1$
                String startTime = dateFormat.format(new Date(sampleResult.getStartTime()));
                statsBuff.append(JMeterUtils.getResString(""view_results_sample_start"")).append(startTime).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_load_time"")).append(sampleResult.getTime()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_latency"")).append(sampleResult.getLatency()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_size_in_bytes"")).append(sampleResult.getBytes()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_size_headers_in_bytes"")).append(sampleResult.getHeadersSize()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_size_body_in_bytes"")).append(sampleResult.getBodySize()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_sample_count"")).append(sampleResult.getSampleCount()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_error_count"")).append(sampleResult.getErrorCount()).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
                statsBuff.setLength(0); // reset for reuse

                String responseCode = sampleResult.getResponseCode();

                int responseLevel = 0;
                if (responseCode != null) {
                    try {
                        responseLevel = Integer.parseInt(responseCode) / 100;
                    } catch (NumberFormatException numberFormatException) {
                        // no need to change the foreground color
                    }
                }

                Style style = null;
                switch (responseLevel) {
                case 3:
                    style = statsDoc.getStyle(STYLE_REDIRECT);
                    break;
                case 4:
                    style = statsDoc.getStyle(STYLE_CLIENT_ERROR);
                    break;
                case 5:
                    style = statsDoc.getStyle(STYLE_SERVER_ERROR);
                    break;
                }

                statsBuff.append(JMeterUtils.getResString(""view_results_response_code"")).append(responseCode).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), style);
                statsBuff.setLength(0); // reset for reuse

                // response message label
                String responseMsgStr = sampleResult.getResponseMessage();

                statsBuff.append(JMeterUtils.getResString(""view_results_response_message"")).append(responseMsgStr).append(NL); //$NON-NLS-1$
                statsBuff.append(NL);
                statsBuff.append(JMeterUtils.getResString(""view_results_response_headers"")).append(NL); //$NON-NLS-1$
                statsBuff.append(sampleResult.getResponseHeaders()).append(NL);
                statsBuff.append(NL);
                statsBuff.append(typeResult + "" ""+ JMeterUtils.getResString(""view_results_fields"")).append(NL); //$NON-NLS-1$ $NON-NLS-2$
                statsBuff.append(""ContentType: "").append(sampleResult.getContentType()).append(NL); //$NON-NLS-1$
                statsBuff.append(""DataEncoding: "").append(sampleResult.getDataEncodingNoDefault()).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
                statsBuff = null; // Done
                
                // Tabbed results: fill table
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_thread_name""), sampleResult.getThreadName())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_sample_start""), startTime)); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_load_time""), sampleResult.getTime())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_latency""), sampleResult.getLatency())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_size_in_bytes""), sampleResult.getBytes())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_size_headers_in_bytes""), sampleResult.getHeadersSize())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_size_body_in_bytes""), sampleResult.getBodySize())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_sample_count""), sampleResult.getSampleCount())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_error_count""), sampleResult.getErrorCount())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_response_code""), responseCode)); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_response_message""), responseMsgStr)); //$NON-NLS-1$
                
                // Parsed response headers
                LinkedHashMap<String, String> lhm = JMeterUtils.parseHeaders(sampleResult.getResponseHeaders());
                Set<Entry<String, String>> keySet = lhm.entrySet();
                for (Entry<String, String> entry : keySet) {
                    resHeadersModel.addRow(new RowResult(entry.getKey(), entry.getValue()));
                }
                
                // Fields table
                resFieldsModel.addRow(new RowResult(""Type Result "", typeResult)); //$NON-NLS-1$
                //not sure needs I18N?
                resFieldsModel.addRow(new RowResult(""ContentType"", sampleResult.getContentType())); //$NON-NLS-1$
                resFieldsModel.addRow(new RowResult(""DataEncoding"", sampleResult.getDataEncodingNoDefault())); //$NON-NLS-1$
                
                // Reset search
                if (activateSearchExtension) {
                    searchTextExtension.resetTextToFind();
                }

            } else if (userObject instanceof AssertionResult) {
                assertionResult = (AssertionResult) userObject;

                // We are displaying an AssertionResult
                setupTabPaneForAssertionResult();

                StringBuilder statsBuff = new StringBuilder(100);
                statsBuff.append(JMeterUtils.getResString(""view_results_assertion_error"")).append(assertionResult.isError()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_assertion_failure"")).append(assertionResult.isFailure()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_assertion_failure_message"")).append(assertionResult.getFailureMessage()).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
            }
        } catch (BadLocationException exc) {
            stats.setText(exc.getLocalizedMessage());
        }
    }"
36,9569,jmeter,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.jmeter,org.apache.jmeter.JMeter,,initializeProperties,,option,"option,getDescriptor,getId",583,664,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/core/org/apache/jmeter/JMeter.java#L583,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/JMeter.java,,close,"private void initializeProperties(CLArgsParser parser) {
        if (parser.getArgumentById(PROPFILE_OPT) != null) {
            JMeterUtils.loadJMeterProperties(parser.getArgumentById(PROPFILE_OPT).getArgument());
        } else {
            JMeterUtils.loadJMeterProperties(NewDriver.getJMeterDir() + File.separator
                    + ""bin"" + File.separator // $NON-NLS-1$
                    + ""jmeter.properties"");// $NON-NLS-1$
        }

        if (parser.getArgumentById(JMLOGFILE_OPT) != null){
            String jmlogfile=parser.getArgumentById(JMLOGFILE_OPT).getArgument();
            jmlogfile = processLAST(jmlogfile, "".log"");// $NON-NLS-1$
            JMeterUtils.setProperty(LoggingManager.LOG_FILE,jmlogfile);
        }

        JMeterUtils.initLogging();
        JMeterUtils.initLocale();
        // Bug 33845 - allow direct override of Home dir
        if (parser.getArgumentById(JMETER_HOME_OPT) == null) {
            JMeterUtils.setJMeterHome(NewDriver.getJMeterDir());
        } else {
            JMeterUtils.setJMeterHome(parser.getArgumentById(JMETER_HOME_OPT).getArgument());
        }

        Properties jmeterProps = JMeterUtils.getJMeterProperties();
        remoteProps = new Properties();

        // Add local JMeter properties, if the file is found
        String userProp = JMeterUtils.getPropDefault(""user.properties"",""""); //$NON-NLS-1$
        if (userProp.length() > 0){ //$NON-NLS-1$
            FileInputStream fis=null;
            try {
                File file = JMeterUtils.findFile(userProp);
                if (file.canRead()){
                    log.info(""Loading user properties from: ""+file.getCanonicalPath());
                    fis = new FileInputStream(file);
                    Properties tmp = new Properties();
                    tmp.load(fis);
                    jmeterProps.putAll(tmp);
                    LoggingManager.setLoggingLevels(tmp);//Do what would be done earlier
                }
            } catch (IOException e) {
                log.warn(""Error loading user property file: "" + userProp, e);
            } finally {
                JOrphanUtils.closeQuietly(fis);
            }
        }

        // Add local system properties, if the file is found
        String sysProp = JMeterUtils.getPropDefault(""system.properties"",""""); //$NON-NLS-1$
        if (sysProp.length() > 0){
            FileInputStream fis=null;
            try {
                File file = JMeterUtils.findFile(sysProp);
                if (file.canRead()){
                    log.info(""Loading system properties from: ""+file.getCanonicalPath());
                    fis = new FileInputStream(file);
                    System.getProperties().load(fis);
                }
            } catch (IOException e) {
                log.warn(""Error loading system property file: "" + sysProp, e);
            } finally {
                JOrphanUtils.closeQuietly(fis);
            }
        }

        // Process command line property definitions
        // These can potentially occur multiple times

        List<CLOption> clOptions = parser.getArguments();
        int size = clOptions.size();

        for (int i = 0; i < size; i++) {
            CLOption option = clOptions.get(i);
            String name = option.getArgument(0);
            String value = option.getArgument(1);
            FileInputStream fis = null;

            switch (option.getDescriptor().getId()) {

            // Should not have any text arguments
            case CLOption.TEXT_ARGUMENT:
                throw new IllegalArgumentException(""Unknown arg: ""+option.getArgument());

            case PROPFILE2_OPT: // Bug 33920 - allow multiple props
                try {
                    fis = new FileInputStream(new File(name));
                    Properties tmp = new Properties();
                    tmp.load(fis);
                    jmeterProps.putAll(tmp);
                    LoggingManager.setLoggingLevels(tmp);//Do what would be done earlier
                } catch (FileNotFoundException e) {
                    log.warn(""Can't find additional property file: "" + name, e);
                } catch (IOException e) {
                    log.warn(""Error loading additional property file: "" + name, e);
                } finally {
                    JOrphanUtils.closeQuietly(fis);
                }
                break;
            case SYSTEM_PROPFILE:
                log.info(""Setting System properties from file: "" + name);
                try {
                    fis = new FileInputStream(new File(name));
                    System.getProperties().load(fis);
                } catch (IOException e) {
                    log.warn(""Cannot find system property file ""+e.getLocalizedMessage());
                } finally {
                    JOrphanUtils.closeQuietly(fis);
                }
                break;
            case SYSTEM_PROPERTY:
                if (value.length() > 0) { // Set it
                    log.info(""Setting System property: "" + name + ""="" + value);
                    System.getProperties().setProperty(name, value);
                } else { // Reset it
                    log.warn(""Removing System property: "" + name);
                    System.getProperties().remove(name);
                }
                break;
            case JMETER_PROPERTY:
                if (value.length() > 0) { // Set it
                    log.info(""Setting JMeter property: "" + name + ""="" + value);
                    jmeterProps.setProperty(name, value);
                } else { // Reset it
                    log.warn(""Removing JMeter property: "" + name);
                    jmeterProps.remove(name);
                }
                break;
            case JMETER_GLOBAL_PROP:
                if (value.length() > 0) { // Set it
                    log.info(""Setting Global property: "" + name + ""="" + value);
                    remoteProps.setProperty(name, value);
                } else {
                    File propFile = new File(name);
                    if (propFile.canRead()) {
                        log.info(""Setting Global properties from the file ""+name);
                        try {
                            fis = new FileInputStream(propFile);
                            remoteProps.load(fis);
                        } catch (FileNotFoundException e) {
                            log.warn(""Could not find properties file: ""+e.getLocalizedMessage());
                        } catch (IOException e) {
                            log.warn(""Could not load properties file: ""+e.getLocalizedMessage());
                        } finally {
                            JOrphanUtils.closeQuietly(fis);
                        }
                    }
                }
                break;
            case LOGLEVEL:
                if (value.length() > 0) { // Set category
                    log.info(""LogLevel: "" + name + ""="" + value);
                    LoggingManager.setPriority(value, name);
                } else { // Set root level
                    log.warn(""LogLevel: "" + name);
                    LoggingManager.setPriority(name);
                }
                break;
            case REMOTE_STOP:
                remoteStop = true;
                break;
            }
        }

        String sample_variables = (String) jmeterProps.get(SampleEvent.SAMPLE_VARIABLES);
        if (sample_variables != null){
            remoteProps.put(SampleEvent.SAMPLE_VARIABLES, sample_variables);
        }
    }"
37,9633,jmeter,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.RenderAsXML$DOMTreePanel$DomTreeRenderer,,encode,,c,c,201,212,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/components/org/apache/jmeter/visualizers/RenderAsXML.java#L201,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/visualizers/RenderAsXML.java,,close,"private String encode(char c) {
                String toReturn = String.valueOf(c);
                switch (c) {
                case '<': // $NON-NLS-1$
                    toReturn = ""&lt;""; // $NON-NLS-1$
                    break;
                case '>': // $NON-NLS-1$
                    toReturn = ""&gt;""; // $NON-NLS-1$
                    break;
                case '\'': // $NON-NLS-1$
                    toReturn = ""&apos;""; // $NON-NLS-1$
                    break;
                case '\""': // $NON-NLS-1$
                    toReturn = ""&quot;""; // $NON-NLS-1$
                    break;

                }
                return toReturn;
            }"
38,3259,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,createCfamColumnValidator,,switch (alt44) {,,2446,2463,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L2446,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
39,3927,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,selectExpression,,switch (alt7) {,,698,705,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L698,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
40,4853,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,endStmnt,,switch (alt56) {,,3601,3605,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L3601,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
41,5690,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,truncateStatement,,switch (alt55) {,,3535,3549,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L3535,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
42,5762,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,batchStatement,,switch (alt24) {,,1445,1452,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L1445,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
43,6672,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,selectCountClause,,switch (alt17) {,,1429,1442,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L1429,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
44,6713,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,usingClause,,switch (alt18) {,,1188,1192,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L1188,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
45,7048,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,usingClauseDelete,,switch (alt20) {,,1263,1267,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L1263,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
46,7432,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,query,,switch (alt1) {,,216,396,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L216,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
47,9147,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlLexer,,mINTEGER,,alt5,alt5,2595,2599,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlLexer.java#L2595,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlLexer.java,,unknown,
48,5798,cassandra,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,usingClause,,switch (alt18) {,,1521,1525,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L1521,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
49,6609,cassandra,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,intTerm,,switch (alt74) {,,5241,5254,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L5241,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
50,8259,cassandra,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,tokenDefinition,,switch (alt81) {,,5664,5717,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L5664,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
51,8680,cassandra,SF_SWITCH_FALLTHROUGH,B,last,,STYLE,org.apache.cassandra.transport,org.apache.cassandra.transport.ServerConnection,,applyStateTransition,,State,"State,state,READY",101,103,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/java/org/apache/cassandra/transport/ServerConnection.java#L101,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/java/org/apache/cassandra/transport/ServerConnection.java,,close,"public void applyStateTransition(Message.Type requestType, Message.Type responseType)
    {
        switch (state)
        {
            case UNINITIALIZED:
                if (requestType == Message.Type.STARTUP)
                {
                    if (responseType == Message.Type.AUTHENTICATE)
                        state = State.AUTHENTICATION;
                    else if (responseType == Message.Type.READY)
                        state = State.READY;
                }
                break;
            case AUTHENTICATION:
                assert requestType == Message.Type.CREDENTIALS;
                if (responseType == Message.Type.READY)
                    state = State.READY;
            case READY:
                break;
            default:
                throw new AssertionError();
        }
    }"
52,135,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,commonDatatypeName,,,,761,768,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L761,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
53,355,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SubqueryNode,,changeToCorrespondingExpressionType,,,,2379,2423,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java#L2379,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,,close,"private void changeToCorrespondingExpressionType()
		throws StandardException
	{
  		BinaryOperatorNode bcon = null;

  		switch (subqueryType)
  		{
  			case EQ_ANY_SUBQUERY:
  			case IN_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  									C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
  									leftOperand,
  									this,
  									getContextManager());
  				break;

  			case NE_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  								C_NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE,
  								leftOperand,
  								this,
  								getContextManager());
  				break;

  			case LE_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  								C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
  								leftOperand,
  								this,
  								getContextManager());
  				break;

  			case LT_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  							C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE,
  							leftOperand,
  							this,
  							getContextManager());
  				break;

  			case GE_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  							C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
  							leftOperand,
  							this,
  							getContextManager());
  				break;

  			case GT_ANY_SUBQUERY:
  				bcon = (BinaryOperatorNode) getNodeFactory().getNode(
  								C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,
  								leftOperand,
  								this,
  								getContextManager());
  				break;
  		}

  		// clean up the state of the tree to reflect a bound expression subquery
  		subqueryType = EXPRESSION_SUBQUERY;
  		setDataTypeServices(resultSet.getResultColumns());

  		parentComparisonOperator = (BinaryComparisonOperatorNode) bcon;
  		/* Set type info for the operator node */
  		parentComparisonOperator.bindComparisonOperator();
  		leftOperand = null;
   }"
54,383,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.tools.dblook,org.apache.derby.impl.tools.dblook.DB_Alias,,createProcFuncOrUDTString,,,,171,175,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//java/tools/org/apache/derby/impl/tools/dblook/DB_Alias.java#L171,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/tools/org/apache/derby/impl/tools/dblook/DB_Alias.java,,unknown,"private static String createProcFuncOrUDTString(String aliasName,
		ResultSet aliasInfo, char aliasType) throws SQLException
	{

		StringBuffer alias = new StringBuffer(""CREATE "");

        switch( aliasType )
        {
        case UDT_TYPE: alias.append( ""TYPE "" ); break;
        case PROCEDURE_TYPE: alias.append(""PROCEDURE ""); break;
        case FUNCTION_TYPE: alias.append(""FUNCTION ""); break;
        }
		alias.append(aliasName);
		alias.append("" "");

		String params = aliasInfo.getString(2);

        if ( aliasType != UDT_TYPE )
        {
            // Just grab the parameter part; we'll get the method name later.
            alias.append(params.substring(params.indexOf(""(""), params.length()));
            alias.append("" "");
        }

		// Now add the external name.
		alias.append(""EXTERNAL NAME '"");
		alias.append(aliasInfo.getString(5));

        if ( aliasType == UDT_TYPE )
        {
            alias.append(""' "");
            alias.append( params );
        }
        else
        {
            alias.append(""."");
            // Get method name from parameter string fetched above.
            alias.append(params.substring(0, params.indexOf(""("")));
            alias.append(""' "");
        }

		return alias.toString();

	}"
55,403,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,dataTypeCheck,,,,703,708,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L703,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
56,412,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.client.am,org.apache.derby.client.am.Statement,,flowExecute,,,,2029,2094,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/client/org/apache/derby/client/am/Statement.java#L2029,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/client/org/apache/derby/client/am/Statement.java,,unknown,"private void flowExecute(int executeType, String sql) throws SqlException {
        checkForClosedStatement(); // Per jdbc spec (see java.sql.Statement.close() javadoc)       
        clearWarningsX(); // Per jdbc spec 0.7, and getWarnings() javadoc
        sql = escape(sql);
        parseSqlAndSetSqlModes(sql);
        checkAutoGeneratedKeysParameters();
        if (sqlMode_ == isUpdate__) {
            updateCount_ = 0;
        } else {
            updateCount_ = -1;
        }

        checkForAppropriateSqlMode(executeType, sqlMode_);

        // DERBY-1036: Moved check till execute time to comply with embedded
        // behavior. Since we check here and not in setCursorName, several
        // statements can have the same cursor name as long as their result
        // sets are not simultaneously open.

        if (sqlMode_ == isQuery__) {
            checkForDuplicateCursorName();
        }

        boolean timeoutSent = false;

            agent_.beginWriteChain(this);
            boolean piggybackedAutoCommit = writeCloseResultSets(true);  // true means permit auto-commits

            ResultSet scrollableRS = null;
            Section newSection = null;
            boolean repositionedCursor = false;

            // DERBY-1692: Statement objects need to send the timeout value for
            // each execution since the server will create a new statement
            // object each time. Since the server forgets the timeout value,
            // doWriteTimeout should not be reset, and it is OK not to send the
            // timeout value when it is zero.
            if (doWriteTimeout && (timeout_ > 0)) {
                timeoutArrayList.set(0, TIMEOUT_STATEMENT + timeout_);
                writeSetSpecialRegister(timeoutArrayList);
                timeoutSent = true;
            }
            switch (sqlMode_) {
            case isQuery__:
                newSection = agent_.sectionManager_.getDynamicSection(resultSetHoldability_);

                writePrepareDescribeOutput(sql, newSection);
                writeOpenQuery(newSection,
                        fetchSize_,
                        resultSetType_);
                break;
            case isUpdate__:
                String cursorName = null;
                if (sqlUpdateMode_ == isDeleteSql__ || sqlUpdateMode_ == isUpdateSql__) {
                    String[] sqlAndCursorName = extractCursorNameFromWhereCurrentOf(sql);
                    if (sqlAndCursorName != null) {
                        cursorName = sqlAndCursorName[0];
                        sql = sqlAndCursorName[1];
                    }
                }
                if (cursorName != null) {
                    newSection = agent_.sectionManager_.getPositionedUpdateSection(cursorName, true); // true means get an execute immediate section
                    if (newSection == null) {
                        throw new SqlException(agent_.logWriter_, 
                            new ClientMessageId(SQLState.LANG_CURSOR_NOT_FOUND),
                            cursorName);
                    }
                    scrollableRS = agent_.sectionManager_.getPositionedUpdateResultSet(cursorName);
                    // do not need to reposition for rowset cursors
                    if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                        repositionedCursor =
                                scrollableRS.repositionScrollableResultSetBeforeJDBC1PositionedUpdateDelete();
                        if (!repositionedCursor) {
                            scrollableRS = null;
                        }
                    }

                    // if client's cursor name is set, and the cursor name in the positioned update
                    // string is the same as the client's cursor name, replace client's cursor name
                    // with the server's cursor name.
                    if (newSection.getClientCursorName() != null &&
                            cursorName.compareTo(newSection.getClientCursorName()) == 0) {
                        // substitute cusor name in pass thru sql string
                        sql = substituteClientCursorNameWithServerCursorName(sql, newSection);
                    }
                    writeExecuteImmediate(sql, newSection);
                }
            
               else {
                    newSection = agent_.sectionManager_.getDynamicSection(resultSetHoldability_);

                    writeExecuteImmediate(sql, newSection);
                    if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
                        // chain a ""select from identity_val_local()"" to the insert statement
                        prepareAutoGeneratedKeysStatement();
                        writeOpenQuery(preparedStatementForAutoGeneratedKeys_.section_,
                                preparedStatementForAutoGeneratedKeys_.fetchSize_,
                                preparedStatementForAutoGeneratedKeys_.resultSetType_);
                    }
                }

                // maybe duplicate a commit here if the sql is a ""commit""
                if (connection_.autoCommit_) {
                    connection_.writeAutoCommit();
                }
                break;
            case isCall__:
                newSection = writeExecuteCall(sql, false);

                break;
            }

            agent_.flow(this);

            readCloseResultSets(true);  // true means permit auto-commits

            if (timeoutSent) {
                readSetSpecialRegister(); // Read response to the EXCSQLSET
            }

            // turn inUnitOfWork_ flag back on and add statement
            // back on commitListeners_ list if they were off
            // by an autocommit chained to a close cursor.
            if (piggybackedAutoCommit) {
                connection_.completeTransactionStart();
            }

            markResultSetsClosed(true); // true means remove from list of commit and rollback listeners
            markClosedOnServer();
            section_ = newSection;

            switch (sqlMode_) {
            case isQuery__:
                // parse out the reply to a chained prepare and open request
                readPrepareDescribeOutput();
                // This establishes statement.resultSet
                readOpenQuery();

                // resultSet_ is null if open query failed.
                // check for null resultSet_ before using it.
                // the first rowset comes back on OPEN for static non-rowset cursors.
                // no row is returned on open for rowset cursors.
                if (resultSet_ != null) {
                    resultSet_.parseScrollableRowset();

                    // DERBY-1183: If we set it up it earlier, the entry in
                    // clientCursorNameCache_ gets wiped out by the closing of
                    // result sets happening during readCloseResultSets above
                    // because ResultSet#markClosed calls
                    // Statement#removeClientCursorNameFromCache.
                    setupCursorNameCacheAndMappings();
                }

                break;

            case isUpdate__:

                // do not need to reposition for rowset cursors.
                if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                    scrollableRS.readPositioningFetch_();
                }
                readExecuteImmediate();

                if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
                    readPrepareAutoGeneratedKeysStatement();
                    preparedStatementForAutoGeneratedKeys_.readOpenQuery();
                    generatedKeysResultSet_ = preparedStatementForAutoGeneratedKeys_.resultSet_;
                    preparedStatementForAutoGeneratedKeys_.resultSet_ = null;
                    generatedKeysResultSet_.outerStatement_ = this;
                }

                if (connection_.autoCommit_) {
                    connection_.readAutoCommit();
                }
                break;

            case isCall__:
                readPrepare();
                readExecuteCall();
                break;

            }

            // in the case the stored procedure call is uncatalogued, we need to catch that
            // kind exception and changed the call from dynamic to static
            agent_.endReadChain();

            //  If we hear from Sun that we can just set a warning for this, then move this code to the ResultSet constructor.
            // Throw an exception if holdability returned by the server is different from requested.
            if (resultSet_ != null && resultSet_.resultSetHoldability_ != resultSetHoldability_ && sqlMode_ != isCall__) {
                throw new SqlException(agent_.logWriter_, 
                    new ClientMessageId(SQLState.UNABLE_TO_OPEN_RS_WITH_REQUESTED_HOLDABILITY),
                    resultSetHoldability_);
            }

        // In the case of executing a call to a stored procedure.
        if (sqlMode_ == isCall__) {
            parseStorProcReturnedScrollableRowset();
            checkForStoredProcResultSetCount(executeType);
            // When there is no result sets back, we will commit immediately when autocommit is true.
            if (connection_.autoCommit_ && resultSet_ == null && resultSetList_ == null) {
                connection_.flowAutoCommit();
            }
        }

        // The JDBC spec says that executeUpdate() should return 0
        // when no row count is returned.
        if (executeType == executeUpdateMethod__ && updateCount_ < 0) {
            updateCount_ = 0;
        }
    }"
57,431,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SubqueryNode,,pushNewPredicate,,,,1474,1497,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java#L1474,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java,,close,"private UnaryComparisonOperatorNode pushNewPredicate(
				int numTables)
			throws StandardException
	{
		AndNode						andNode;
		BinaryComparisonOperatorNode bcoNode = null;
		JBitSet						tableMap;
		Predicate					predicate;
		ResultColumn				firstRC;
		ResultColumnList			resultColumns;
		UnaryComparisonOperatorNode	ucoNode = null;
		ValueNode					oldWhereClause;
		ValueNode					rightOperand;

		/* We have to ensure that the resultSet immediately under us has
		 * a PredicateList, otherwise we can't push the predicate down.
		 */
		resultSet = resultSet.ensurePredicateList(numTables);

		/* RESOLVE - once we understand how correlated columns will work, 
		 * we probably want to mark leftOperand as a correlated column
		 */
		resultColumns = resultSet.getResultColumns();

		/*
		** Create a new PR node.  Put it over the original subquery.  resulSet
		** is now the new PR.  We give the chance that things under the PR node
		** can be materialized.  See beetle 4373.
		*/
		ResultColumnList newRCL = resultColumns.copyListAndObjects();
		newRCL.genVirtualColumnNodes(resultSet, resultColumns);
		resultSet = (ResultSetNode) getNodeFactory().getNode(
										C_NodeTypes.PROJECT_RESTRICT_NODE,
										resultSet,	// child
										newRCL,			// result columns
										null,			// restriction
										null, 			// restriction list
										null,			// project subqueries
										null,			// restrict subqueries	
										null,
										getContextManager());
		resultColumns = newRCL;
	
		firstRC = (ResultColumn) resultColumns.elementAt(0);
		rightOperand = firstRC.getExpression();

		bcoNode = getNewJoinCondition(leftOperand, rightOperand);

		ValueNode andLeft = bcoNode;

		/* For NOT IN or ALL, and if either side of the comparison is nullable, and the
		 * subquery can not be flattened (because of that), we need to add IS NULL node
		 * on top of the nullables, such that the behavior is (beetle 5173):
		 *
		 *    (1) If we have nulls in right operand, no row is returned.
		 *    (2) If subquery result is empty before applying join predicate, every
		 *		  left row (including NULLs) is returned.
		 *	  (3) Otherwise, return {all left row} - {NULLs}
		 */
		if (isNOT_IN() || isALL())
		{
			boolean leftNullable = leftOperand.getTypeServices().isNullable();
			boolean rightNullable = rightOperand.getTypeServices().isNullable();
			if (leftNullable || rightNullable)
			{
				/* Create a normalized structure.
				 */
				BooleanConstantNode falseNode = (BooleanConstantNode) getNodeFactory().getNode(
												C_NodeTypes.BOOLEAN_CONSTANT_NODE,
												Boolean.FALSE,
												getContextManager());
				OrNode newOr = (OrNode) getNodeFactory().getNode(
												C_NodeTypes.OR_NODE,
												bcoNode,
												falseNode,
												getContextManager());
				newOr.postBindFixup();
				andLeft = newOr;

				if (leftNullable)
				{
					UnaryComparisonOperatorNode leftIsNull = (UnaryComparisonOperatorNode)
									getNodeFactory().getNode(
														C_NodeTypes.IS_NULL_NODE,
														leftOperand,
														getContextManager());
					leftIsNull.bindComparisonOperator();
					newOr = (OrNode) getNodeFactory().getNode(
													C_NodeTypes.OR_NODE,
													leftIsNull,
													andLeft,
													getContextManager());
					newOr.postBindFixup();
					andLeft = newOr;
				}
				if (rightNullable)
				{
					UnaryComparisonOperatorNode rightIsNull = (UnaryComparisonOperatorNode)
									getNodeFactory().getNode(
														C_NodeTypes.IS_NULL_NODE,
														rightOperand,
														getContextManager());
					rightIsNull.bindComparisonOperator();
					newOr = (OrNode) getNodeFactory().getNode(
													C_NodeTypes.OR_NODE,
													rightIsNull,
													andLeft,
													getContextManager());
					newOr.postBindFixup();
					andLeft = newOr;
				}
			}
		}

		/* Place an AndNode above the <BinaryComparisonOperator> */
		andNode = (AndNode) getNodeFactory().getNode(
													C_NodeTypes.AND_NODE,
													andLeft,
													getTrueNode(),
													getContextManager());

		/* Build the referenced table map for the new predicate */
		tableMap = new JBitSet(numTables);
		andNode.postBindFixup();

		/* Put the AndNode under a Predicate */
		predicate = (Predicate) getNodeFactory().getNode(
										C_NodeTypes.PREDICATE,
										andNode,
										tableMap,
										getContextManager());
		predicate.categorize();

		/* Push the new Predicate to the subquery's list */
		resultSet = resultSet.addNewPredicate(predicate);

		/* Clean up the leftOperand and subquery ResultColumn */
		leftOperand = null;
		firstRC.setType(getTypeServices());
		firstRC.setExpression(getTrueNode());

		/* Add the IS [NOT] NULL above the SubqueryNode */
		switch (subqueryType)
		{
			case IN_SUBQUERY:
			case EQ_ANY_SUBQUERY:
			case NE_ANY_SUBQUERY:
			case LE_ANY_SUBQUERY:
			case LT_ANY_SUBQUERY:
			case GE_ANY_SUBQUERY:
			case GT_ANY_SUBQUERY:
				ucoNode = (UnaryComparisonOperatorNode) 
									getNodeFactory().getNode(
												C_NodeTypes.IS_NOT_NULL_NODE,
												this,
												getContextManager());
				break;

			case NOT_IN_SUBQUERY:
			case EQ_ALL_SUBQUERY:
			case NE_ALL_SUBQUERY:
			case LE_ALL_SUBQUERY:
			case LT_ALL_SUBQUERY:
			case GE_ALL_SUBQUERY:
			case GT_ALL_SUBQUERY:
				ucoNode = (UnaryComparisonOperatorNode) 
									getNodeFactory().getNode(
													C_NodeTypes.IS_NULL_NODE,
													this,
													getContextManager());
				break;
		}
		ucoNode.bindComparisonOperator();
		return ucoNode;
	}"
58,464,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.client.am,org.apache.derby.client.am.PreparedStatement,,flowExecute,,,,2021,2078,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/client/org/apache/derby/client/am/PreparedStatement.java#L2021,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/client/org/apache/derby/client/am/PreparedStatement.java,,unknown,"private void flowExecute(int executeType) throws SqlException {
        checkForClosedStatement();
        checkAutoGeneratedKeysParameters();
        clearWarningsX();
        checkForAppropriateSqlMode(executeType, sqlMode_);
        checkThatAllParametersAreSet();

        if (sqlMode_ == isUpdate__) {
            updateCount_ = 0;
        } else {
            updateCount_ = -1;
        }

        // DERBY-1036: Moved check till execute time to comply with embedded
        // behavior. Since we check here and not in setCursorName, several
        // statements can have the same cursor name as long as their result
        // sets are not simultaneously open.

        if (sqlMode_ == isQuery__) {
            checkForDuplicateCursorName();
        }

            agent_.beginWriteChain(this);

            boolean piggybackedAutocommit = writeCloseResultSets(true);  // true means permit auto-commits

            int numInputColumns;
            boolean outputExpected;
            try
            {
                numInputColumns = (parameterMetaData_ != null) ? parameterMetaData_.getColumnCount() : 0;
                outputExpected = (resultSetMetaData_ != null && resultSetMetaData_.getColumnCount() > 0);
            }
            catch ( SQLException se )
            {
                // Generate a SqlException for this, we don't want to throw
                // SQLException in this internal method
                throw new SqlException(se);
            }
            boolean chainAutoCommit = false;
            boolean commitSubstituted = false;
            boolean repositionedCursor = false;
            boolean timeoutSent = false;
            ResultSet scrollableRS = null;

            if (doWriteTimeout) {
                timeoutArrayList.set(0, TIMEOUT_STATEMENT + timeout_);
                writeSetSpecialRegister(timeoutArrayList);
                doWriteTimeout = false;
                timeoutSent = true;
            }
            switch (sqlMode_) {
            case isUpdate__:
                if (positionedUpdateCursorName_ != null) {
                    scrollableRS = agent_.sectionManager_.getPositionedUpdateResultSet(positionedUpdateCursorName_);
                }
                if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                    repositionedCursor =
                            scrollableRS.repositionScrollableResultSetBeforeJDBC1PositionedUpdateDelete();
                    if (!repositionedCursor) {
                        scrollableRS = null;
                    }
                }

                chainAutoCommit = connection_.willAutoCommitGenerateFlow() && isAutoCommittableStatement_;

                boolean chainOpenQueryForAutoGeneratedKeys = (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS);
                writeExecute(section_,
                        parameterMetaData_,
                        parameters_,
                        numInputColumns,
                        outputExpected,
                        (chainAutoCommit || chainOpenQueryForAutoGeneratedKeys)// chain flag
                ); // chain flag

                if (chainOpenQueryForAutoGeneratedKeys) {
                    prepareAutoGeneratedKeysStatement();
                    writeOpenQuery(preparedStatementForAutoGeneratedKeys_.section_,
                            preparedStatementForAutoGeneratedKeys_.fetchSize_,
                            preparedStatementForAutoGeneratedKeys_.resultSetType_);
                }
                

                if (chainAutoCommit) {
                    // we have encountered an error in writing the execute, so do not
                    // flow an autocommit
                    if (agent_.accumulatedReadExceptions_ != null) {
                        // currently, the only write exception we encounter is for
                        // data truncation: SQLSTATE 01004, so we don't bother checking for this
                        connection_.writeCommitSubstitute_();
                        commitSubstituted = true;
                    } else {
                        // there is no write error, so flow the commit
                        connection_.writeCommit();
                    }
                }
                break;

            case isQuery__:
                writeOpenQuery(section_,
                        fetchSize_,
                        resultSetType_,
                        numInputColumns,
                        parameterMetaData_,
                        parameters_);
                break;

            case isCall__:
                writeExecuteCall(outputRegistered_, // if no out/inout parameter, outputExpected = false
                        null,
                        section_,
                        fetchSize_,
                        false, // do not suppress ResultSets for regular CALLs
                        resultSetType_,
                        parameterMetaData_,
                        parameters_); // cross conversion
                break;
            }

            agent_.flow(this);

            super.readCloseResultSets(true);  // true means permit auto-commits

            // turn inUnitOfWork_ flag back on and add statement
            // back on commitListeners_ list if they were off
            // by an autocommit chained to a close cursor.
            if (piggybackedAutocommit) {
                connection_.completeTransactionStart();
            }

            markResultSetsClosed(true); // true means remove from list of commit and rollback listeners

            if (timeoutSent) {
                readSetSpecialRegister(); // Read response to the EXCSQLSET
            }

            switch (sqlMode_) {
            case isUpdate__:
                // do not need to reposition for a rowset cursor
                if (scrollableRS != null && !scrollableRS.isRowsetCursor_) {
                    scrollableRS.readPositioningFetch_();
                }

                else {
                    readExecute();

                    if (sqlUpdateMode_ == isInsertSql__ && autoGeneratedKeys_ == RETURN_GENERATED_KEYS) {
                        readPrepareAutoGeneratedKeysStatement();
                        preparedStatementForAutoGeneratedKeys_.readOpenQuery();
                        generatedKeysResultSet_ = preparedStatementForAutoGeneratedKeys_.resultSet_;
                        preparedStatementForAutoGeneratedKeys_.resultSet_ = null;
                    }
                }

                if (chainAutoCommit) {
                    if (commitSubstituted) {
                        connection_.readCommitSubstitute_();
                    } else {
                        connection_.readCommit();
                    }
                }
                break;

            case isQuery__:
                try {
                    readOpenQuery();
                } catch (DisconnectException dise) {
                    throw dise;
                } catch (SqlException e) {
                    throw e;
                }
                // resultSet_ is null if open query failed.
                // check for null resultSet_ before using it.
                if (resultSet_ != null) {
                    resultSet_.parseScrollableRowset();
                    //if (resultSet_.scrollable_) resultSet_.getRowCount();

                    // DERBY-1183: If we set it up earlier, the entry in
                    // clientCursorNameCache_ gets wiped out by the closing of
                    // result sets happening during readCloseResultSets above
                    // because ResultSet#markClosed calls
                    // Statement#removeClientCursorNameFromCache.
                    setupCursorNameCacheAndMappings();
                }
                break;

            case isCall__:
                readExecuteCall();
                break;

            }


            try {
                agent_.endReadChain();
            } catch (SqlException e) {
                throw e;

            }

            if (sqlMode_ == isCall__) {
                parseStorProcReturnedScrollableRowset();
                checkForStoredProcResultSetCount(executeType);
                // When there are no result sets back, we will commit immediately when autocommit is true.
                // make sure a commit is not performed when making the call to the sqlca message procedure
                if (connection_.autoCommit_ && resultSet_ == null && resultSetList_ == null && isAutoCommittableStatement_) {
                    connection_.flowAutoCommit();
                }
            }

            // The JDBC spec says that executeUpdate() should return 0
            // when no row count is returned.
            if (executeType == executeUpdateMethod__ && updateCount_ < 0) {
                updateCount_ = 0;
            }

            // Throw an exception if holdability returned by the server is different from requested.
            if (resultSet_ != null && resultSet_.resultSetHoldability_ != resultSetHoldability_ && sqlMode_ != isCall__) {
                throw new SqlException(agent_.logWriter_, 
                    new ClientMessageId(SQLState.UNABLE_TO_OPEN_RESULTSET_WITH_REQUESTED_HOLDABILTY),
                        resultSetHoldability_);
            }
    }"
59,473,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,remainingPredicateFollows,,,,942,947,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L942,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
60,615,derby,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.CastNode,,getCastFromNumericType,,,,682,722,close,https://github.com/apache/derby/tree/eea0d50c8d732cad9ba563ddfa786b7028eb092f//java/engine/org/apache/derby/impl/sql/compile/CastNode.java#L682,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/engine/org/apache/derby/impl/sql/compile/CastNode.java,,open,"private ValueNode getCastFromNumericType(
									  DataValueDescriptor constantValue, 
									  int destJDBCTypeId)
		throws StandardException
	{
		int nodeType = -1;
		Object constantObject = null;

		switch (destJDBCTypeId)
		{
			case Types.CHAR:
				nodeType = C_NodeTypes.CHAR_CONSTANT_NODE;
				constantObject = constantValue.getString();
				return (ValueNode) getNodeFactory().getNode(
										nodeType,
										constantObject, 
										ReuseFactory.getInteger(
                                                getTypeServices().getMaximumWidth()),
										getContextManager());

			case Types.TINYINT:
				nodeType = C_NodeTypes.TINYINT_CONSTANT_NODE;
				constantObject = new Byte(constantValue.getByte());
				break;

			case Types.SMALLINT:
				nodeType = C_NodeTypes.SMALLINT_CONSTANT_NODE;
				constantObject = ReuseFactory.getShort(constantValue.getShort());
				break;

			case Types.INTEGER:
				nodeType = C_NodeTypes.INT_CONSTANT_NODE;
				constantObject = ReuseFactory.getInteger(constantValue.getInt());
				break;

			case Types.BIGINT:
				nodeType = C_NodeTypes.LONGINT_CONSTANT_NODE;
				constantObject = ReuseFactory.getLong(constantValue.getLong());
				break;

			case Types.REAL:
				nodeType = C_NodeTypes.FLOAT_CONSTANT_NODE;
				constantObject = new Float(NumberDataType.normalizeREAL(constantValue.getDouble()));
				break;

			case Types.DOUBLE:
				// no need to normalize here because no constant could be out of range for a double
				nodeType = C_NodeTypes.DOUBLE_CONSTANT_NODE;
				constantObject = new Double(constantValue.getDouble());
				break;
		}

		if (nodeType == -1)
			return this;


		return (ValueNode) getNodeFactory().getNode(
										nodeType,
										constantObject, 
										getContextManager());

	}"
61,658,derby,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.derby.impl.sql.compile,org.apache.derby.impl.sql.compile.SQLParser,,jj_rescan_token,,,,21569,21655,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java#L21569,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//generated/java/org/apache/derby/impl/sql/compile/SQLParser.java,,unknown,
62,1007,tomcat,SF_SWITCH_FALLTHROUGH,A,last,,STYLE,org.apache.tomcat.util.bcel.classfile,org.apache.tomcat.util.bcel.classfile.Utility,,codeToString,,,,311,314,close,https://github.com/apache/tomcat/tree/3787242a83ee5555c79fd2e4c6b6952e9195ed8b//java/org/apache/tomcat/util/bcel/classfile/Utility.java#L311,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/tomcat/util/bcel/classfile/Utility.java,,unknown,"public static final String codeToString( byte[] code, ConstantPool constant_pool, int index,
            int length, boolean verbose ) {
        StringBuilder buf = new StringBuilder(code.length * 20); // Should be sufficient
        ByteSequence stream = new ByteSequence(code);
        try {
            for (int i = 0; i < index; i++) {
                codeToString(stream, constant_pool, verbose);
            }
            for (int i = 0; stream.available() > 0; i++) {
                if ((length < 0) || (i < length)) {
                    String indices = fillup(stream.getIndex() + "":"", 6, true, ' ');
                    buf.append(indices).append(codeToString(stream, constant_pool, verbose))
                            .append('\n');
                }
            }
        } catch (IOException e) {
            System.out.println(buf.toString());
            e.printStackTrace();
            throw new ClassFormatException(""Byte code error: "" + e, e);
        }
        return buf.toString();
    }"
63,1105,tomcat,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.catalina.servlets,org.apache.catalina.servlets.WebdavServlet,,parseProperties,,,,1936,2156,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/servlets/WebdavServlet.java#L1936,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/servlets/WebdavServlet.java,,unknown,"private void parseProperties(HttpServletRequest req,
                                 XMLWriter generatedXML,
                                 String path, int type,
                                 Vector<String> propertiesVector) {

        // Exclude any resource in the /WEB-INF and /META-INF subdirectories
        if (isSpecialPath(path))
            return;

        WebResource resource = resources.getResource(path);
        if (!resource.exists()) {
            // File is in directory listing but doesn't appear to exist
            // Broken symlink or odd permission settings?
            return;
        }

        generatedXML.writeElement(""D"", ""response"", XMLWriter.OPENING);
        String status = ""HTTP/1.1 "" + WebdavStatus.SC_OK + "" "" +
                WebdavStatus.getStatusText(WebdavStatus.SC_OK);

        // Generating href element
        generatedXML.writeElement(""D"", ""href"", XMLWriter.OPENING);

        String href = req.getContextPath() + req.getServletPath();
        if ((href.endsWith(""/"")) && (path.startsWith(""/"")))
            href += path.substring(1);
        else
            href += path;
        if (resource.isDirectory() && (!href.endsWith(""/"")))
            href += ""/"";

        generatedXML.writeText(rewriteUrl(href));

        generatedXML.writeElement(""D"", ""href"", XMLWriter.CLOSING);

        String resourceName = path;
        int lastSlash = path.lastIndexOf('/');
        if (lastSlash != -1)
            resourceName = resourceName.substring(lastSlash + 1);

        switch (type) {

        case FIND_ALL_PROP :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeProperty(""D"", ""creationdate"",
                    getISOCreationDate(resource.getCreation()));
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.OPENING);
            generatedXML.writeData(resourceName);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.CLOSING);
            if (resource.isFile()) {
                generatedXML.writeProperty
                    (""D"", ""getlastmodified"", FastHttpDateFormat.formatDate
                           (resource.getLastModified(), null));
                generatedXML.writeProperty
                    (""D"", ""getcontentlength"",
                     String.valueOf(resource.getContentLength()));
                String contentType = getServletContext().getMimeType(
                        resource.getName());
                if (contentType != null) {
                    generatedXML.writeProperty(""D"", ""getcontenttype"",
                            contentType);
                }
                generatedXML.writeProperty(""D"", ""getetag"",resource.getETag());
                generatedXML.writeElement(""D"", ""resourcetype"",
                        XMLWriter.NO_CONTENT);
            } else {
                generatedXML.writeElement(""D"", ""resourcetype"",
                        XMLWriter.OPENING);
                generatedXML.writeElement(""D"", ""collection"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""resourcetype"",
                        XMLWriter.CLOSING);
            }

            generatedXML.writeProperty(""D"", ""source"", """");

            String supportedLocks = ""<D:lockentry>""
                + ""<D:lockscope><D:exclusive/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"" + ""<D:lockentry>""
                + ""<D:lockscope><D:shared/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"";
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.OPENING);
            generatedXML.writeText(supportedLocks);
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.CLOSING);

            generateLockDiscovery(path, generatedXML);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_PROPERTY_NAMES :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeElement(""D"", ""creationdate"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.NO_CONTENT);
            if (resource.isFile()) {
                generatedXML.writeElement(""D"", ""getcontentlanguage"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getcontentlength"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getcontenttype"",
                        XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getetag"", XMLWriter.NO_CONTENT);
                generatedXML.writeElement(""D"", ""getlastmodified"",
                        XMLWriter.NO_CONTENT);
            }
            generatedXML.writeElement(""D"", ""resourcetype"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""source"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""lockdiscovery"",
                                      XMLWriter.NO_CONTENT);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_BY_PROPERTY :

            Vector<String> propertiesNotFound = new Vector<>();

            // Parse the list of properties

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            Enumeration<String> properties = propertiesVector.elements();

            while (properties.hasMoreElements()) {

                String property = properties.nextElement();

                if (property.equals(""creationdate"")) {
                    generatedXML.writeProperty
                        (""D"", ""creationdate"",
                         getISOCreationDate(resource.getCreation()));
                } else if (property.equals(""displayname"")) {
                    generatedXML.writeElement
                        (""D"", ""displayname"", XMLWriter.OPENING);
                    generatedXML.writeData(resourceName);
                    generatedXML.writeElement
                        (""D"", ""displayname"", XMLWriter.CLOSING);
                } else if (property.equals(""getcontentlanguage"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeElement(""D"", ""getcontentlanguage"",
                                                  XMLWriter.NO_CONTENT);
                    }
                } else if (property.equals(""getcontentlength"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getcontentlength"",
                             (String.valueOf(resource.getContentLength())));
                    }
                } else if (property.equals(""getcontenttype"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getcontenttype"",
                             getServletContext().getMimeType
                             (resource.getName()));
                    }
                } else if (property.equals(""getetag"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getetag"", resource.getETag());
                    }
                } else if (property.equals(""getlastmodified"")) {
                    if (resource.isDirectory()) {
                        propertiesNotFound.addElement(property);
                    } else {
                        generatedXML.writeProperty
                            (""D"", ""getlastmodified"", FastHttpDateFormat.formatDate
                                    (resource.getLastModified(), null));
                    }
                } else if (property.equals(""resourcetype"")) {
                    if (resource.isDirectory()) {
                        generatedXML.writeElement(""D"", ""resourcetype"",
                                XMLWriter.OPENING);
                        generatedXML.writeElement(""D"", ""collection"",
                                XMLWriter.NO_CONTENT);
                        generatedXML.writeElement(""D"", ""resourcetype"",
                                XMLWriter.CLOSING);
                    } else {
                        generatedXML.writeElement(""D"", ""resourcetype"",
                                XMLWriter.NO_CONTENT);
                    }
                } else if (property.equals(""source"")) {
                    generatedXML.writeProperty(""D"", ""source"", """");
                } else if (property.equals(""supportedlock"")) {
                    supportedLocks = ""<D:lockentry>""
                        + ""<D:lockscope><D:exclusive/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"" + ""<D:lockentry>""
                        + ""<D:lockscope><D:shared/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"";
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.OPENING);
                    generatedXML.writeText(supportedLocks);
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""lockdiscovery"")) {
                    if (!generateLockDiscovery(path, generatedXML))
                        propertiesNotFound.addElement(property);
                } else {
                    propertiesNotFound.addElement(property);
                }

            }

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            Enumeration<String> propertiesNotFoundList =
                propertiesNotFound.elements();

            if (propertiesNotFoundList.hasMoreElements()) {

                status = ""HTTP/1.1 "" + WebdavStatus.SC_NOT_FOUND + "" "" +
                        WebdavStatus.getStatusText(WebdavStatus.SC_NOT_FOUND);

                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
                generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

                while (propertiesNotFoundList.hasMoreElements()) {
                    generatedXML.writeElement
                        (""D"", propertiesNotFoundList.nextElement(),
                         XMLWriter.NO_CONTENT);
                }

                generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
                generatedXML.writeText(status);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            }

            break;

        }

        generatedXML.writeElement(""D"", ""response"", XMLWriter.CLOSING);

    }"
64,1188,tomcat,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.catalina.servlets,org.apache.catalina.servlets.WebdavServlet,,parseLockNullProperties,,,,2217,2390,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/servlets/WebdavServlet.java#L2217,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/servlets/WebdavServlet.java,,unknown,"private void parseLockNullProperties(HttpServletRequest req,
                                         XMLWriter generatedXML,
                                         String path, int type,
                                         Vector<String> propertiesVector) {

        // Exclude any resource in the /WEB-INF and /META-INF subdirectories
        if (isSpecialPath(path))
            return;

        // Retrieving the lock associated with the lock-null resource
        LockInfo lock = resourceLocks.get(path);

        if (lock == null)
            return;

        generatedXML.writeElement(""D"", ""response"", XMLWriter.OPENING);
        String status = ""HTTP/1.1 "" + WebdavStatus.SC_OK + "" "" +
                WebdavStatus.getStatusText(WebdavStatus.SC_OK);

        // Generating href element
        generatedXML.writeElement(""D"", ""href"", XMLWriter.OPENING);

        String absoluteUri = req.getRequestURI();
        String relativePath = getRelativePath(req);
        String toAppend = path.substring(relativePath.length());
        if (!toAppend.startsWith(""/""))
            toAppend = ""/"" + toAppend;

        generatedXML.writeText(rewriteUrl(RequestUtil.normalize(
                absoluteUri + toAppend)));

        generatedXML.writeElement(""D"", ""href"", XMLWriter.CLOSING);

        String resourceName = path;
        int lastSlash = path.lastIndexOf('/');
        if (lastSlash != -1)
            resourceName = resourceName.substring(lastSlash + 1);

        switch (type) {

        case FIND_ALL_PROP :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeProperty(""D"", ""creationdate"",
                    getISOCreationDate(lock.creationDate.getTime()));
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.OPENING);
            generatedXML.writeData(resourceName);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.CLOSING);
            generatedXML.writeProperty(""D"", ""getlastmodified"",
                                       FastHttpDateFormat.formatDate
                                       (lock.creationDate.getTime(), null));
            generatedXML.writeProperty(""D"", ""getcontentlength"",
                    String.valueOf(0));
            generatedXML.writeProperty(""D"", ""getcontenttype"", """");
            generatedXML.writeProperty(""D"", ""getetag"", """");
            generatedXML.writeElement(""D"", ""resourcetype"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""lock-null"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""resourcetype"", XMLWriter.CLOSING);

            generatedXML.writeProperty(""D"", ""source"", """");

            String supportedLocks = ""<D:lockentry>""
                + ""<D:lockscope><D:exclusive/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"" + ""<D:lockentry>""
                + ""<D:lockscope><D:shared/></D:lockscope>""
                + ""<D:locktype><D:write/></D:locktype>""
                + ""</D:lockentry>"";
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.OPENING);
            generatedXML.writeText(supportedLocks);
            generatedXML.writeElement(""D"", ""supportedlock"", XMLWriter.CLOSING);

            generateLockDiscovery(path, generatedXML);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_PROPERTY_NAMES :

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            generatedXML.writeElement(""D"", ""creationdate"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""displayname"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getcontentlanguage"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getcontentlength"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getcontenttype"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getetag"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""getlastmodified"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""resourcetype"",
                                      XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""source"", XMLWriter.NO_CONTENT);
            generatedXML.writeElement(""D"", ""lockdiscovery"",
                                      XMLWriter.NO_CONTENT);

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            break;

        case FIND_BY_PROPERTY :

            Vector<String> propertiesNotFound = new Vector<>();

            // Parse the list of properties

            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
            generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

            Enumeration<String> properties = propertiesVector.elements();

            while (properties.hasMoreElements()) {

                String property = properties.nextElement();

                if (property.equals(""creationdate"")) {
                    generatedXML.writeProperty(""D"", ""creationdate"",
                            getISOCreationDate(lock.creationDate.getTime()));
                } else if (property.equals(""displayname"")) {
                    generatedXML.writeElement(""D"", ""displayname"",
                            XMLWriter.OPENING);
                    generatedXML.writeData(resourceName);
                    generatedXML.writeElement(""D"", ""displayname"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""getcontentlanguage"")) {
                    generatedXML.writeElement(""D"", ""getcontentlanguage"",
                            XMLWriter.NO_CONTENT);
                } else if (property.equals(""getcontentlength"")) {
                    generatedXML.writeProperty(""D"", ""getcontentlength"",
                            (String.valueOf(0)));
                } else if (property.equals(""getcontenttype"")) {
                    generatedXML.writeProperty(""D"", ""getcontenttype"", """");
                } else if (property.equals(""getetag"")) {
                    generatedXML.writeProperty(""D"", ""getetag"", """");
                } else if (property.equals(""getlastmodified"")) {
                    generatedXML.writeProperty
                        (""D"", ""getlastmodified"",
                          FastHttpDateFormat.formatDate
                         (lock.creationDate.getTime(), null));
                } else if (property.equals(""resourcetype"")) {
                    generatedXML.writeElement(""D"", ""resourcetype"",
                            XMLWriter.OPENING);
                    generatedXML.writeElement(""D"", ""lock-null"",
                            XMLWriter.NO_CONTENT);
                    generatedXML.writeElement(""D"", ""resourcetype"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""source"")) {
                    generatedXML.writeProperty(""D"", ""source"", """");
                } else if (property.equals(""supportedlock"")) {
                    supportedLocks = ""<D:lockentry>""
                        + ""<D:lockscope><D:exclusive/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"" + ""<D:lockentry>""
                        + ""<D:lockscope><D:shared/></D:lockscope>""
                        + ""<D:locktype><D:write/></D:locktype>""
                        + ""</D:lockentry>"";
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.OPENING);
                    generatedXML.writeText(supportedLocks);
                    generatedXML.writeElement(""D"", ""supportedlock"",
                            XMLWriter.CLOSING);
                } else if (property.equals(""lockdiscovery"")) {
                    if (!generateLockDiscovery(path, generatedXML))
                        propertiesNotFound.addElement(property);
                } else {
                    propertiesNotFound.addElement(property);
                }

            }

            generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
            generatedXML.writeText(status);
            generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
            generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            Enumeration<String> propertiesNotFoundList = propertiesNotFound.elements();

            if (propertiesNotFoundList.hasMoreElements()) {

                status = ""HTTP/1.1 "" + WebdavStatus.SC_NOT_FOUND + "" "" +
                        WebdavStatus.getStatusText(WebdavStatus.SC_NOT_FOUND);

                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.OPENING);
                generatedXML.writeElement(""D"", ""prop"", XMLWriter.OPENING);

                while (propertiesNotFoundList.hasMoreElements()) {
                    generatedXML.writeElement
                        (""D"", propertiesNotFoundList.nextElement(),
                         XMLWriter.NO_CONTENT);
                }

                generatedXML.writeElement(""D"", ""prop"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.OPENING);
                generatedXML.writeText(status);
                generatedXML.writeElement(""D"", ""status"", XMLWriter.CLOSING);
                generatedXML.writeElement(""D"", ""propstat"", XMLWriter.CLOSING);

            }

            break;

        }

        generatedXML.writeElement(""D"", ""response"", XMLWriter.CLOSING);

    }"
65,1634,tomcat,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.catalina.ha.authenticator,org.apache.catalina.ha.authenticator.ClusterSingleSignOnListener,,messageReceived,,,,71,105,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java#L71,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java,,unknown,"@Override
    public void messageReceived(ClusterMessage myobj) {
        if (myobj != null && myobj instanceof SingleSignOnMessage) {
            SingleSignOnMessage msg = (SingleSignOnMessage) myobj;
            int action = msg.getAction();
            Session session = null;
            Principal principal = null;

            if (log.isDebugEnabled())
                log.debug(""SingleSignOnMessage Received with action ""
                          + msg.getAction());

            switch(action) {
            case SingleSignOnMessage.ADD_SESSION:
                session = getSession(msg.getSessionId(),
                                     msg.getContextName());
                if (session != null)
                    clusterSSO.associateLocal(msg.getSsoId(), session);
                break;
            case SingleSignOnMessage.DEREGISTER_SESSION:
                session = getSession(msg.getSessionId(),
                                     msg.getContextName());
                if (session != null)
                    clusterSSO.deregisterLocal(msg.getSsoId(), session);
                break;
            case SingleSignOnMessage.LOGOUT_SESSION:
                clusterSSO.deregisterLocal(msg.getSsoId());
                break;
            case SingleSignOnMessage.REGISTER_SESSION:
                if (msg.getPrincipal() != null) {
                    principal = msg.getPrincipal().getPrincipal();
                }
                clusterSSO.registerLocal(msg.getSsoId(), principal, msg.getAuthType(),
                                         msg.getUsername(), msg.getPassword());
                break;
            case SingleSignOnMessage.UPDATE_SESSION:
                if (msg.getPrincipal() != null) {
                    principal = msg.getPrincipal().getPrincipal();
                }
                clusterSSO.updateLocal(msg.getSsoId(), principal, msg.getAuthType(),
                                       msg.getUsername(), msg.getPassword());
                break;
            case SingleSignOnMessage.REMOVE_SESSION:
                session = getSession(msg.getSessionId(),
                                     msg.getContextName());
                if (session != null)
                    clusterSSO.removeSessionLocal(msg.getSsoId(), session);
                break;
            }
        }
    }"
66,1802,lucene-solr,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.lucene.search.join,org.apache.lucene.search.join.TermsWithScoreCollector$SV,,collect,,,,118,124,close,https://github.com/apache/lucene-solr/tree/43535fecb8455b3f9364f447e129ae05f79697e2//lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java#L118,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.java,,close,"@Override
    public void collect(int doc) throws IOException {
      fromDocTerms.get(doc, spare);
      int ord = collectedTerms.add(spare);
      if (ord < 0) {
        ord = -ord - 1;
      } else {
        if (ord >= scoreSums.length) {
          scoreSums = ArrayUtil.grow(scoreSums);
        }
      }

      float current = scorer.score();
      float existing = scoreSums[ord];
      if (Float.compare(existing, 0.0f) == 0) {
        scoreSums[ord] = current;
      } else {
        switch (scoreMode) {
          case Total:
            scoreSums[ord] = scoreSums[ord] + current;
            break;
          case Max:
            if (current > existing) {
              scoreSums[ord] = current;
            }
        }
      }
    }"
67,2017,lucene-solr,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.lucene.expressions.js,org.apache.lucene.expressions.js.JavascriptLexer,,mTokens,,,,1588,1809,close,https://github.com/apache/lucene-solr/tree/43535fecb8455b3f9364f447e129ae05f79697e2//lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java#L1588,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptLexer.java,,unknown,"@Override
  public void mTokens() throws RecognitionException {
    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )
    int alt17=32;
    switch ( input.LA(1) ) {
    case '+':
      {
      alt17=1;
      }
      break;
    case '&':
      {
      int LA17_2 = input.LA(2);
      if ( (LA17_2=='&') ) {
        alt17=9;
      }

      else {
        alt17=2;
      }

      }
      break;
    case '~':
      {
      alt17=3;
      }
      break;
    case '|':
      {
      int LA17_4 = input.LA(2);
      if ( (LA17_4=='|') ) {
        alt17=11;
      }

      else {
        alt17=4;
      }

      }
      break;
    case '<':
      {
      switch ( input.LA(2) ) {
      case '<':
        {
        alt17=5;
        }
        break;
      case '=':
        {
        alt17=18;
        }
        break;
      default:
        alt17=17;
      }
      }
      break;
    case '>':
      {
      switch ( input.LA(2) ) {
      case '>':
        {
        int LA17_31 = input.LA(3);
        if ( (LA17_31=='>') ) {
          alt17=7;
        }

        else {
          alt17=6;
        }

        }
        break;
      case '=':
        {
        alt17=16;
        }
        break;
      default:
        alt17=15;
      }
      }
      break;
    case '^':
      {
      alt17=8;
      }
      break;
    case '!':
      {
      int LA17_8 = input.LA(2);
      if ( (LA17_8=='=') ) {
        alt17=19;
      }

      else {
        alt17=10;
      }

      }
      break;
    case ':':
      {
      alt17=12;
      }
      break;
    case ',':
      {
      alt17=13;
      }
      break;
    case '=':
      {
      alt17=14;
      }
      break;
    case '?':
      {
      alt17=20;
      }
      break;
    case '/':
      {
      alt17=21;
      }
      break;
    case '.':
      {
      int LA17_14 = input.LA(2);
      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {
        alt17=30;
      }

      else {
        alt17=22;
      }

      }
      break;
    case '(':
      {
      alt17=23;
      }
      break;
    case '%':
      {
      alt17=24;
      }
      break;
    case '*':
      {
      alt17=25;
      }
      break;
    case ')':
      {
      alt17=26;
      }
      break;
    case '-':
      {
      alt17=27;
      }
      break;
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '_':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
      {
      alt17=28;
      }
      break;
    case '\t':
    case '\n':
    case '\r':
    case ' ':
      {
      alt17=29;
      }
      break;
    case '0':
      {
      switch ( input.LA(2) ) {
      case 'X':
      case 'x':
        {
        alt17=32;
        }
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
        {
        alt17=31;
        }
        break;
      default:
        alt17=30;
      }
      }
      break;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      {
      alt17=30;
      }
      break;
    default:
      NoViableAltException nvae =
        new NoViableAltException("""", 17, 0, input);
      throw nvae;
    }
    switch (alt17) {
      case 1 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD
        {
        mAT_ADD(); 

        }
        break;
      case 2 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND
        {
        mAT_BIT_AND(); 

        }
        break;
      case 3 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT
        {
        mAT_BIT_NOT(); 

        }
        break;
      case 4 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR
        {
        mAT_BIT_OR(); 

        }
        break;
      case 5 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL
        {
        mAT_BIT_SHL(); 

        }
        break;
      case 6 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR
        {
        mAT_BIT_SHR(); 

        }
        break;
      case 7 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU
        {
        mAT_BIT_SHU(); 

        }
        break;
      case 8 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR
        {
        mAT_BIT_XOR(); 

        }
        break;
      case 9 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND
        {
        mAT_BOOL_AND(); 

        }
        break;
      case 10 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT
        {
        mAT_BOOL_NOT(); 

        }
        break;
      case 11 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR
        {
        mAT_BOOL_OR(); 

        }
        break;
      case 12 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON
        {
        mAT_COLON(); 

        }
        break;
      case 13 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA
        {
        mAT_COMMA(); 

        }
        break;
      case 14 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ
        {
        mAT_COMP_EQ(); 

        }
        break;
      case 15 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT
        {
        mAT_COMP_GT(); 

        }
        break;
      case 16 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE
        {
        mAT_COMP_GTE(); 

        }
        break;
      case 17 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT
        {
        mAT_COMP_LT(); 

        }
        break;
      case 18 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE
        {
        mAT_COMP_LTE(); 

        }
        break;
      case 19 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ
        {
        mAT_COMP_NEQ(); 

        }
        break;
      case 20 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE
        {
        mAT_COND_QUE(); 

        }
        break;
      case 21 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE
        {
        mAT_DIVIDE(); 

        }
        break;
      case 22 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT
        {
        mAT_DOT(); 

        }
        break;
      case 23 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN
        {
        mAT_LPAREN(); 

        }
        break;
      case 24 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO
        {
        mAT_MODULO(); 

        }
        break;
      case 25 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY
        {
        mAT_MULTIPLY(); 

        }
        break;
      case 26 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN
        {
        mAT_RPAREN(); 

        }
        break;
      case 27 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT
        {
        mAT_SUBTRACT(); 

        }
        break;
      case 28 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID
        {
        mNAMESPACE_ID(); 

        }
        break;
      case 29 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS
        {
        mWS(); 

        }
        break;
      case 30 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL
        {
        mDECIMAL(); 

        }
        break;
      case 31 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL
        {
        mOCTAL(); 

        }
        break;
      case 32 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX
        {
        mHEX(); 

        }
        break;

    }
  }"
68,2155,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.benchmark.byTask.utils,org.apache.lucene.benchmark.byTask.utils.Algorithm,,<init>,,,,123,231,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java#L123,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Algorithm.java,,unknown,
69,2199,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.index,org.apache.lucene.index.TestIndexWriterReader$AddDirectoriesThreads,,doBody,,,,489,502,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java#L489,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java,,unknown,"void doBody(int j, Directory[] dirs) throws Throwable {
      switch (j % 4) {
        case 0:
          mainWriter.addIndexes(dirs);
          mainWriter.forceMerge(1);
          break;
        case 1:
          mainWriter.addIndexes(dirs);
          numaddIndexes.incrementAndGet();
          break;
        case 2:
          mainWriter.addIndexes(readers);
          break;
        case 3:
          mainWriter.commit();
      }
      count.addAndGet(dirs.length*NUM_INIT_DOCS);
    }"
70,2319,lucene-solr,SF_SWITCH_FALLTHROUGH,A,last,,STYLE,org.apache.lucene.index,org.apache.lucene.index.TestDocValuesIndexing,,runTestNumerics,,,,277,282,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing.java#L277,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing.java,,unknown,"@SuppressWarnings(""fallthrough"")
  public void runTestNumerics(IndexWriterConfig cfg, boolean withDeletions)
      throws IOException {
    Directory d = newDirectory();
    IndexWriter w = new IndexWriter(d, cfg);
    final int numValues = 50 + atLeast(10);
    final List<Type> numVariantList = new ArrayList<Type>(NUMERICS);

    // run in random order to test if fill works correctly during merges
    Collections.shuffle(numVariantList, random);
    for (Type val : numVariantList) {
      FixedBitSet deleted = indexValues(w, numValues, val, numVariantList,
          withDeletions, 7);
      List<Closeable> closeables = new ArrayList<Closeable>();
      IndexReader r = IndexReader.open(w, true);
      final int numRemainingValues = numValues - deleted.cardinality();
      final int base = r.numDocs() - numRemainingValues;
      // for FIXED_INTS_8 we use value mod 128 - to enable testing in 
      // one go we simply use numValues as the mod for all other INT types
      int mod = numValues;
      switch (val) {
      case FIXED_INTS_8:
        mod = 128;
      case FIXED_INTS_16:
      case FIXED_INTS_32:
      case FIXED_INTS_64:
      case VAR_INTS: {
        DocValues intsReader = getDocValues(r, val.name());
        assertNotNull(intsReader);

        Source ints = getSource(intsReader);

        for (int i = 0; i < base; i++) {
          long value = ints.getInt(i);
          assertEquals(""index "" + i, 0, value);
        }

        int expected = 0;
        for (int i = base; i < r.numDocs(); i++, expected++) {
          while (deleted.get(expected)) {
            expected++;
          }
          assertEquals(val + "" mod: "" + mod + "" index: "" +  i, expected%mod, ints.getInt(i));
        }
      }
        break;
      case FLOAT_32:
      case FLOAT_64: {
        DocValues floatReader = getDocValues(r, val.name());
        assertNotNull(floatReader);
        Source floats = getSource(floatReader);
        for (int i = 0; i < base; i++) {
          double value = floats.getFloat(i);
          assertEquals(val + "" failed for doc: "" + i + "" base: "" + base,
              0.0d, value, 0.0d);
        }
        int expected = 0;
        for (int i = base; i < r.numDocs(); i++, expected++) {
          while (deleted.get(expected)) {
            expected++;
          }
          assertEquals(""index "" + i, 2.0 * expected, floats.getFloat(i),
              0.00001);
        }
      }
        break;
      default:
        fail(""unexpected value "" + val);
      }

      closeables.add(r);
      for (Closeable toClose : closeables) {
        toClose.close();
      }
    }
    w.close();
    d.close();
  }"
71,2321,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.util,org.apache.lucene.util.English,,longToEnglish,,,,79,102,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/java/org/apache/lucene/util/English.java#L79,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/java/org/apache/lucene/util/English.java,,unknown,"public static String longToEnglish(long i) {
    StringBuilder result = new StringBuilder();
    longToEnglish(i, result);
    return result.toString();
  }"
72,2489,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.analysis.nl,org.apache.lucene.analysis.nl.DutchStemmer,,storeYandI,,,,362,374,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java#L362,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java,,unknown,"private void storeYandI(StringBuilder sb) {
    if (sb.charAt(0) == 'y')
      sb.setCharAt(0, 'Y');

    int last = sb.length() - 1;

    for (int i = 1; i < last; i++) {
      switch (sb.charAt(i)) {
        case 'i':
          {
            if (isVowel(sb.charAt(i - 1)) &&
                isVowel(sb.charAt(i + 1))
            )
              sb.setCharAt(i, 'I');
            break;
          }
        case 'y':
          {
            if (isVowel(sb.charAt(i - 1)))
              sb.setCharAt(i, 'Y');
            break;
          }
      }
    }
    if (last > 0 && sb.charAt(last) == 'y' && isVowel(sb.charAt(last - 1)))
      sb.setCharAt(last, 'Y');
  }"
73,2610,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.solr.handler,org.apache.solr.handler.XMLLoader,,processDelete,,,,198,230,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/core/src/java/org/apache/solr/handler/XMLLoader.java#L198,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/core/src/java/org/apache/solr/handler/XMLLoader.java,,unknown,"void processDelete(SolrQueryRequest req, UpdateRequestProcessor processor, XMLStreamReader parser) throws XMLStreamException, IOException {
    // Parse the command
    DeleteUpdateCommand deleteCmd = new DeleteUpdateCommand(req);

    for (int i = 0; i < parser.getAttributeCount(); i++) {
      String attrName = parser.getAttributeLocalName(i);
      String attrVal = parser.getAttributeValue(i);
      if (""fromPending"".equals(attrName)) {
        // deprecated
      } else if (""fromCommitted"".equals(attrName)) {
        // deprecated
      } else {
        XmlUpdateRequestHandler.log.warn(""unexpected attribute delete/@"" + attrName);
      }
    }

    StringBuilder text = new StringBuilder();
    while (true) {
      int event = parser.next();
      switch (event) {
        case XMLStreamConstants.START_ELEMENT:
          String mode = parser.getLocalName();
          if (!(""id"".equals(mode) || ""query"".equals(mode))) {
            XmlUpdateRequestHandler.log.warn(""unexpected XML tag /delete/"" + mode);
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                    ""unexpected XML tag /delete/"" + mode);
          }
          text.setLength(0);
          break;

        case XMLStreamConstants.END_ELEMENT:
          String currTag = parser.getLocalName();
          if (""id"".equals(currTag)) {
            deleteCmd.id = text.toString();
          } else if (""query"".equals(currTag)) {
            deleteCmd.query = text.toString();
          } else if (""delete"".equals(currTag)) {
            return;
          } else {
            XmlUpdateRequestHandler.log.warn(""unexpected XML tag /delete/"" + currTag);
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                    ""unexpected XML tag /delete/"" + currTag);
          }
          processor.processDelete(deleteCmd);
          deleteCmd.clear();
          break;

          // Add everything to the text
        case XMLStreamConstants.SPACE:
        case XMLStreamConstants.CDATA:
        case XMLStreamConstants.CHARACTERS:
          text.append(parser.getText());
          break;
      }
    }
  }"
74,2759,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.index,org.apache.lucene.index.TestStressIndexing2$IndexingThread,,indexDoc,,,,785,797,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java#L785,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestStressIndexing2.java,,unknown,"public void indexDoc() throws IOException {
      Document d = new Document();

      FieldType customType1 = new FieldType(TextField.TYPE_STORED);
      customType1.setTokenized(false);
      customType1.setOmitNorms(true);
      
      ArrayList<Field> fields = new ArrayList<Field>();      
      String idString = getIdString();
      Field idField =  newField(""id"", idString, customType1);
      fields.add(idField);

      int nFields = nextInt(maxFields);
      for (int i=0; i<nFields; i++) {

        FieldType customType = new FieldType();
        switch (nextInt(4)) {
        case 0:
          break;
        case 1:
          customType.setStoreTermVectors(true);
          break;
        case 2:
          customType.setStoreTermVectors(true);
          customType.setStoreTermVectorPositions(true);
          break;
        case 3:
          customType.setStoreTermVectors(true);
          customType.setStoreTermVectorOffsets(true);
          break;
        }
        
        switch (nextInt(4)) {
          case 0:
            customType.setStored(true);
            customType.setOmitNorms(true);
            customType.setIndexed(true);
            fields.add(newField(""f"" + nextInt(100), getString(1), customType));
            break;
          case 1:
            customType.setIndexed(true);
            customType.setTokenized(true);
            fields.add(newField(""f"" + nextInt(100), getString(0), customType));
            break;
          case 2:
            customType.setStored(true);
            customType.setStoreTermVectors(false);
            customType.setStoreTermVectorOffsets(false);
            customType.setStoreTermVectorPositions(false);
            fields.add(newField(""f"" + nextInt(100), getString(0), customType));
            break;
          case 3:
            customType.setStored(true);
            customType.setIndexed(true);
            customType.setTokenized(true);
            fields.add(newField(""f"" + nextInt(100), getString(bigFieldSize), customType));
            break;          
        }
      }

      if (sameFieldOrder) {
        Collections.sort(fields, fieldNameComparator);
      } else {
        // random placement of id field also
        Collections.swap(fields,nextInt(fields.size()), 0);
      }

      for (int i=0; i<fields.size(); i++) {
        d.add(fields.get(i));
      }
      if (VERBOSE) {
        System.out.println(Thread.currentThread().getName() + "": indexing id:"" + idString);
      }
      w.updateDocument(new Term(""id"", idString), d);
      //System.out.println(Thread.currentThread().getName() + "": indexing ""+d);
      docs.put(idString, d);
    }"
75,2765,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.benchmark.byTask.feeds.demohtml,org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser,,jj_rescan_token,,,,712,714,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/HTMLParser.java#L712,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/HTMLParser.java,,unknown,"private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }"
76,2783,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.solr.analysis,org.apache.solr.analysis.MappingCharFilterFactory,,parseString,,,,109,121,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java#L109,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory.java,,unknown,"protected String parseString( String s ){
    int readPos = 0;
    int len = s.length();
    int writePos = 0;
    while( readPos < len ){
      char c = s.charAt( readPos++ );
      if( c == '\\' ){
        if( readPos >= len )
          throw new RuntimeException( ""Invalid escaped char in ["" + s + ""]"" );
        c = s.charAt( readPos++ );
        switch( c ) {
          case '\\' : c = '\\'; break;
          case '""' : c = '""'; break;
          case 'n' : c = '\n'; break;
          case 't' : c = '\t'; break;
          case 'r' : c = '\r'; break;
          case 'b' : c = '\b'; break;
          case 'f' : c = '\f'; break;
          case 'u' :
            if( readPos + 3 >= len )
              throw new RuntimeException( ""Invalid escaped char in ["" + s + ""]"" );
            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );
            readPos += 4;
            break;
        }
      }
      out[writePos++] = c;
    }
    return new String( out, 0, writePos );
  }"
77,2970,lucene-solr,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.lucene.analysis.nl,org.apache.lucene.analysis.nl.DutchStemmer,,substitute,,,,269,297,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java#L269,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/analysis/common/src/java/org/apache/lucene/analysis/nl/DutchStemmer.java,,unknown,"private void substitute(StringBuilder buffer) {
    for (int i = 0; i < buffer.length(); i++) {
      switch (buffer.charAt(i)) {
        case 'ä':
        case 'á':
          {
            buffer.setCharAt(i, 'a');
            break;
          }
        case 'ë':
        case 'é':
          {
            buffer.setCharAt(i, 'e');
            break;
          }
        case 'ü':
        case 'ú':
          {
            buffer.setCharAt(i, 'u');
            break;
          }
        case 'ï':
        case 'i':
          {
            buffer.setCharAt(i, 'i');
            break;
          }
        case 'ö':
        case 'ó':
          {
            buffer.setCharAt(i, 'o');
            break;
          }
      }
    }
  }"
78,3259,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,createCfamColumnValidator,,,,2446,2463,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L2446,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
79,3927,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,selectExpression,,,,698,705,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L698,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
80,4853,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,endStmnt,,,,3601,3605,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L3601,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
81,5690,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,truncateStatement,,,,3535,3549,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L3535,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
82,5762,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,batchStatement,,,,1445,1452,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L1445,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
83,5798,cassandra,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,usingClause,,,,1521,1525,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L1521,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
84,6609,cassandra,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,intTerm,,,,5241,5254,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L5241,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
85,6672,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,selectCountClause,,,,1429,1442,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L1429,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
86,6713,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,usingClause,,,,1188,1192,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L1188,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
87,7048,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,usingClauseDelete,,,,1263,1267,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L1263,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
88,7432,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlParser,,query,,,,216,396,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlParser.java#L216,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlParser.java,,unknown,
89,8259,cassandra,SF_SWITCH_NO_DEFAULT,B,last,,STYLE,org.apache.cassandra.cql3,org.apache.cassandra.cql3.CqlParser,,tokenDefinition,,,,5664,5717,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/gen-java/org/apache/cassandra/cql3/CqlParser.java#L5664,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql3/CqlParser.java,,unknown,
90,8680,cassandra,SF_SWITCH_FALLTHROUGH,B,last,,STYLE,org.apache.cassandra.transport,org.apache.cassandra.transport.ServerConnection,,applyStateTransition,,,,101,103,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//src/java/org/apache/cassandra/transport/ServerConnection.java#L101,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/java/org/apache/cassandra/transport/ServerConnection.java,,close,"public void applyStateTransition(Message.Type requestType, Message.Type responseType)
    {
        switch (state)
        {
            case UNINITIALIZED:
                if (requestType == Message.Type.STARTUP)
                {
                    if (responseType == Message.Type.AUTHENTICATE)
                        state = State.AUTHENTICATION;
                    else if (responseType == Message.Type.READY)
                        state = State.READY;
                }
                break;
            case AUTHENTICATION:
                assert requestType == Message.Type.CREDENTIALS;
                if (responseType == Message.Type.READY)
                    state = State.READY;
            case READY:
                break;
            default:
                throw new AssertionError();
        }
    }"
91,9147,cassandra,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.cassandra.cql,org.apache.cassandra.cql.CqlLexer,,mINTEGER,,,,2595,2599,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//src/gen-java/org/apache/cassandra/cql/CqlLexer.java#L2595,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/gen-java/org/apache/cassandra/cql/CqlLexer.java,,unknown,
92,9563,jmeter,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.SamplerResultTab,,setupTabPane,,,,249,257,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/components/org/apache/jmeter/visualizers/SamplerResultTab.java#L249,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/visualizers/SamplerResultTab.java,,close,"@SuppressWarnings(""boxing"")
    public void setupTabPane() {
        // Clear all data before display a new
        this.clearData();
        StyledDocument statsDoc = stats.getStyledDocument();
        try {
            if (userObject instanceof SampleResult) {
                sampleResult = (SampleResult) userObject;
                // We are displaying a SampleResult
                setupTabPaneForSampleResult();
                requestPanel.setSamplerResult(sampleResult);                

                final String samplerClass = sampleResult.getClass().getName();
                String typeResult = samplerClass.substring(1 + samplerClass.lastIndexOf('.'));
                
                StringBuilder statsBuff = new StringBuilder(200);
                statsBuff.append(JMeterUtils.getResString(""view_results_thread_name"")).append(sampleResult.getThreadName()).append(NL); //$NON-NLS-1$
                String startTime = dateFormat.format(new Date(sampleResult.getStartTime()));
                statsBuff.append(JMeterUtils.getResString(""view_results_sample_start"")).append(startTime).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_load_time"")).append(sampleResult.getTime()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_latency"")).append(sampleResult.getLatency()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_size_in_bytes"")).append(sampleResult.getBytes()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_size_headers_in_bytes"")).append(sampleResult.getHeadersSize()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_size_body_in_bytes"")).append(sampleResult.getBodySize()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_sample_count"")).append(sampleResult.getSampleCount()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_error_count"")).append(sampleResult.getErrorCount()).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
                statsBuff.setLength(0); // reset for reuse

                String responseCode = sampleResult.getResponseCode();

                int responseLevel = 0;
                if (responseCode != null) {
                    try {
                        responseLevel = Integer.parseInt(responseCode) / 100;
                    } catch (NumberFormatException numberFormatException) {
                        // no need to change the foreground color
                    }
                }

                Style style = null;
                switch (responseLevel) {
                case 3:
                    style = statsDoc.getStyle(STYLE_REDIRECT);
                    break;
                case 4:
                    style = statsDoc.getStyle(STYLE_CLIENT_ERROR);
                    break;
                case 5:
                    style = statsDoc.getStyle(STYLE_SERVER_ERROR);
                    break;
                }

                statsBuff.append(JMeterUtils.getResString(""view_results_response_code"")).append(responseCode).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), style);
                statsBuff.setLength(0); // reset for reuse

                // response message label
                String responseMsgStr = sampleResult.getResponseMessage();

                statsBuff.append(JMeterUtils.getResString(""view_results_response_message"")).append(responseMsgStr).append(NL); //$NON-NLS-1$
                statsBuff.append(NL);
                statsBuff.append(JMeterUtils.getResString(""view_results_response_headers"")).append(NL); //$NON-NLS-1$
                statsBuff.append(sampleResult.getResponseHeaders()).append(NL);
                statsBuff.append(NL);
                statsBuff.append(typeResult + "" ""+ JMeterUtils.getResString(""view_results_fields"")).append(NL); //$NON-NLS-1$ $NON-NLS-2$
                statsBuff.append(""ContentType: "").append(sampleResult.getContentType()).append(NL); //$NON-NLS-1$
                statsBuff.append(""DataEncoding: "").append(sampleResult.getDataEncodingNoDefault()).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
                statsBuff = null; // Done
                
                // Tabbed results: fill table
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_thread_name""), sampleResult.getThreadName())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_sample_start""), startTime)); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_load_time""), sampleResult.getTime())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_latency""), sampleResult.getLatency())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_size_in_bytes""), sampleResult.getBytes())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_size_headers_in_bytes""), sampleResult.getHeadersSize())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_size_body_in_bytes""), sampleResult.getBodySize())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_sample_count""), sampleResult.getSampleCount())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_error_count""), sampleResult.getErrorCount())); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_response_code""), responseCode)); //$NON-NLS-1$
                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(""view_results_response_message""), responseMsgStr)); //$NON-NLS-1$
                
                // Parsed response headers
                LinkedHashMap<String, String> lhm = JMeterUtils.parseHeaders(sampleResult.getResponseHeaders());
                Set<Entry<String, String>> keySet = lhm.entrySet();
                for (Entry<String, String> entry : keySet) {
                    resHeadersModel.addRow(new RowResult(entry.getKey(), entry.getValue()));
                }
                
                // Fields table
                resFieldsModel.addRow(new RowResult(""Type Result "", typeResult)); //$NON-NLS-1$
                //not sure needs I18N?
                resFieldsModel.addRow(new RowResult(""ContentType"", sampleResult.getContentType())); //$NON-NLS-1$
                resFieldsModel.addRow(new RowResult(""DataEncoding"", sampleResult.getDataEncodingNoDefault())); //$NON-NLS-1$
                
                // Reset search
                if (activateSearchExtension) {
                    searchTextExtension.resetTextToFind();
                }

            } else if (userObject instanceof AssertionResult) {
                assertionResult = (AssertionResult) userObject;

                // We are displaying an AssertionResult
                setupTabPaneForAssertionResult();

                StringBuilder statsBuff = new StringBuilder(100);
                statsBuff.append(JMeterUtils.getResString(""view_results_assertion_error"")).append(assertionResult.isError()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_assertion_failure"")).append(assertionResult.isFailure()).append(NL); //$NON-NLS-1$
                statsBuff.append(JMeterUtils.getResString(""view_results_assertion_failure_message"")).append(assertionResult.getFailureMessage()).append(NL); //$NON-NLS-1$
                statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
            }
        } catch (BadLocationException exc) {
            stats.setText(exc.getLocalizedMessage());
        }
    }"
93,9569,jmeter,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.jmeter,org.apache.jmeter.JMeter,,initializeProperties,,,,583,664,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/core/org/apache/jmeter/JMeter.java#L583,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/JMeter.java,,close,"private void initializeProperties(CLArgsParser parser) {
        if (parser.getArgumentById(PROPFILE_OPT) != null) {
            JMeterUtils.loadJMeterProperties(parser.getArgumentById(PROPFILE_OPT).getArgument());
        } else {
            JMeterUtils.loadJMeterProperties(NewDriver.getJMeterDir() + File.separator
                    + ""bin"" + File.separator // $NON-NLS-1$
                    + ""jmeter.properties"");// $NON-NLS-1$
        }

        if (parser.getArgumentById(JMLOGFILE_OPT) != null){
            String jmlogfile=parser.getArgumentById(JMLOGFILE_OPT).getArgument();
            jmlogfile = processLAST(jmlogfile, "".log"");// $NON-NLS-1$
            JMeterUtils.setProperty(LoggingManager.LOG_FILE,jmlogfile);
        }

        JMeterUtils.initLogging();
        JMeterUtils.initLocale();
        // Bug 33845 - allow direct override of Home dir
        if (parser.getArgumentById(JMETER_HOME_OPT) == null) {
            JMeterUtils.setJMeterHome(NewDriver.getJMeterDir());
        } else {
            JMeterUtils.setJMeterHome(parser.getArgumentById(JMETER_HOME_OPT).getArgument());
        }

        Properties jmeterProps = JMeterUtils.getJMeterProperties();
        remoteProps = new Properties();

        // Add local JMeter properties, if the file is found
        String userProp = JMeterUtils.getPropDefault(""user.properties"",""""); //$NON-NLS-1$
        if (userProp.length() > 0){ //$NON-NLS-1$
            FileInputStream fis=null;
            try {
                File file = JMeterUtils.findFile(userProp);
                if (file.canRead()){
                    log.info(""Loading user properties from: ""+file.getCanonicalPath());
                    fis = new FileInputStream(file);
                    Properties tmp = new Properties();
                    tmp.load(fis);
                    jmeterProps.putAll(tmp);
                    LoggingManager.setLoggingLevels(tmp);//Do what would be done earlier
                }
            } catch (IOException e) {
                log.warn(""Error loading user property file: "" + userProp, e);
            } finally {
                JOrphanUtils.closeQuietly(fis);
            }
        }

        // Add local system properties, if the file is found
        String sysProp = JMeterUtils.getPropDefault(""system.properties"",""""); //$NON-NLS-1$
        if (sysProp.length() > 0){
            FileInputStream fis=null;
            try {
                File file = JMeterUtils.findFile(sysProp);
                if (file.canRead()){
                    log.info(""Loading system properties from: ""+file.getCanonicalPath());
                    fis = new FileInputStream(file);
                    System.getProperties().load(fis);
                }
            } catch (IOException e) {
                log.warn(""Error loading system property file: "" + sysProp, e);
            } finally {
                JOrphanUtils.closeQuietly(fis);
            }
        }

        // Process command line property definitions
        // These can potentially occur multiple times

        List<CLOption> clOptions = parser.getArguments();
        int size = clOptions.size();

        for (int i = 0; i < size; i++) {
            CLOption option = clOptions.get(i);
            String name = option.getArgument(0);
            String value = option.getArgument(1);
            FileInputStream fis = null;

            switch (option.getDescriptor().getId()) {

            // Should not have any text arguments
            case CLOption.TEXT_ARGUMENT:
                throw new IllegalArgumentException(""Unknown arg: ""+option.getArgument());

            case PROPFILE2_OPT: // Bug 33920 - allow multiple props
                try {
                    fis = new FileInputStream(new File(name));
                    Properties tmp = new Properties();
                    tmp.load(fis);
                    jmeterProps.putAll(tmp);
                    LoggingManager.setLoggingLevels(tmp);//Do what would be done earlier
                } catch (FileNotFoundException e) {
                    log.warn(""Can't find additional property file: "" + name, e);
                } catch (IOException e) {
                    log.warn(""Error loading additional property file: "" + name, e);
                } finally {
                    JOrphanUtils.closeQuietly(fis);
                }
                break;
            case SYSTEM_PROPFILE:
                log.info(""Setting System properties from file: "" + name);
                try {
                    fis = new FileInputStream(new File(name));
                    System.getProperties().load(fis);
                } catch (IOException e) {
                    log.warn(""Cannot find system property file ""+e.getLocalizedMessage());
                } finally {
                    JOrphanUtils.closeQuietly(fis);
                }
                break;
            case SYSTEM_PROPERTY:
                if (value.length() > 0) { // Set it
                    log.info(""Setting System property: "" + name + ""="" + value);
                    System.getProperties().setProperty(name, value);
                } else { // Reset it
                    log.warn(""Removing System property: "" + name);
                    System.getProperties().remove(name);
                }
                break;
            case JMETER_PROPERTY:
                if (value.length() > 0) { // Set it
                    log.info(""Setting JMeter property: "" + name + ""="" + value);
                    jmeterProps.setProperty(name, value);
                } else { // Reset it
                    log.warn(""Removing JMeter property: "" + name);
                    jmeterProps.remove(name);
                }
                break;
            case JMETER_GLOBAL_PROP:
                if (value.length() > 0) { // Set it
                    log.info(""Setting Global property: "" + name + ""="" + value);
                    remoteProps.setProperty(name, value);
                } else {
                    File propFile = new File(name);
                    if (propFile.canRead()) {
                        log.info(""Setting Global properties from the file ""+name);
                        try {
                            fis = new FileInputStream(propFile);
                            remoteProps.load(fis);
                        } catch (FileNotFoundException e) {
                            log.warn(""Could not find properties file: ""+e.getLocalizedMessage());
                        } catch (IOException e) {
                            log.warn(""Could not load properties file: ""+e.getLocalizedMessage());
                        } finally {
                            JOrphanUtils.closeQuietly(fis);
                        }
                    }
                }
                break;
            case LOGLEVEL:
                if (value.length() > 0) { // Set category
                    log.info(""LogLevel: "" + name + ""="" + value);
                    LoggingManager.setPriority(value, name);
                } else { // Set root level
                    log.warn(""LogLevel: "" + name);
                    LoggingManager.setPriority(name);
                }
                break;
            case REMOTE_STOP:
                remoteStop = true;
                break;
            }
        }

        String sample_variables = (String) jmeterProps.get(SampleEvent.SAMPLE_VARIABLES);
        if (sample_variables != null){
            remoteProps.put(SampleEvent.SAMPLE_VARIABLES, sample_variables);
        }
    }"
94,9595,jmeter,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.ServerPanel,,getHealthyImageIcon,,,,134,145,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/monitor/components/org/apache/jmeter/visualizers/ServerPanel.java#L134,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/monitor/components/org/apache/jmeter/visualizers/ServerPanel.java,,unknown,"private static ImageIcon getHealthyImageIcon(int health) {
        ImageIcon i = null;
        switch (health) {
        case Stats.HEALTHY:
            i = HEALTHY;
            break;
        case Stats.ACTIVE:
            i = ACTIVE;
            break;
        case Stats.WARNING:
            i = WARNING;
            break;
        case Stats.DEAD:
            i = DEAD;
            break;
        }
        return i;
    }"
95,9633,jmeter,SF_SWITCH_NO_DEFAULT,A,last,,STYLE,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.RenderAsXML$DOMTreePanel$DomTreeRenderer,,encode,,,,201,212,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/components/org/apache/jmeter/visualizers/RenderAsXML.java#L201,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/visualizers/RenderAsXML.java,,close,"private String encode(char c) {
                String toReturn = String.valueOf(c);
                switch (c) {
                case '<': // $NON-NLS-1$
                    toReturn = ""&lt;""; // $NON-NLS-1$
                    break;
                case '>': // $NON-NLS-1$
                    toReturn = ""&gt;""; // $NON-NLS-1$
                    break;
                case '\'': // $NON-NLS-1$
                    toReturn = ""&apos;""; // $NON-NLS-1$
                    break;
                case '\""': // $NON-NLS-1$
                    toReturn = ""&quot;""; // $NON-NLS-1$
                    break;

                }
                return toReturn;
            }"
96,9776,ant,SF_SWITCH_FALLTHROUGH,C,last,,STYLE,org.apache.tools.ant.util,org.apache.tools.ant.util.JavaEnvUtils,,getJrePackageTestCases,,,,457,461,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/util/JavaEnvUtils.java#L457,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/util/JavaEnvUtils.java,,open,"public static Vector getJrePackageTestCases() {
        Vector tests = new Vector();
        tests.addElement(""java.lang.Object"");
        switch(javaVersionNumber) {
            case VERSION_1_8:
            case VERSION_1_7:
            case VERSION_1_6:
            case VERSION_1_5:
                tests.addElement(
                    ""com.sun.org.apache.xerces.internal.jaxp.datatype.DatatypeFactoryImpl "");
                // Fall tru
            case VERSION_1_4:
                tests.addElement(""sun.audio.AudioPlayer"");
                if (javaVersionNumber == VERSION_1_4) {
                    tests.addElement(""org.apache.crimson.parser.ContentModel"");
                    tests.addElement(""org.apache.xalan.processor.ProcessorImport"");
                    tests.addElement(""org.apache.xml.utils.URI"");
                    tests.addElement(""org.apache.xpath.XPathFactory"");
                }
                tests.addElement(""org.ietf.jgss.Oid"");
                tests.addElement(""org.w3c.dom.Attr"");
                tests.addElement(""org.xml.sax.XMLReader"");
                // fall through
            case VERSION_1_3:
                tests.addElement(""org.omg.CORBA.Any"");
                tests.addElement(""com.sun.corba.se.internal.corba.AnyImpl"");
                tests.addElement(""com.sun.jndi.ldap.LdapURL"");
                tests.addElement(""com.sun.media.sound.Printer"");
                tests.addElement(""com.sun.naming.internal.VersionHelper"");
                tests.addElement(""com.sun.org.omg.CORBA.Initializer"");
                tests.addElement(""sunw.io.Serializable"");
                tests.addElement(""sunw.util.EventListener"");
                // fall through
            case VERSION_1_2:
                tests.addElement(""javax.accessibility.Accessible"");
                tests.addElement(""sun.misc.BASE64Encoder"");
                tests.addElement(""com.sun.image.codec.jpeg.JPEGCodec"");
                // fall through
            case VERSION_1_1:
            default:
                //things like sun.reflection, sun.misc, sun.net
                tests.addElement(""sun.reflect.SerializationConstructorAccessorImpl"");
                tests.addElement(""sun.net.www.http.HttpClient"");
                tests.addElement(""sun.audio.AudioPlayer"");
                break;
        }
        return tests;
    }"
97,9927,ant,SF_SWITCH_FALLTHROUGH,C,last,,STYLE,org.apache.tools.ant.util,org.apache.tools.ant.util.JavaEnvUtils,,buildJrePackages,,,,406,409,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/util/JavaEnvUtils.java#L406,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/util/JavaEnvUtils.java,,open,"private static void buildJrePackages() {
        jrePackages = new Vector<String>();
        switch(javaVersionNumber) {
            case VERSION_1_8:
            case VERSION_1_7:
            case VERSION_1_6:
            case VERSION_1_5:
                //In Java1.5, the apache stuff moved.
                jrePackages.addElement(""com.sun.org.apache"");
                //fall through.
            case VERSION_1_4:
                if (javaVersionNumber == VERSION_1_4) {
                    jrePackages.addElement(""org.apache.crimson"");
                    jrePackages.addElement(""org.apache.xalan"");
                    jrePackages.addElement(""org.apache.xml"");
                    jrePackages.addElement(""org.apache.xpath"");
                }
                jrePackages.addElement(""org.ietf.jgss"");
                jrePackages.addElement(""org.w3c.dom"");
                jrePackages.addElement(""org.xml.sax"");
                // fall through
            case VERSION_1_3:
                jrePackages.addElement(""org.omg"");
                jrePackages.addElement(""com.sun.corba"");
                jrePackages.addElement(""com.sun.jndi"");
                jrePackages.addElement(""com.sun.media"");
                jrePackages.addElement(""com.sun.naming"");
                jrePackages.addElement(""com.sun.org.omg"");
                jrePackages.addElement(""com.sun.rmi"");
                jrePackages.addElement(""sunw.io"");
                jrePackages.addElement(""sunw.util"");
                // fall through
            case VERSION_1_2:
                jrePackages.addElement(""com.sun.java"");
                jrePackages.addElement(""com.sun.image"");
                // are there any here that we forgot?
                // fall through
            case VERSION_1_1:
            default:
                //things like sun.reflection, sun.misc, sun.net
                jrePackages.addElement(""sun"");
                jrePackages.addElement(""java"");
                jrePackages.addElement(""javax"");
                break;
        }
    }"
98,10062,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.DateUtils,,modify,,,,1047,1073,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/DateUtils.java#L1047,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/DateUtils.java,,close,"private static void modify(final Calendar val, final int field, final int modType) {
        if (val.get(Calendar.YEAR) > 280000000) {
            throw new ArithmeticException(""Calendar value too large for accurate calculations"");
        }
        
        if (field == Calendar.MILLISECOND) {
            return;
        }

        // ----------------- Fix for LANG-59 ---------------------- START ---------------
        // see http://issues.apache.org/jira/browse/LANG-59
        //
        // Manually truncate milliseconds, seconds and minutes, rather than using
        // Calendar methods.

        final Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

        // truncate milliseconds
        final int millisecs = val.get(Calendar.MILLISECOND);
        if (MODIFY_TRUNCATE == modType || millisecs < 500) {
            time = time - millisecs;
        }
        if (field == Calendar.SECOND) {
            done = true;
        }

        // truncate seconds
        final int seconds = val.get(Calendar.SECOND);
        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {
            time = time - (seconds * 1000L);
        }
        if (field == Calendar.MINUTE) {
            done = true;
        }

        // truncate minutes
        final int minutes = val.get(Calendar.MINUTE);
        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

        // reset time
        if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }
        // ----------------- Fix for LANG-59 ----------------------- END ----------------

        boolean roundUp = false;
        for (final int[] aField : fields) {
            for (final int element : aField) {
                if (element == field) {
                    //This is our field... we stop looping
                    if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {
                        if (field == DateUtils.SEMI_MONTH) {
                            //This is a special case that's hard to generalize
                            //If the date is 1, we round up to 16, otherwise
                            //  we subtract 15 days and add 1 month
                            if (val.get(Calendar.DATE) == 1) {
                                val.add(Calendar.DATE, 15);
                            } else {
                                val.add(Calendar.DATE, -15);
                                val.add(Calendar.MONTH, 1);
                            }
// ----------------- Fix for LANG-440 ---------------------- START ---------------
                        } else if (field == Calendar.AM_PM) {
                            // This is a special case
                            // If the time is 0, we round up to 12, otherwise
                            //  we subtract 12 hours and add 1 day
                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {
                                val.add(Calendar.HOUR_OF_DAY, 12);
                            } else {
                                val.add(Calendar.HOUR_OF_DAY, -12);
                                val.add(Calendar.DATE, 1);
                            }
// ----------------- Fix for LANG-440 ---------------------- END ---------------
                        } else {
                            //We need at add one to this field since the
                            //  last number causes us to round up
                            val.add(aField[0], 1);
                        }
                    }
                    return;
                }
            }
            //We have various fields that are not easy roundings
            int offset = 0;
            boolean offsetSet = false;
            //These are special types of fields that require different rounding rules
            switch (field) {
                case DateUtils.SEMI_MONTH:
                    if (aField[0] == Calendar.DATE) {
                        //If we're going to drop the DATE field's value,
                        //  we want to do this our own way.
                        //We need to subtrace 1 since the date has a minimum of 1
                        offset = val.get(Calendar.DATE) - 1;
                        //If we're above 15 days adjustment, that means we're in the
                        //  bottom half of the month and should stay accordingly.
                        if (offset >= 15) {
                            offset -= 15;
                        }
                        //Record whether we're in the top or bottom half of that range
                        roundUp = offset > 7;
                        offsetSet = true;
                    }
                    break;
                case Calendar.AM_PM:
                    if (aField[0] == Calendar.HOUR_OF_DAY) {
                        //If we're going to drop the HOUR field's value,
                        //  we want to do this our own way.
                        offset = val.get(Calendar.HOUR_OF_DAY);
                        if (offset >= 12) {
                            offset -= 12;
                        }
                        roundUp = offset >= 6;
                        offsetSet = true;
                    }
                    break;
            }
            if (!offsetSet) {
                final int min = val.getActualMinimum(aField[0]);
                final int max = val.getActualMaximum(aField[0]);
                //Calculate the offset from the minimum allowed value
                offset = val.get(aField[0]) - min;
                //Set roundUp if this is more than half way between the minimum and maximum
                roundUp = offset > ((max - min) / 2);
            }
            //We need to remove this field
            if (offset != 0) {
                val.set(aField[0], val.get(aField[0]) - offset);
            }
        }
        throw new IllegalArgumentException(""The field "" + field + "" is not supported"");

    }"
99,10067,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.DateUtils,,iterator,,,,1182,1196,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/DateUtils.java#L1182,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/DateUtils.java,,close,"public static Iterator<Calendar> iterator(final Date focus, final int rangeStyle) {
        if (focus == null) {
            throw new IllegalArgumentException(""The date must not be null"");
        }
        final Calendar gval = Calendar.getInstance();
        gval.setTime(focus);
        return iterator(gval, rangeStyle);
    }"
100,10195,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.FastDateParser,,getStrategy,,,,433,474,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/FastDateParser.java#L433,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/FastDateParser.java,,open,"private Strategy getStrategy(String formatField, final Calendar definingCalendar) {
        switch(formatField.charAt(0)) {
        case '\'':
            if(formatField.length()>2) {
                formatField= formatField.substring(1, formatField.length()-1);
            }
            //$FALL-THROUGH$
        default:
            return new CopyQuotedStrategy(formatField);
        case 'D':
            return DAY_OF_YEAR_STRATEGY;
        case 'E':
            return getLocaleSpecificStrategy(Calendar.DAY_OF_WEEK, definingCalendar);
        case 'F':
            return DAY_OF_WEEK_IN_MONTH_STRATEGY;
        case 'G':
            return getLocaleSpecificStrategy(Calendar.ERA, definingCalendar);
        case 'H':
            return MODULO_HOUR_OF_DAY_STRATEGY;
        case 'K':
            return HOUR_STRATEGY;
        case 'M':
            return formatField.length()>=3 ?getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) :NUMBER_MONTH_STRATEGY;
        case 'S':
            return MILLISECOND_STRATEGY;
        case 'W':
            return WEEK_OF_MONTH_STRATEGY;
        case 'a':
            return getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);
        case 'd':
            return DAY_OF_MONTH_STRATEGY;
        case 'h':
            return MODULO_HOUR_STRATEGY;
        case 'k':
            return HOUR_OF_DAY_STRATEGY;
        case 'm':
            return MINUTE_STRATEGY;
        case 's':
            return SECOND_STRATEGY;
        case 'w':
            return WEEK_OF_YEAR_STRATEGY;
        case 'y':
            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;
        case 'Z':
        case 'z':
            return getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);
        }
    }"
101,10200,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.text,org.apache.commons.lang3.text.ExtendedMessageFormat,,parseFormatDescription,,,,378,389,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java#L378,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java,,close,"private String parseFormatDescription(final String pattern, final ParsePosition pos) {
        final int start = pos.getIndex();
        seekNonWs(pattern, pos);
        final int text = pos.getIndex();
        int depth = 1;
        for (; pos.getIndex() < pattern.length(); next(pos)) {
            switch (pattern.charAt(pos.getIndex())) {
            case START_FE:
                depth++;
                break;
            case END_FE:
                depth--;
                if (depth == 0) {
                    return pattern.substring(text, pos.getIndex());
                }
                break;
            case QUOTE:
                getQuotedString(pattern, pos, false);
                break;
            }
        }
        throw new IllegalArgumentException(
                ""Unterminated format element at position "" + start);
    }"
102,10428,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.DateUtils,,getFragment,,,,1690,1695,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/DateUtils.java#L1690,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/DateUtils.java,,close,"private static long getFragment(final Date date, final int fragment, final int unit) {
        if(date == null) {
            throw  new IllegalArgumentException(""The date must not be null"");
        }
        final Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        return getFragment(calendar, fragment, unit);
    }"
103,10691,commons-lang,SF_SWITCH_NO_DEFAULT,C,last,,STYLE,org.apache.commons.lang3.time,org.apache.commons.lang3.time.FastDateParser,,escapeRegex,,,,309,333,close,https://github.com/apache/commons-lang/tree/c4ecd75ecd8b78c66cc51b49dd32989a3f1cde2e//src/main/java/org/apache/commons/lang3/time/FastDateParser.java#L309,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/time/FastDateParser.java,,unknown,"private static StringBuilder escapeRegex(final StringBuilder regex, final String value, final boolean unquote) {
        regex.append(""\\Q"");
        for(int i= 0; i<value.length(); ++i) {
            char c= value.charAt(i);
            switch(c) {
            case '\'':
                if(unquote) {
                    if(++i==value.length()) {
                        return regex;
                    }
                    c= value.charAt(i);
                }
                break;
            case '\\':
                if(++i==value.length()) {
                    break;
                }                
                /*
                 * If we have found \E, we replace it with \E\\E\Q, i.e. we stop the quoting,
                 * quote the \ in \E, then restart the quoting.
                 * 
                 * Otherwise we just output the two characters.
                 * In each case the initial \ needs to be output and the final char is done at the end
                 */
                regex.append(c); // we always want the original \
                c = value.charAt(i); // Is it followed by E ?
                if (c == 'E') { // \E detected
                  regex.append(""E\\\\E\\""); // see comment above
                  c = 'Q'; // appended below
                }
                break;
            }
            regex.append(c);
        }
        regex.append(""\\E"");
        return regex;
    }"
