,warning id,project,bug_pattern,commit,last_commit_checked,?,bug pattern category,package,class,field,method,type,expr,idents,start_line,end_line,label (automatically determined),commit url,"commit url (of the version compared to, if closed)",code (if open),label,method_content
0,155,derby,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.derby.impl.services.monitor,org.apache.derby.impl.services.monitor.StorageFactoryService,,resolveServicePropertiesFiles,,BufferedReader,"BufferedReader,FileReader,bin,spf,getPath",523,523,close,https://github.com/apache/derby/tree/9495437c8b640d689c8a67563097b86cb0cd6fca//java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java#L523,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java,,close,"private void resolveServicePropertiesFiles(StorageFactory sf,
                                               StorageFile spf)
            throws StandardException {
        StorageFile spfOld = sf.newStorageFile(PROPERTIES_NAME.concat(""old""));
        FileOperationHelper foh = new FileOperationHelper();
        boolean hasCurrent = foh.exists(spf, true);
        boolean hasBackup = foh.exists(spfOld, true);
        // Shortcut the normal case.
        if (hasCurrent && !hasBackup) {
            return;
        }

        // Backup file, but no current file.
        if (hasBackup && !hasCurrent) {
            // Writing the new service properties file must have failed during
            // an update. Rename the backup to be the current file.
            foh.renameTo(spfOld, spf, true);
            Monitor.getStream().printlnWithHeader(
                                MessageService.getTextMessage(
                                    MessageId.SERVICE_PROPERTIES_RESTORED));
        // Backup file and current file.
        } else if (hasBackup && hasCurrent) {
            // See if the new (current) file is valid. If so delete the backup,
            // if not, rename the backup to be the current.
            BufferedReader bin = null;
            String lastLine = null;
            try {
                bin = new BufferedReader(new FileReader(spf.getPath()));
                String line;
                while ((line = bin.readLine()) != null) {
                    if (line.trim().length() != 0) {
                        lastLine = line;
                    }
                }
            } catch (IOException ioe) {
                throw StandardException.newException(
                        SQLState.UNABLE_TO_OPEN_FILE, ioe,
                        spf.getPath(), ioe.getMessage());
            } finally {
                try {
                    if (bin != null) {
                        bin.close();
                    }
                } catch (IOException ioe) {
                    // Ignore exception during close
                }
            }
            if (lastLine != null &&
                    lastLine.startsWith(SERVICE_PROPERTIES_EOF_TOKEN)) {
                // Being unable to delete the backup file is fine as long as
                // the current file appears valid.
                String msg;
                if (foh.delete(spfOld, false)) {
                    msg = MessageService.getTextMessage(
                            MessageId.SERVICE_PROPERTIES_BACKUP_DELETED);    
                } else {
                    // Include path so the user can delete file manually.
                    msg = MessageService.getTextMessage(
                            MessageId.SERVICE_PROPERTIES_BACKUP_DEL_FAILED,
                            getMostAccuratePath(spfOld));
                }
                Monitor.getStream().printlnWithHeader(msg);
            } else {
                foh.delete(spf, false);
                foh.renameTo(spfOld, spf, true);
                Monitor.getStream().printlnWithHeader(
                                MessageService.getTextMessage(
                                    MessageId.SERVICE_PROPERTIES_RESTORED));
            }
        } 
    }"
1,307,derby,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.derby.client.am,org.apache.derby.client.am.LogWriter$1,,run,,return new PrintWriter(,,700,700,close,https://github.com/apache/derby/tree/acbecbb96a5ae0a3b6bc5948b03f061dfea91662//java/client/org/apache/derby/client/am/LogWriter.java#L700,https://github.com/apache/derby/tree/33427bdb982a7dd5b9e629ccec9c40f2b96412b4//java/client/org/apache/derby/client/am/LogWriter.java,,unknown,"public PrintWriter run() throws IOException {
                        String fileCanonicalPath =
                            new File(fileName).getCanonicalPath();
                        return new PrintWriter(
                                new BufferedOutputStream(
                                        new FileOutputStream(
                                                fileCanonicalPath, fileAppend), 4096), true);
                        }"
2,1717,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.queryparser.xml,org.apache.lucene.queryparser.xml.QueryTemplateManager,,getQueryAsXmlString,,return baos.toString();,,104,104,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryTemplateManager.java#L104,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryTemplateManager.java,,unknown,"public String getQueryAsXmlString(Properties formProperties, String queryTemplateName)
      throws SAXException, IOException, ParserConfigurationException, TransformerException {
    Templates ts = compiledTemplatesCache.get(queryTemplateName);
    return getQueryAsXmlString(formProperties, ts);
  }"
3,1782,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.solr.update,org.apache.solr.update.SolrIndexWriter,,toInfoStream,,PrintStream,"PrintStream,PrintStreamInfoStream,fos,true",77,77,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/core/src/java/org/apache/solr/update/SolrIndexWriter.java#L77,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/core/src/java/org/apache/solr/update/SolrIndexWriter.java,,unknown,"private static InfoStream toInfoStream(SolrIndexConfig config) throws IOException {
    String infoStreamFile = config.infoStreamFile;
    if (infoStreamFile != null) {
      File f = new File(infoStreamFile);
      File parent = f.getParentFile();
      if (parent != null) parent.mkdirs();
      FileOutputStream fos = new FileOutputStream(f, true);
      return new PrintStreamInfoStream(new PrintStream(fos, true));
    } else {
      return InfoStream.NO_OUTPUT;
    }
  }"
4,1820,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.benchmark.byTask.feeds,org.apache.lucene.benchmark.byTask.feeds.DirContentSource,,getNextDocData,,BufferedReader reader = new BufferedReader(new FileReader(f));,,198,198,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java#L198,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DirContentSource.java,,unknown,"@Override
  public DocData getNextDocData(DocData docData) throws NoMoreDataException, IOException {
    File f = null;
    String name = null;
    synchronized (this) {
      if (!inputFiles.hasNext()) { 
        // exhausted files, start a new round, unless forever set to false.
        if (!forever) {
          throw new NoMoreDataException();
        }
        inputFiles = new Iterator(dataDir);
        iteration++;
      }
      f = inputFiles.next();
      // System.err.println(f);
      name = f.getCanonicalPath()+""_""+iteration;
    }
    
    BufferedReader reader = new BufferedReader(new FileReader(f));
    String line = null;
    //First line is the date, 3rd is the title, rest is body
    String dateStr = reader.readLine();
    reader.readLine();//skip an empty line
    String title = reader.readLine();
    reader.readLine();//skip an empty line
    StringBuilder bodyBuf = new StringBuilder(1024);
    while ((line = reader.readLine()) != null) {
      bodyBuf.append(line).append(' ');
    }
    reader.close();
    addBytes(f.length());
    
    Date date = parseDate(dateStr);
    
    docData.clear();
    docData.setName(name);
    docData.setBody(bodyBuf.toString());
    docData.setTitle(title);
    docData.setDate(date);
    return docData;
  }"
5,1910,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.benchmark.byTask.tasks,org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask,,configureWriter,,BufferedOutputStream,"BufferedOutputStream,FileOutputStream,PrintStream,f,iwc,setInfoStream",187,187,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java#L187,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/CreateIndexTask.java,,unknown,"public static IndexWriter configureWriter(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) throws CorruptIndexException, LockObtainFailedException, IOException {
    IndexWriterConfig iwc = createWriterConfig(config, runData, mode, commit);
    String infoStreamVal = config.get(""writer.info.stream"", null);
    if (infoStreamVal != null) {
      if (infoStreamVal.equals(""SystemOut"")) {
        iwc.setInfoStream(System.out);
      } else if (infoStreamVal.equals(""SystemErr"")) {
        iwc.setInfoStream(System.err);
      } else {
        File f = new File(infoStreamVal).getAbsoluteFile();
        iwc.setInfoStream(new PrintStream(new BufferedOutputStream(new FileOutputStream(f))));
      }
    }
    IndexWriter writer = new IndexWriter(runData.getDirectory(), iwc);
    return writer;
  }"
6,2025,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.solr.handler.dataimport,org.apache.solr.handler.dataimport.FileDataSource,,openStream,,FileInputStream,"FileInputStream,InputStreamReader,file",128,128,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource.java#L128,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileDataSource.java,,close,"protected Reader openStream(File file) throws FileNotFoundException,
          UnsupportedEncodingException {
    if (encoding == null) {
      return new InputStreamReader(new FileInputStream(file));
    } else {
      return new InputStreamReader(new FileInputStream(file), encoding);
    }
  }"
7,2176,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.benchmark.byTask.utils,org.apache.lucene.benchmark.byTask.utils.Config,,<init>,,ByteArrayInputStream,"ByteArrayInputStream,props,sb,getBytes,load,toString",83,83,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java#L83,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config.java,,unknown,
8,2186,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.codecs,org.apache.lucene.codecs.BlockTreeTermsReader$Stats,,toString,,bos,"bos,toString",385,385,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java#L385,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.java,,unknown,"@Override
    public String toString() {
      final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
      final PrintStream out = new PrintStream(bos);
      
      out.println(""  index FST:"");
      out.println(""    "" + indexNodeCount + "" nodes"");
      out.println(""    "" + indexArcCount + "" arcs"");
      out.println(""    "" + indexNumBytes + "" bytes"");
      out.println(""  terms:"");
      out.println(""    "" + totalTermCount + "" terms"");
      out.println(""    "" + totalTermBytes + "" bytes"" + (totalTermCount != 0 ? "" ("" + String.format(""%.1f"", ((double) totalTermBytes)/totalTermCount) + "" bytes/term)"" : """"));
      out.println(""  blocks:"");
      out.println(""    "" + totalBlockCount + "" blocks"");
      out.println(""    "" + termsOnlyBlockCount + "" terms-only blocks"");
      out.println(""    "" + subBlocksOnlyBlockCount + "" sub-block-only blocks"");
      out.println(""    "" + mixedBlockCount + "" mixed blocks"");
      out.println(""    "" + floorBlockCount + "" floor blocks"");
      out.println(""    "" + (totalBlockCount-floorSubBlockCount) + "" non-floor blocks"");
      out.println(""    "" + floorSubBlockCount + "" floor sub-blocks"");
      out.println(""    "" + totalBlockSuffixBytes + "" term suffix bytes"" + (totalBlockCount != 0 ? "" ("" + String.format(""%.1f"", ((double) totalBlockSuffixBytes)/totalBlockCount) + "" suffix-bytes/block)"" : """"));
      out.println(""    "" + totalBlockStatsBytes + "" term stats bytes"" + (totalBlockCount != 0 ? "" ("" + String.format(""%.1f"", ((double) totalBlockStatsBytes)/totalBlockCount) + "" stats-bytes/block)"" : """"));
      out.println(""    "" + totalBlockOtherBytes + "" other bytes"" + (totalBlockCount != 0 ? "" ("" + String.format(""%.1f"", ((double) totalBlockOtherBytes)/totalBlockCount) + "" other-bytes/block)"" : """"));
      if (totalBlockCount != 0) {
        out.println(""    by prefix length:"");
        int total = 0;
        for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {
          final int blockCount = blockCountByPrefixLen[prefix];
          total += blockCount;
          if (blockCount != 0) {
            out.println(""      "" + String.format(""%2d"", prefix) + "": "" + blockCount);
          }
        }
        assert totalBlockCount == total;
      }

      return bos.toString();
    }"
9,2189,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.search,org.apache.lucene.search.TestFieldCache,,testInfoStream,,assertTrue,"assertTrue,bos,indexOf,toString",122,122,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/search/TestFieldCache.java#L122,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/search/TestFieldCache.java,,unknown,"public void testInfoStream() throws Exception {
    try {
      FieldCache cache = FieldCache.DEFAULT;
      ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
      cache.setInfoStream(new PrintStream(bos));
      cache.getDoubles(reader, ""theDouble"", false);
      cache.getFloats(reader, ""theDouble"", false);
      assertTrue(bos.toString().indexOf(""WARNING"") != -1);
    } finally {
      FieldCache.DEFAULT.purgeAllCaches();
    }
  }"
10,2221,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.search.spans,org.apache.lucene.search.spans.TestPayloadSpans,,testShrinkToAfterShortestMatch3,,String,"String,payload,payloadSet,add",350,350,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java#L350,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java,,unknown,"public void testShrinkToAfterShortestMatch3() throws CorruptIndexException,
      LockObtainFailedException, IOException {
    Directory directory = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random, directory,
                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));

    Document doc = new Document();
    doc.add(new TextField(""content"", new StringReader(""j k a l f k k p a t a k l k t a"")));
    writer.addDocument(doc);
    IndexReader reader = writer.getReader();
    IndexSearcher is = newSearcher(reader);
    writer.close();

    SpanTermQuery stq1 = new SpanTermQuery(new Term(""content"", ""a""));
    SpanTermQuery stq2 = new SpanTermQuery(new Term(""content"", ""k""));
    SpanQuery[] sqs = { stq1, stq2 };
    SpanNearQuery snq = new SpanNearQuery(sqs, 0, true);
    Spans spans =  MultiSpansWrapper.wrap(is.getTopReaderContext(), snq);

    TopDocs topDocs = is.search(snq, 1);
    Set<String> payloadSet = new HashSet<String>();
    for (int i = 0; i < topDocs.scoreDocs.length; i++) {
      while (spans.next()) {
        Collection<byte[]> payloads = spans.getPayload();

        for (final byte [] payload : payloads) {
          payloadSet.add(new String(payload));
        }
      }
    }
    assertEquals(2, payloadSet.size());
    if(VERBOSE) {
      for (final String payload : payloadSet)
        System.out.println(""match:"" +  payload);
      
    }
    assertTrue(payloadSet.contains(""a:Noise:10""));
    assertTrue(payloadSet.contains(""k:Noise:11""));
    reader.close();
    directory.close();
  }"
11,2282,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.index,org.apache.lucene.index.TestCheckIndex,,testDeletedDocs,,System,"System,bos,out,println,toString",60,60,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestCheckIndex.java#L60,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestCheckIndex.java,,unknown,"public void testDeletedDocs() throws IOException {
    Directory dir = newDirectory();
    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));
    for(int i=0;i<19;i++) {
      Document doc = new Document();
      FieldType customType = new FieldType(TextField.TYPE_STORED);
      customType.setStoreTermVectors(true);
      customType.setStoreTermVectorPositions(true);
      customType.setStoreTermVectorOffsets(true);
      doc.add(newField(""field"", ""aaa""+i, customType));
      writer.addDocument(doc);
    }
    writer.forceMerge(1);
    writer.commit();
    writer.deleteDocuments(new Term(""field"",""aaa5""));
    writer.close();

    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
    CheckIndex checker = new CheckIndex(dir);
    checker.setInfoStream(new PrintStream(bos));
    if (VERBOSE) checker.setInfoStream(System.out);
    CheckIndex.Status indexStatus = checker.checkIndex();
    if (indexStatus.clean == false) {
      System.out.println(""CheckIndex failed"");
      System.out.println(bos.toString());
      fail();
    }
    
    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);
    assertTrue(seg.openReaderPassed);

    assertNotNull(seg.diagnostics);
    
    assertNotNull(seg.fieldNormStatus);
    assertNull(seg.fieldNormStatus.error);
    assertEquals(1, seg.fieldNormStatus.totFields);

    assertNotNull(seg.termIndexStatus);
    assertNull(seg.termIndexStatus.error);
    assertEquals(19, seg.termIndexStatus.termCount);
    assertEquals(19, seg.termIndexStatus.totFreq);
    assertEquals(18, seg.termIndexStatus.totPos);

    assertNotNull(seg.storedFieldStatus);
    assertNull(seg.storedFieldStatus.error);
    assertEquals(18, seg.storedFieldStatus.docCount);
    assertEquals(18, seg.storedFieldStatus.totFields);

    assertNotNull(seg.termVectorStatus);
    assertNull(seg.termVectorStatus.error);
    assertEquals(18, seg.termVectorStatus.docCount);
    assertEquals(18, seg.termVectorStatus.totVectors);

    assertTrue(seg.diagnostics.size() > 0);
    final List<String> onlySegments = new ArrayList<String>();
    onlySegments.add(""_0"");
    
    assertTrue(checker.checkIndex(onlySegments).clean == true);
    dir.close();
  }"
12,2316,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.search.spans,org.apache.lucene.search.spans.TestPayloadSpans,,testPayloadSpanUtil,,String,"String,System,bytes,out,println",386,386,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java#L386,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans.java,,unknown,"public void testPayloadSpanUtil() throws Exception {
    Directory directory = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random, directory,
                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));

    Document doc = new Document();
    doc.add(newField(PayloadHelper.FIELD,""xx rr yy mm  pp"", TextField.TYPE_STORED));
    writer.addDocument(doc);
  
    IndexReader reader = writer.getReader();
    writer.close();
    IndexSearcher searcher = newSearcher(reader);

    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());
    
    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, ""rr"")));
    if(VERBOSE)
      System.out.println(""Num payloads:"" + payloads.size());
    for (final byte [] bytes : payloads) {
      if(VERBOSE)
        System.out.println(new String(bytes));
    }
    reader.close();
    directory.close();
  }"
13,2345,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.solr.common.util,org.apache.solr.common.util.ContentStreamBase$FileStream,,getReader,,charset,"charset,null",118,118,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.java#L118,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/solrj/src/java/org/apache/solr/common/util/ContentStreamBase.java,,unknown,"@Override
    public Reader getReader() throws IOException {
      String charset = getCharsetFromContentType( contentType );
      return charset == null 
        ? new FileReader( file )
        : new InputStreamReader( getStream(), charset );
    }"
14,2421,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.search.spans,org.apache.lucene.search.spans.TestBasics,,testComplexSpanChecks,,Payload,"Payload,getBytes",473,473,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/search/spans/TestBasics.java#L473,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/search/spans/TestBasics.java,,unknown,"public void testComplexSpanChecks() throws Exception {
    SpanTermQuery one = new SpanTermQuery(new Term(""field"", ""one""));
    SpanTermQuery thous = new SpanTermQuery(new Term(""field"", ""thousand""));
    //should be one position in between
    SpanTermQuery hundred = new SpanTermQuery(new Term(""field"", ""hundred""));
    SpanTermQuery three = new SpanTermQuery(new Term(""field"", ""three""));

    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);
    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);
    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);
    SpanQuery query;
    //this one's too small
    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);
    checkHits(query, new int[]{});
    //this one's just right
    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);
    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});

    Collection<byte[]> payloads = new ArrayList<byte[]>();
    Payload pay = new Payload((""pos: "" + 0).getBytes());
    Payload pay2 = new Payload((""pos: "" + 1).getBytes());
    Payload pay3 = new Payload((""pos: "" + 3).getBytes());
    Payload pay4 = new Payload((""pos: "" + 4).getBytes());
    payloads.add(pay.getData());
    payloads.add(pay2.getData());
    payloads.add(pay3.getData());
    payloads.add(pay4.getData());
    query = new SpanNearPayloadCheckQuery(oneThousHunThree, payloads);
    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});

  }"
15,2512,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.search.suggest.jaspell,org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie,,<init>,,BufferedReader,"BufferedReader,GZIPInputStream,InputStreamReader,in",202,202,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java#L202,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.java,,unknown,
16,2674,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.index,org.apache.lucene.index.TestPayloads,,testPayloadFieldBit,,analyzer,"analyzer,getBytes,setPayloadData",109,109,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//lucene/src/test/org/apache/lucene/index/TestPayloads.java#L109,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//lucene/src/test/org/apache/lucene/index/TestPayloads.java,,unknown,"public void testPayloadFieldBit() throws Exception {
        Directory ram = newDirectory();
        PayloadAnalyzer analyzer = new PayloadAnalyzer();
        IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));
        Document d = new Document();
        // this field won't have any payloads
        d.add(newField(""f1"", ""This field has no payloads"", TextField.TYPE_UNSTORED));
        // this field will have payloads in all docs, however not for all term positions,
        // so this field is used to check if the DocumentWriter correctly enables the payloads bit
        // even if only some term positions have payloads
        d.add(newField(""f2"", ""This field has payloads in all docs"", TextField.TYPE_UNSTORED));
        d.add(newField(""f2"", ""This field has payloads in all docs NO PAYLOAD"", TextField.TYPE_UNSTORED));
        // this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads 
        // enabled in only some documents
        d.add(newField(""f3"", ""This field has payloads in some docs"", TextField.TYPE_UNSTORED));
        // only add payload data for field f2
        analyzer.setPayloadData(""f2"", ""somedata"".getBytes(), 0, 1);
        writer.addDocument(d);
        // flush
        writer.close();

      SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));
        FieldInfos fi = reader.fieldInfos();
        assertFalse(""Payload field bit should not be set."", fi.fieldInfo(""f1"").storePayloads);
        assertTrue(""Payload field bit should be set."", fi.fieldInfo(""f2"").storePayloads);
        assertFalse(""Payload field bit should not be set."", fi.fieldInfo(""f3"").storePayloads);
        reader.close();
        
        // now we add another document which has payloads for field f3 and verify if the SegmentMerger
        // enabled payloads for that field
        analyzer = new PayloadAnalyzer(); // Clear payload state for each field
        writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT,
            analyzer).setOpenMode(OpenMode.CREATE));
        d = new Document();
        d.add(newField(""f1"", ""This field has no payloads"", TextField.TYPE_UNSTORED));
        d.add(newField(""f2"", ""This field has payloads in all docs"", TextField.TYPE_UNSTORED));
        d.add(newField(""f2"", ""This field has payloads in all docs"", TextField.TYPE_UNSTORED));
        d.add(newField(""f3"", ""This field has payloads in some docs"", TextField.TYPE_UNSTORED));
        // add payload data for field f2 and f3
        analyzer.setPayloadData(""f2"", ""somedata"".getBytes(), 0, 1);
        analyzer.setPayloadData(""f3"", ""somedata"".getBytes(), 0, 3);
        writer.addDocument(d);

        // force merge
        writer.forceMerge(1);
        // flush
        writer.close();

      reader = getOnlySegmentReader(IndexReader.open(ram));
        fi = reader.fieldInfos();
        assertFalse(""Payload field bit should not be set."", fi.fieldInfo(""f1"").storePayloads);
        assertTrue(""Payload field bit should be set."", fi.fieldInfo(""f2"").storePayloads);
        assertTrue(""Payload field bit should be set."", fi.fieldInfo(""f3"").storePayloads);
        reader.close();
        ram.close();
    }"
17,2738,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.analysis.wikipedia,org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl,,<init>,,InputStreamReader,"InputStreamReader,in,this",521,521,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl.java#L521,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl.java,,unknown,
18,2739,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.analysis.charfilter,org.apache.lucene.analysis.charfilter.HTMLStripCharFilter,,main,,HTMLStripCharFilter,HTMLStripCharFilter,56,56,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java#L56,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java,,unknown,"public static void main(String[] args) throws IOException {
    Reader in = new HTMLStripCharFilter(
            CharReader.get(new InputStreamReader(System.in)));
    int ch;
    while ( (ch=in.read()) != -1 ) System.out.print((char)ch);
  }"
19,2777,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.benchmark.utils,org.apache.lucene.benchmark.utils.ExtractReuters,,extractFile,,FileWriter,"FileWriter,outFile",110,110,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java#L110,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java,,unknown,"protected void extractFile(File sgmFile) {
    try {
      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));

      StringBuilder buffer = new StringBuilder(1024);
      StringBuilder outBuffer = new StringBuilder(1024);

      String line = null;
      int docNumber = 0;
      while ((line = reader.readLine()) != null) {
        // when we see a closing reuters tag, flush the file

        if (line.indexOf(""</REUTERS"") == -1) {
          // Replace the SGM escape sequences

          buffer.append(line).append(' ');// accumulate the strings for now,
                                          // then apply regular expression to
                                          // get the pieces,
        } else {
          // Extract the relevant pieces and write to a file in the output dir
          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);
          while (matcher.find()) {
            for (int i = 1; i <= matcher.groupCount(); i++) {
              if (matcher.group(i) != null) {
                outBuffer.append(matcher.group(i));
              }
            }
            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);
          }
          String out = outBuffer.toString();
          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {
            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);
          }
          File outFile = new File(outputDir, sgmFile.getName() + ""-""
              + (docNumber++) + "".txt"");
          // System.out.println(""Writing "" + outFile);
          FileWriter writer = new FileWriter(outFile);
          writer.write(out);
          writer.close();
          outBuffer.setLength(0);
          buffer.setLength(0);
        }
      }
      reader.close();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }"
20,2925,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.solr.search.function,org.apache.solr.search.function.FileFloatSource,,getFloats,,BufferedReader r = new BufferedReader(new InputStreamReader(is));,,226,226,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java#L226,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/core/src/java/org/apache/solr/search/function/FileFloatSource.java,,close,"private static float[] getFloats(FileFloatSource ffs, IndexReader reader) {
    float[] vals = new float[reader.maxDoc()];
    if (ffs.defVal != 0) {
      Arrays.fill(vals, ffs.defVal);
    }
    InputStream is;
    String fname = ""external_"" + ffs.field.getName();
    try {
      is = VersionedFile.getLatestFile(ffs.dataDir, fname);
    } catch (IOException e) {
      // log, use defaults
      SolrCore.log.error(""Error opening external value source file: "" +e);
      return vals;
    }

    BufferedReader r = new BufferedReader(new InputStreamReader(is));

    String idName = ffs.keyField.getName();
    FieldType idType = ffs.keyField.getType();

    // warning: lucene's termEnum.skipTo() is not optimized... it simply does a next()
    // because of this, simply ask the reader for a new termEnum rather than
    // trying to use skipTo()

    List<String> notFound = new ArrayList<String>();
    int notFoundCount=0;
    int otherErrors=0;

    char delimiter='=';

    BytesRef internalKey = new BytesRef();

    try {
      TermsEnum termsEnum = MultiFields.getTerms(reader, idName).iterator(null);
      DocsEnum docsEnum = null;

      // removing deleted docs shouldn't matter
      // final Bits liveDocs = MultiFields.getLiveDocs(reader);

      for (String line; (line=r.readLine())!=null;) {
        int delimIndex = line.lastIndexOf(delimiter);
        if (delimIndex < 0) continue;

        int endIndex = line.length();
        String key = line.substring(0, delimIndex);
        String val = line.substring(delimIndex+1, endIndex);

        idType.readableToIndexed(key, internalKey);

        float fval;
        try {
          fval=Float.parseFloat(val);
        } catch (Exception e) {
          if (++otherErrors<=10) {
            SolrCore.log.error( ""Error loading external value source + fileName + "" + e
              + (otherErrors<10 ? """" : ""\tSkipping future errors for this file."")
            );
          }
          continue;  // go to next line in file.. leave values as default.
        }

        if (!termsEnum.seekExact(internalKey, false)) {
          if (notFoundCount<10) {  // collect first 10 not found for logging
            notFound.add(key);
          }
          notFoundCount++;
          continue;
        }

        docsEnum = termsEnum.docs(null, docsEnum, false);
        int doc;
        while ((doc = docsEnum.nextDoc()) != DocsEnum.NO_MORE_DOCS) {
          vals[doc] = fval;
        }
      }

    } catch (IOException e) {
      // log, use defaults
      SolrCore.log.error(""Error loading external value source: "" +e);
    } finally {
      // swallow exceptions on close so we don't override any
      // exceptions that happened in the loop
      try{r.close();}catch(Exception e){}
    }

    SolrCore.log.info(""Loaded external value source "" + fname
      + (notFoundCount==0 ? """" : "" :""+notFoundCount+"" missing keys ""+notFound)
    );

    return vals;
  }"
21,2935,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.solr.handler.dataimport,org.apache.solr.handler.dataimport.FieldReaderDataSource,,getReader,,InputStreamReader,"InputStreamReader,blob,getBinaryStream",109,109,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FieldReaderDataSource.java#L109,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FieldReaderDataSource.java,,close,"private Reader getReader(Blob blob)
          throws SQLException, UnsupportedEncodingException {
    if (encoding == null) {
      return (new InputStreamReader(blob.getBinaryStream()));
    } else {
      return (new InputStreamReader(blob.getBinaryStream(), encoding));
    }
  }"
22,2947,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.benchmark.quality.trec,org.apache.lucene.benchmark.quality.trec.QueryDriver,,main,,PrintWriter,"PrintWriter,SubmissionReport,args",54,54,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java#L54,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver.java,,unknown,"public static void main(String[] args) throws Exception {
    if (args.length < 4 || args.length > 5) {
      System.err.println(""Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]"");
      System.err.println(""topicsFile: input file containing queries"");
      System.err.println(""qrelsFile: input file containing relevance judgements"");
      System.err.println(""submissionFile: output submission file for trec_eval"");
      System.err.println(""indexDir: index directory"");
      System.err.println(""querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:"");
      System.err.println(""\texample: TD (query on Title + Description). The default is T (title only)"");
      System.exit(1);
    }
    
    File topicsFile = new File(args[0]);
    File qrelsFile = new File(args[1]);
    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), ""lucene"");
    FSDirectory dir = FSDirectory.open(new File(args[3]));
    String fieldSpec = args.length == 5 ? args[4] : ""T""; // default to Title-only if not specified.
    IndexReader reader = IndexReader.open(dir);
    IndexSearcher searcher = new IndexSearcher(reader);

    int maxResults = 1000;
    String docNameField = ""docname"";

    PrintWriter logger = new PrintWriter(System.out, true);

    // use trec utilities to read trec topics into quality queries
    TrecTopicsReader qReader = new TrecTopicsReader();
    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));

    // prepare judge, with trec utilities that read from a QRels file
    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));

    // validate topics & judgments match each other
    judge.validateData(qqs, logger);

    Set<String> fieldSet = new HashSet<String>();
    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(""title"");
    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(""description"");
    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(""narrative"");
    
    // set the parsing of quality queries into Lucene queries.
    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), ""body"");

    // run the benchmark
    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);
    qrun.setMaxResults(maxResults);
    QualityStats stats[] = qrun.execute(judge, submitLog, logger);

    // print an avarage sum of the results
    QualityStats avg = QualityStats.average(stats);
    avg.log(""SUMMARY"", 2, logger, ""  "");
    reader.close();
    dir.close();
  }"
23,2985,lucene-solr,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.lucene.benchmark.utils,org.apache.lucene.benchmark.utils.ExtractWikipedia,,create,,FileWriter,"FileWriter,f",84,84,close,https://github.com/apache/lucene-solr/tree/c0600cc6dc84d20ab47cc321cd0e893a11c0f303//modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java#L84,https://github.com/apache/lucene-solr/tree/3291ef884d26e3f8cb43707f2acdf674f3e51c01//modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractWikipedia.java,,unknown,"public void create(String id, String title, String time, String body) {

    File d = directory(count++, null);
    d.mkdirs();
    File f = new File(d, id + "".txt"");

    StringBuilder contents = new StringBuilder();

    contents.append(time);
    contents.append(""\n\n"");
    contents.append(title);
    contents.append(""\n\n"");
    contents.append(body);
    contents.append(""\n"");

    try {
      FileWriter writer = new FileWriter(f);
      writer.write(contents.toString());
      writer.close();
    } catch (IOException ioe) {
      throw new RuntimeException(ioe);
    }

  }"
24,11431,commons-lang,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.commons.lang3,org.apache.commons.lang3.StringUtils,,toString,,String,"String,String,bytes,bytes,charsetName,charsetName,null",7101,7101,close,https://github.com/apache/commons-lang/tree/bc255ccf5c239666ab54e5a31720d3f482ae78eb//src/main/java/org/apache/commons/lang3/StringUtils.java#L7101,https://github.com/apache/commons-lang/tree/551101299da7f75ea5478db1a6bc194963e0ac34//src/main/java/org/apache/commons/lang3/StringUtils.java,,close,"public static String toString(byte[] bytes, String charsetName) throws UnsupportedEncodingException {
        return charsetName == null ? new String(bytes) : new String(bytes, charsetName);
    }"
25,9689,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.types.selectors,org.apache.tools.ant.types.selectors.ContainsSelector,,isSelected,,BufferedReader,"BufferedReader,InputStreamReader,in,r,getInputStream",192,192,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/types/selectors/ContainsSelector.java#L192,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/types/selectors/ContainsSelector.java,,close,"public boolean isSelected(File basedir, String filename, File file) {
        return isSelected(new FileResource(file));
    }"
26,9694,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.SQLExec$Transaction,,runTransaction,,reader = (encoding == null) ? new InputStreamReader(is),,1051,1051,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/SQLExec.java#L1051,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/SQLExec.java,,close,"private void runTransaction(PrintStream out)
            throws IOException, SQLException {
            if (tSqlCommand.length() != 0) {
                log(""Executing commands"", Project.MSG_INFO);
                runStatements(new StringReader(tSqlCommand), out);
            }

            if (tSrcResource != null) {
                log(""Executing resource: "" + tSrcResource.toString(),
                    Project.MSG_INFO);
                InputStream is = null;
                Reader reader = null;
                try {
                    is = tSrcResource.getInputStream();
                    reader = (encoding == null) ? new InputStreamReader(is)
                        : new InputStreamReader(is, encoding);
                    runStatements(reader, out);
                } finally {
                    FileUtils.close(is);
                    FileUtils.close(reader);
                }
            }
        }"
27,9712,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.Jar,,filesetManifest,,InputStreamReader,"InputStreamReader,is,isr",715,715,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/Jar.java#L715,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/Jar.java,,close,"private void filesetManifest(File file, InputStream is) throws IOException {
        if (manifestFile != null && manifestFile.equals(file)) {
            // If this is the same name specified in 'manifest', this
            // is the manifest to use
            log(""Found manifest "" + file, Project.MSG_VERBOSE);
            try {
                if (is != null) {
                    InputStreamReader isr;
                    if (manifestEncoding == null) {
                        isr = new InputStreamReader(is);
                    } else {
                        isr = new InputStreamReader(is, manifestEncoding);
                    }
                    manifest = getManifest(isr);
                } else {
                    manifest = getManifest(file);
                }
            } catch (UnsupportedEncodingException e) {
                throw new BuildException(""Unsupported encoding while reading ""
                    + ""manifest: "" + e.getMessage(), e);
            }
        } else if (filesetManifestConfig != null
                    && !filesetManifestConfig.getValue().equals(""skip"")) {
            // we add this to our group of fileset manifests
            logWhenWriting(""Found manifest to merge in file "" + file,
                           Project.MSG_VERBOSE);

            try {
                Manifest newManifest = null;
                if (is != null) {
                    InputStreamReader isr;
                    if (manifestEncoding == null) {
                        isr = new InputStreamReader(is);
                    } else {
                        isr = new InputStreamReader(is, manifestEncoding);
                    }
                    newManifest = getManifest(isr);
                } else {
                    newManifest = getManifest(file);
                }

                if (filesetManifest == null) {
                    filesetManifest = newManifest;
                } else {
                    filesetManifest.merge(newManifest, false, mergeClassPaths);
                }
            } catch (UnsupportedEncodingException e) {
                throw new BuildException(""Unsupported encoding while reading ""
                    + ""manifest: "" + e.getMessage(), e);
            } catch (ManifestException e) {
                log(""Manifest in file "" + file + "" is invalid: ""
                    + e.getMessage(), Project.MSG_ERR);
                throw new BuildException(""Invalid Manifest"", e, getLocation());
            }
        } else {
            // assuming 'skip' otherwise
            // don't warn if skip has been requested explicitly, warn if user
            // didn't set the attribute

            // Hide warning also as it makes no sense since
            // the filesetmanifest attribute itself has been
            // hidden

            //int logLevel = filesetManifestConfig == null ?
            //    Project.MSG_WARN : Project.MSG_VERBOSE;
            //log(""File "" + file
            //    + "" includes a META-INF/MANIFEST.MF which will be ignored. ""
            //    + ""To include this file, set filesetManifest to a value other ""
            //    + ""than 'skip'."", logLevel);
        }
    }"
28,9715,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.types.resources,org.apache.tools.ant.types.resources.ResourceList,,read,,InputStreamReader,"InputStreamReader,bis,input",190,190,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/types/resources/ResourceList.java#L190,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/types/resources/ResourceList.java,,unknown,"private ResourceCollection read(Resource r) {
        BufferedInputStream bis = null;
        try {
            bis = new BufferedInputStream(r.getInputStream());
            Reader input = null;
            if (encoding == null) {
                input = new InputStreamReader(bis);
            } else {
                input = new InputStreamReader(bis, encoding);
            }
            ChainReaderHelper crh = new ChainReaderHelper();
            crh.setPrimaryReader(input);
            crh.setFilterChains(filterChains);
            crh.setProject(getProject());
            BufferedReader reader = new BufferedReader(crh.getAssembledReader());

            Union streamResources = new Union();
            streamResources.setCache(true);

            String line = null;
            while ((line = reader.readLine()) != null) {
                streamResources.add(parse(line));
            }

            return streamResources;
        } catch (final IOException ioe) {
            throw new BuildException(""Unable to read resource "" + r.getName()
                                     + "": "" + ioe, ioe, getLocation());
        } finally {
            FileUtils.close(bis);
        }
    }"
29,9716,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.StyleTest,,getFileString,,FileReader,"FileReader,filename,getProject,r,resolveFile",188,188,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/tests/junit/org/apache/tools/ant/taskdefs/StyleTest.java#L188,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/tests/junit/org/apache/tools/ant/taskdefs/StyleTest.java,,unknown,"private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.readFully(r);
        }
        finally {
            FileUtils.close(r);
        }
    }"
30,9725,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.CVSPassTest,,readFile,,BufferedReader,"BufferedReader,FileReader,f,reader",108,108,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/tests/junit/org/apache/tools/ant/taskdefs/CVSPassTest.java#L108,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/tests/junit/org/apache/tools/ant/taskdefs/CVSPassTest.java,,unknown,"private String readFile(File f) throws Exception {
        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader(f));

            StringBuffer buf = new StringBuffer();
            String line=null;
            while((line=reader.readLine())!=null){
                buf.append(line + EOL);
            }
            return buf.toString();
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    }"
31,9726,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.util,org.apache.tools.ant.util.ScriptRunnerBase,,loadResource,,InputStreamReader,"InputStreamReader,in,name,readSource",242,242,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/util/ScriptRunnerBase.java#L242,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/util/ScriptRunnerBase.java,,close,"public void loadResource(Resource sourceResource) {
        String name = sourceResource.toLongString();
        InputStream in = null;
        try {
            in = sourceResource.getInputStream();
        } catch (IOException e) {
            throw new BuildException(""Failed to open "" + name, e);
        } catch (UnsupportedOperationException e) {
            throw new BuildException(
                ""Failed to open "" + name + "" -it is not readable"", e);
        }
        readSource(new InputStreamReader(in), name);
    }"
32,9735,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs.optional,org.apache.tools.ant.taskdefs.optional.ReplaceRegExp,,doReplace,,InputStreamReader,"InputStreamReader,InputStreamReader,encoding,encoding,is,is,null",359,359,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java#L359,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/optional/ReplaceRegExp.java,,close,"protected String doReplace(RegularExpression r,
                               Substitution s,
                               String input,
                               int options) {
        String res = input;
        Regexp regexp = r.getRegexp(getProject());

        if (regexp.matches(input, options)) {
            log(""Found match; substituting"", Project.MSG_DEBUG);
            res = regexp.substitute(input, s.getExpression(getProject()),
                                    options);
        }

        return res;
    }"
33,9743,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.util,org.apache.tools.ant.util.ResourceUtils,,copyResource,,OutputStreamWriter,"OutputStreamWriter,os,osw",432,432,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/util/ResourceUtils.java#L432,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/util/ResourceUtils.java,,unknown,"public static void copyResource(Resource source, Resource dest) throws IOException {
        copyResource(source, dest, null);
    }"
34,9750,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.LoadProperties,,execute,,InputStreamReader,"InputStreamReader,bis,instream",180,180,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/LoadProperties.java#L180,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/LoadProperties.java,,close,"public final void execute() throws BuildException {
        //validation
        if (src == null) {
            throw new BuildException(""A source resource is required."");
        }
        if (!src.isExists()) {
            if (src instanceof JavaResource) {
                // dreaded backwards compatibility
                log(""Unable to find resource "" + src, Project.MSG_WARN);
                return;
            }
            throw new BuildException(""Source resource does not exist: "" + src);
        }
        BufferedInputStream bis = null;
        Reader instream = null;
        ByteArrayInputStream tis = null;

        try {
            bis = new BufferedInputStream(src.getInputStream());
            if (encoding == null) {
                instream = new InputStreamReader(bis);
            } else {
                instream = new InputStreamReader(bis, encoding);
            }
            ChainReaderHelper crh = new ChainReaderHelper();
            crh.setPrimaryReader(instream);
            crh.setFilterChains(filterChains);
            crh.setProject(getProject());
            instream = crh.getAssembledReader();

            String text = crh.readFully(instream);

            if (text != null && text.length() != 0) {
                if (!text.endsWith(""\n"")) {
                    text = text + ""\n"";
                }
                tis = new ByteArrayInputStream(text.getBytes(ResourceUtils.ISO_8859_1));
                final Properties props = new Properties();
                props.load(tis);

                Property propertyTask = new Property();
                propertyTask.bindToOwner(this);
                propertyTask.setPrefix(prefix);
                propertyTask.setPrefixValues(prefixValues);
                propertyTask.addProperties(props);
            }
        } catch (final IOException ioe) {
            throw new BuildException(""Unable to load file: "" + ioe, ioe, getLocation());
        } finally {
            FileUtils.close(bis);
            FileUtils.close(tis);
        }
    }"
35,9764,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs.optional.junit,org.apache.tools.ant.taskdefs.optional.junit.PlainJUnitResultFormatter,,endTestSuite,,out.write(sb.toString().getBytes());,,154,154,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java#L154,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/optional/junit/PlainJUnitResultFormatter.java,,unknown,"public void endTestSuite(JUnitTest suite) throws BuildException {
        StringBuffer sb = new StringBuffer(""Tests run: "");
        sb.append(suite.runCount());
        sb.append("", Failures: "");
        sb.append(suite.failureCount());
        sb.append("", Errors: "");
        sb.append(suite.errorCount());
        sb.append("", Skipped: "");
        sb.append(suite.skipCount());
        sb.append("", Time elapsed: "");
        sb.append(nf.format(suite.getRunTime() / ONE_SECOND));
        sb.append("" sec"");
        sb.append(StringUtils.LINE_SEP);

        // append the err and output streams to the log
        if (systemOutput != null && systemOutput.length() > 0) {
            sb.append(""------------- Standard Output ---------------"")
                .append(StringUtils.LINE_SEP)
                .append(systemOutput)
                .append(""------------- ---------------- ---------------"")
                .append(StringUtils.LINE_SEP);
        }

        if (systemError != null && systemError.length() > 0) {
            sb.append(""------------- Standard Error -----------------"")
                .append(StringUtils.LINE_SEP)
                .append(systemError)
                .append(""------------- ---------------- ---------------"")
                .append(StringUtils.LINE_SEP);
        }

        sb.append(StringUtils.LINE_SEP);

        if (out != null) {
            try {
                out.write(sb.toString().getBytes());
                wri.close();
                out.write(inner.toString().getBytes());
                out.flush();
            } catch (IOException ioex) {
                throw new BuildException(""Unable to write output"", ioex);
            } finally {
                if (out != System.out && out != System.err) {
                    FileUtils.close(out);
                }
            }
        }
    }"
36,9793,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.filters,org.apache.tools.ant.filters.ConcatFilterTest,,read,,FileReader,"FileReader,file",144,144,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/tests/junit/org/apache/tools/ant/filters/ConcatFilterTest.java#L144,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/tests/junit/org/apache/tools/ant/filters/ConcatFilterTest.java,,unknown,"protected String read(String filename) {
        String content = null;
        try {
            File file = FILE_UTILS.resolveFile(getProject().getBaseDir(), filename);
            java.io.FileReader rdr = new java.io.FileReader(file);
            content = FileUtils.readFully(rdr);
            rdr.close();
            rdr = null;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return content;
    }"
37,9801,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.util,org.apache.tools.ant.util.ScriptRunnerBase,,setSrc,,FileReader,"FileReader,file,filename,readSource",200,200,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/util/ScriptRunnerBase.java#L200,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/util/ScriptRunnerBase.java,,close,"public void setSrc(File file) {
        String filename = file.getPath();
        if (!file.exists()) {
            throw new BuildException(""file "" + filename + "" not found."");
        }
        try {
            readSource(new FileReader(file), filename);
        } catch (FileNotFoundException e) {
            //this can only happen if the file got deleted a short moment ago
            throw new BuildException(""file "" + filename + "" not found."");
        }
    }"
38,9810,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs.optional,org.apache.tools.ant.taskdefs.optional.EchoProperties,,execute,,Project,"Project,log,os,MSG_INFO,toString",331,331,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/optional/EchoProperties.java#L331,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/optional/EchoProperties.java,,unknown,"public void execute() throws BuildException {
        if (prefix != null && regex != null) {
            throw new BuildException(""Please specify either prefix""
                    + "" or regex, but not both"", getLocation());
        }
        //copy the properties file
        Hashtable allProps = new Hashtable();

        /* load properties from file if specified, otherwise
        use Ant's properties */
        if (inFile == null && propertySets.size() == 0) {
            // add ant properties
            allProps.putAll(getProject().getProperties());
        } else if (inFile != null) {
            if (inFile.exists() && inFile.isDirectory()) {
                String message = ""srcfile is a directory!"";
                if (failonerror) {
                    throw new BuildException(message, getLocation());
                } else {
                    log(message, Project.MSG_ERR);
                }
                return;
            }

            if (inFile.exists() && !inFile.canRead()) {
                String message = ""Can not read from the specified srcfile!"";
                if (failonerror) {
                    throw new BuildException(message, getLocation());
                } else {
                    log(message, Project.MSG_ERR);
                }
                return;
            }

            FileInputStream in = null;
            try {
                in = new FileInputStream(inFile);
                Properties props = new Properties();
                props.load(in);
                allProps.putAll(props);
            } catch (FileNotFoundException fnfe) {
                String message =
                    ""Could not find file "" + inFile.getAbsolutePath();
                if (failonerror) {
                    throw new BuildException(message, fnfe, getLocation());
                } else {
                    log(message, Project.MSG_WARN);
                }
                return;
            } catch (IOException ioe) {
                String message =
                    ""Could not read file "" + inFile.getAbsolutePath();
                if (failonerror) {
                    throw new BuildException(message, ioe, getLocation());
                } else {
                    log(message, Project.MSG_WARN);
                }
                return;
            } finally {
                FileUtils.close(in);
            }
        }

        Enumeration e = propertySets.elements();
        while (e.hasMoreElements()) {
            PropertySet ps = (PropertySet) e.nextElement();
            allProps.putAll(ps.getProperties());
        }

        OutputStream os = null;
        try {
            if (destfile == null) {
                os = new ByteArrayOutputStream();
                saveProperties(allProps, os);
                log(os.toString(), Project.MSG_INFO);
            } else {
                if (destfile.exists() && destfile.isDirectory()) {
                    String message = ""destfile is a directory!"";
                    if (failonerror) {
                        throw new BuildException(message, getLocation());
                    } else {
                        log(message, Project.MSG_ERR);
                    }
                    return;
                }

                if (destfile.exists() && !destfile.canWrite()) {
                    String message =
                        ""Can not write to the specified destfile!"";
                    if (failonerror) {
                        throw new BuildException(message, getLocation());
                    } else {
                        log(message, Project.MSG_ERR);
                    }
                    return;
                }
                os = new FileOutputStream(this.destfile);
                saveProperties(allProps, os);
            }
        } catch (IOException ioe) {
            if (failonerror) {
                throw new BuildException(ioe, getLocation());
            } else {
                log(ioe.getMessage(), Project.MSG_INFO);
            }
        } finally {
            if (os != null) {
                try {
                    os.close();
                } catch (IOException ex) {
                    //ignore
                }
            }
        }
    }"
39,9888,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.LoadResource,,execute,,InputStreamReader,"InputStreamReader,bis,instream",164,164,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/LoadResource.java#L164,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/LoadResource.java,,close,"public final void execute()
        throws BuildException {
        //validation
        if (src == null) {
            throw new BuildException(""source resource not defined"");
        }
        if (property == null) {
            throw new BuildException(""output property not defined"");
        }
        if (quiet && failOnError) {
            throw new BuildException(""quiet and failonerror cannot both be ""
                                     + ""set to true"");
        }
        if (!src.isExists()) {
            String message = src + "" doesn't exist"";
            if (failOnError) {
                throw new BuildException(message);
            } else {
                log(message, quiet ? Project.MSG_WARN : Project.MSG_ERR);
                return;
            }
        }
        InputStream is = null;
        BufferedInputStream bis = null;
        Reader instream = null;
        log(""loading "" + src + "" into property "" + property,
            Project.MSG_VERBOSE);
        try {
            final long len = src.getSize();
            log(""resource size = ""
                + (len != Resource.UNKNOWN_SIZE ? String.valueOf(len)
                   : ""unknown""), Project.MSG_DEBUG);
            //discard most of really big resources
            final int size = (int) len;
            //open up the resource
            is = src.getInputStream();
            bis = new BufferedInputStream(is);
            if (encoding == null) {
                instream = new InputStreamReader(bis);
            } else {
                instream = new InputStreamReader(bis, encoding);
            }

            String text = """";
            if (size != 0) {
                ChainReaderHelper crh = new ChainReaderHelper();
                if (len != Resource.UNKNOWN_SIZE) {
                    crh.setBufferSize(size);
                }
                crh.setPrimaryReader(instream);
                crh.setFilterChains(filterChains);
                crh.setProject(getProject());
                instream = crh.getAssembledReader();

                text = crh.readFully(instream);
            } else {
                log(""Do not set property "" + property + "" as its length is 0."",
                    quiet ? Project.MSG_VERBOSE : Project.MSG_INFO);
            }

            if (text != null) {
                if (text.length() > 0) {
                    getProject().setNewProperty(property, text);
                    log(""loaded "" + text.length() + "" characters"",
                        Project.MSG_VERBOSE);
                    log(property + "" := "" + text, Project.MSG_DEBUG);
                }
            }

        } catch (final IOException ioe) {
            final String message = ""Unable to load resource: ""
                + ioe.toString();
            if (failOnError) {
                throw new BuildException(message, ioe, getLocation());
            } else {
                log(message, quiet ? Project.MSG_VERBOSE : Project.MSG_ERR);
            }
        } catch (final BuildException be) {
            if (failOnError) {
                throw be;
            } else {
                log(be.getMessage(),
                    quiet ? Project.MSG_VERBOSE : Project.MSG_ERR);
            }
        } finally {
            FileUtils.close(is);
        }
    }"
40,9901,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.types.resources,org.apache.tools.ant.types.resources.Tokens,,getCollection,,InputStreamReader,"InputStreamReader,cat,rdr",66,66,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/types/resources/Tokens.java#L66,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/types/resources/Tokens.java,,close,"protected synchronized Collection<Resource> getCollection() {
        ResourceCollection rc = getResourceCollection();
        if (rc.size() == 0) {
            return Collections.emptySet();
        }
        if (tokenizer == null) {
            tokenizer = new LineTokenizer();
        }
        ConcatResourceInputStream cat = new ConcatResourceInputStream(rc);
        cat.setManagingComponent(this);

        try {
            InputStreamReader rdr = null;
            if (encoding == null) {
                rdr = new InputStreamReader(cat);
            } else {
                try {
                    rdr = new InputStreamReader(cat, encoding);
                } catch (UnsupportedEncodingException e) {
                    throw new BuildException(e);
                }
            }
            ArrayList<Resource> result = new ArrayList<Resource>();
            for (String s = tokenizer.getToken(rdr); s != null; s = tokenizer.getToken(rdr)) {
                StringResource resource = new StringResource(s);
                resource.setProject(getProject());
                result.add(resource);
            }
            return result;
        } catch (IOException e) {
            throw new BuildException(""Error reading tokens"", e);
        } finally {
            FileUtils.close(cat);
        }
    }"
41,9908,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.Jar,,getManifest,,InputStreamReader,"InputStreamReader,fis,isr",311,311,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/main/org/apache/tools/ant/taskdefs/Jar.java#L311,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/Jar.java,,close,"private Manifest getManifest(File manifestFile) {

        Manifest newManifest = null;
        FileInputStream fis = null;
        InputStreamReader isr = null;
        try {
            fis = new FileInputStream(manifestFile);
            if (manifestEncoding == null) {
                isr = new InputStreamReader(fis);
            } else {
                isr = new InputStreamReader(fis, manifestEncoding);
            }
            newManifest = getManifest(isr);
        } catch (UnsupportedEncodingException e) {
            throw new BuildException(""Unsupported encoding while reading manifest: ""
                                     + e.getMessage(), e);
        } catch (IOException e) {
            throw new BuildException(""Unable to read manifest file: ""
                                     + manifestFile
                                     + "" ("" + e.getMessage() + "")"", e);
        } finally {
            FileUtils.close(isr);
        }
        return newManifest;
    }"
42,9910,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.ConcatTest,,getFileString,,FileReader,"FileReader,filename,getProject,r,resolveFile",253,253,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/tests/junit/org/apache/tools/ant/taskdefs/ConcatTest.java#L253,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/tests/junit/org/apache/tools/ant/taskdefs/ConcatTest.java,,unknown,"private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(getProject().resolveFile(filename));
            return  FileUtils.readFully(r);
        }
        finally {
            FileUtils.close(r);
        }

    }"
43,9947,ant,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tools.ant.filters,org.apache.tools.ant.filters.DynamicFilterTest,,getFileString,,FILE_UTILS,"FILE_UTILS,FileReader,filename,getProject,r,getBaseDir,resolveFile",60,60,close,https://github.com/apache/ant/tree/c92f8f160a3197e8f3df74ceb588f581d08404c0//src/tests/junit/org/apache/tools/ant/filters/DynamicFilterTest.java#L60,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/tests/junit/org/apache/tools/ant/filters/DynamicFilterTest.java,,unknown,"private String getFileString(String filename)
        throws IOException
    {
        Reader r = null;
        try {
            r = new FileReader(FILE_UTILS.resolveFile(getProject().getBaseDir(), filename));
            return  FileUtils.readFully(r);
        }
        finally {
            FileUtils.close(r);
        }

    }"
44,9825,ant,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.tools.tar,org.apache.tools.tar.TarInputStream,,getNextEntry,,String,"String,buf,length,longName,append",309,309,close,https://github.com/apache/ant/tree/995856afcb7f8168e970e39849bdfc9264f98c84//src/main/org/apache/tools/tar/TarInputStream.java#L309,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/tar/TarInputStream.java,,unknown,"public TarEntry getNextEntry() throws IOException {
        if (hasHitEOF) {
            return null;
        }

        if (currEntry != null) {
            long numToSkip = entrySize - entryOffset;

            if (debug) {
                System.err.println(""TarInputStream: SKIP currENTRY '""
                        + currEntry.getName() + ""' SZ ""
                        + entrySize + "" OFF ""
                        + entryOffset + ""  skipping ""
                        + numToSkip + "" bytes"");
            }

            while (numToSkip > 0) {
                long skipped = skip(numToSkip);
                if (skipped <= 0) {
                    throw new RuntimeException(""failed to skip current tar""
                                               + "" entry"");
                }
                numToSkip -= skipped;
            }

            readBuf = null;
        }

        byte[] headerBuf = getRecord();

        if (hasHitEOF) {
            currEntry = null;
            return null;
        }

        try {
            currEntry = new TarEntry(headerBuf, encoding);
        } catch (IllegalArgumentException e) {
            IOException ioe = new IOException(""Error detected parsing the header"");
            ioe.initCause(e);
            throw ioe;
        }
        if (debug) {
            System.err.println(""TarInputStream: SET CURRENTRY '""
                               + currEntry.getName()
                               + ""' size = ""
                               + currEntry.getSize());
        }

        entryOffset = 0;
        entrySize = currEntry.getSize();

        if (currEntry.isGNULongNameEntry()) {
            // read in the name
            StringBuffer longName = new StringBuffer();
            byte[] buf = new byte[SMALL_BUFFER_SIZE];
            int length = 0;
            while ((length = read(buf)) >= 0) {
                longName.append(new String(buf, 0, length)); // TODO default charset?
            }
            getNextEntry();
            if (currEntry == null) {
                // Bugzilla: 40334
                // Malformed tar file - long entry name not followed by entry
                return null;
            }
            // remove trailing null terminator
            if (longName.length() > 0
                && longName.charAt(longName.length() - 1) == 0) {
                longName.deleteCharAt(longName.length() - 1);
            }
            currEntry.setName(longName.toString());
        }

        if (currEntry.isPaxHeader()){ // Process Pax headers
            paxHeaders();
        }

        if (currEntry.isGNUSparse()){ // Process sparse files
            readGNUSparse();
        }

        // If the size of the next element in the archive has changed
        // due to a new size being reported in the posix header
        // information, we update entrySize here so that it contains
        // the correct value.
        entrySize = currEntry.getSize();
        return currEntry;
    }"
45,9818,ant,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.tools.ant.taskdefs,org.apache.tools.ant.taskdefs.Execute$VmsCommandLauncher,,createCommandFile,,BufferedWriter,"BufferedWriter,FileWriter,out,script",1217,1217,close,https://github.com/apache/ant/tree/02d9f46c2941a8ae665322e49d4d12ae7343ab3b//src/main/org/apache/tools/ant/taskdefs/Execute.java#L1217,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/ant/taskdefs/Execute.java,,unknown,"private File createCommandFile(String[] cmd, String[] env)
            throws IOException {
            File script = FILE_UTILS.createTempFile(""ANT"", "".COM"", null, true, true);
            BufferedWriter out = null;
            try {
                out = new BufferedWriter(new FileWriter(script));

                // add the environment as logicals to the DCL script
                if (env != null) {
                    int eqIndex;
                    for (int i = 0; i < env.length; i++) {
                        eqIndex = env[i].indexOf('=');
                        if (eqIndex != -1) {
                            out.write(""$ DEFINE/NOLOG "");
                            out.write(env[i].substring(0, eqIndex));
                            out.write("" \"""");
                            out.write(env[i].substring(eqIndex + 1));
                            out.write('\""');
                            out.newLine();
                        }
                    }
                }
                out.write(""$ "" + cmd[0]);
                for (int i = 1; i < cmd.length; i++) {
                    out.write("" -"");
                    out.newLine();
                    out.write(cmd[i]);
                }
            } finally {
                FileUtils.close(out);
            }
            return script;
        }"
46,9867,ant,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.tools.tar,org.apache.tools.tar.TarOutputStream,,putNextEntry,,entry,"entry,write,getBytes,getName",185,185,close,https://github.com/apache/ant/tree/02d9f46c2941a8ae665322e49d4d12ae7343ab3b//src/main/org/apache/tools/tar/TarOutputStream.java#L185,https://github.com/apache/ant/tree/7a7307bc999be080c99412b1c67d111af1366ef7//src/main/org/apache/tools/tar/TarOutputStream.java,,unknown,"public void putNextEntry(TarEntry entry) throws IOException {
        if (entry.getName().length() >= TarConstants.NAMELEN) {

            if (longFileMode == LONGFILE_GNU) {
                // create a TarEntry for the LongLink, the contents
                // of which are the entry's name
                TarEntry longLinkEntry = new TarEntry(TarConstants.GNU_LONGLINK,
                                                      TarConstants.LF_GNUTYPE_LONGNAME);

                longLinkEntry.setSize(entry.getName().length() + 1);
                putNextEntry(longLinkEntry);
                write(entry.getName().getBytes());
                write(0);
                closeEntry();
            } else if (longFileMode != LONGFILE_TRUNCATE) {
                throw new RuntimeException(""file name '"" + entry.getName()
                                             + ""' is too long ( > ""
                                             + TarConstants.NAMELEN + "" bytes)"");
            }
        }

        entry.writeEntryHeader(recordBuf);
        buffer.writeRecord(recordBuf);

        currBytes = 0;

        if (entry.isDirectory()) {
            currSize = 0;
        } else {
            currSize = entry.getSize();
        }
        currName = entry.getName();
    }"
47,9967,maven,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.maven.lifecycle.internal,org.apache.maven.lifecycle.internal.ThreadOutputMuxerTest,,testMultiThreaded,,PrintStream,"PrintStream,byteArrayOutputStream",91,91,close,https://github.com/apache/maven/tree/93d07bdf9967303e8ff41b8f8030c72ecf59ce1c//maven-core/src/test/java/org/apache/maven/lifecycle/internal/ThreadOutputMuxerTest.java#L91,https://github.com/apache/maven/tree/a7dddcb87626fec256f1b8ccbe957f94cdf401e4//maven-core/src/test/java/org/apache/maven/lifecycle/internal/ThreadOutputMuxerTest.java,,unknown,"public void testMultiThreaded()
        throws Exception
    {
        ProjectBuildList projectBuildList = getProjectBuildList();

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        PrintStream systemOut = new PrintStream( byteArrayOutputStream );
        final ThreadOutputMuxer threadOutputMuxer = new ThreadOutputMuxer( projectBuildList, systemOut );

        final List<String> stringList =
            Arrays.asList( ""Thinkin"", ""of"", ""a"", ""master"", ""plan"", ""Cuz"", ""ain’t"", ""nuthin"", ""but"", ""sweat"", ""inside"",
                           ""my"", ""hand"" );
        Iterator<String> lyrics = stringList.iterator();

        ExecutorService executor = Executors.newFixedThreadPool( 10 );
        CompletionService<ProjectSegment> service = new ExecutorCompletionService<ProjectSegment>( executor );

        List<Future<ProjectSegment>> futures = new ArrayList<Future<ProjectSegment>>();
        for ( ProjectSegment projectBuild : projectBuildList )
        {
            final Future<ProjectSegment> buildFuture =
                service.submit( new Outputter( threadOutputMuxer, projectBuild, lyrics.next() ) );
            futures.add( buildFuture );
        }

        for ( Future<ProjectSegment> future : futures )
        {
            future.get();
        }
        int expectedLength = 0;
        for ( int i = 0; i < projectBuildList.size(); i++ )
        {
            expectedLength += stringList.get( i ).length();
        }

        threadOutputMuxer.close();
        final byte[] bytes = byteArrayOutputStream.toByteArray();
        String result = new String( bytes );
        assertEquals( result, expectedLength, bytes.length );


    }"
48,9995,maven,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.maven.lifecycle.internal,org.apache.maven.lifecycle.internal.ThreadOutputMuxerTest,,testSingleThreaded,,PrintStream,"PrintStream,byteArrayOutputStream",65,65,close,https://github.com/apache/maven/tree/93d07bdf9967303e8ff41b8f8030c72ecf59ce1c//maven-core/src/test/java/org/apache/maven/lifecycle/internal/ThreadOutputMuxerTest.java#L65,https://github.com/apache/maven/tree/a7dddcb87626fec256f1b8ccbe957f94cdf401e4//maven-core/src/test/java/org/apache/maven/lifecycle/internal/ThreadOutputMuxerTest.java,,unknown,"public void testSingleThreaded()
        throws Exception
    {
        ProjectBuildList src = getProjectBuildList();
        ProjectBuildList projectBuildList =
            new ProjectBuildList( Arrays.asList( src.get( 0 ), src.get( 1 ), src.get( 2 ) ) );

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        PrintStream systemOut = new PrintStream( byteArrayOutputStream );
        ThreadOutputMuxer threadOutputMuxer = new ThreadOutputMuxer( projectBuildList, systemOut );

        threadOutputMuxer.associateThreadWithProjectSegment( projectBuildList.get( 0 ) );
        System.out.print( paid );  // No, this does not print to system.out. It's part of the test
        assertEquals( paid.length(), byteArrayOutputStream.size() );
        threadOutputMuxer.associateThreadWithProjectSegment( projectBuildList.get( 1 ) );
        System.out.print( in );  // No, this does not print to system.out. It's part of the test
        assertEquals( paid.length(), byteArrayOutputStream.size() );
        threadOutputMuxer.associateThreadWithProjectSegment( projectBuildList.get( 2 ) );
        System.out.print( full ); // No, this does not print to system.out. It's part of the test
        assertEquals( paid.length(), byteArrayOutputStream.size() );

        threadOutputMuxer.setThisModuleComplete( projectBuildList.get( 0 ) );
        threadOutputMuxer.setThisModuleComplete( projectBuildList.get( 1 ) );
        threadOutputMuxer.setThisModuleComplete( projectBuildList.get( 2 ) );
        threadOutputMuxer.close();
        assertEquals( ( paid + in + full ).length(), byteArrayOutputStream.size() );
    }"
49,1022,tomcat,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.catalina.util,org.apache.catalina.util.URLEncoder,,encode,,OutputStreamWriter,"OutputStreamWriter,buf,writer",69,69,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/util/URLEncoder.java#L69,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/util/URLEncoder.java,,close,"public String encode( String path ) {
        int maxBytesPerChar = 10;
        StringBuilder rewrittenPath = new StringBuilder(path.length());
        ByteArrayOutputStream buf = new ByteArrayOutputStream(maxBytesPerChar);
        OutputStreamWriter writer = null;
        try {
            writer = new OutputStreamWriter(buf, ""UTF8"");
        } catch (Exception e) {
            e.printStackTrace();
            writer = new OutputStreamWriter(buf);
        }

        for (int i = 0; i < path.length(); i++) {
            int c = path.charAt(i);
            if (safeCharacters.get(c)) {
                rewrittenPath.append((char)c);
            } else {
                // convert to external encoding before hex conversion
                try {
                    writer.write((char)c);
                    writer.flush();
                } catch(IOException e) {
                    buf.reset();
                    continue;
                }
                byte[] ba = buf.toByteArray();
                for (int j = 0; j < ba.length; j++) {
                    // Converting each byte in the buffer
                    byte toEncode = ba[j];
                    rewrittenPath.append('%');
                    int low = toEncode & 0x0f;
                    int high = (toEncode & 0xf0) >> 4;
                    rewrittenPath.append(hexadecimal[high]);
                    rewrittenPath.append(hexadecimal[low]);
                }
                buf.reset();
            }
        }
        return rewrittenPath.toString();
    }"
50,1038,tomcat,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.catalina.connector,org.apache.catalina.connector.Request,,parseParts,,postSize += name.getBytes().length;,,2690,2690,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/connector/Request.java#L2690,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/connector/Request.java,,close,"private void parseParts(boolean explicit) {

        // Return immediately if the parts have already been parsed
        if (parts != null || partsParseException != null) {
            return;
        }

        MultipartConfigElement mce = getWrapper().getMultipartConfigElement();

        if (mce == null) {
            if(getContext().getAllowCasualMultipartParsing()) {
                mce = new MultipartConfigElement(null,
                                                 connector.getMaxPostSize(),
                                                 connector.getMaxPostSize(),
                                                 connector.getMaxPostSize());
            } else {
                if (explicit) {
                    partsParseException = new IllegalStateException(
                            sm.getString(""coyoteRequest.noMultipartConfig""));
                    return;
                } else {
                    parts = Collections.emptyList();
                    return;
                }
            }
        }

        Parameters parameters = coyoteRequest.getParameters();
        parameters.setLimit(getConnector().getMaxParameterCount());

        boolean success = false;
        try {
            File location;
            String locationStr = mce.getLocation();
            if (locationStr == null || locationStr.length() == 0) {
                location = ((File) context.getServletContext().getAttribute(
                        ServletContext.TEMPDIR));
            } else {
                // If relative, it is relative to TEMPDIR
                location = new File(locationStr);
                if (!location.isAbsolute()) {
                    location = new File(
                            (File) context.getServletContext().getAttribute(
                                        ServletContext.TEMPDIR),
                                        locationStr).getAbsoluteFile();
                }
            }

            if (!location.isDirectory()) {
                partsParseException = new IOException(
                        sm.getString(""coyoteRequest.uploadLocationInvalid"",
                                location));
                return;
            }


            // Create a new file upload handler
            DiskFileItemFactory factory = new DiskFileItemFactory();
            try {
                factory.setRepository(location.getCanonicalFile());
            } catch (IOException ioe) {
                partsParseException = ioe;
                return;
            }
            factory.setSizeThreshold(mce.getFileSizeThreshold());

            ServletFileUpload upload = new ServletFileUpload();
            upload.setFileItemFactory(factory);
            upload.setFileSizeMax(mce.getMaxFileSize());
            upload.setSizeMax(mce.getMaxRequestSize());

            parts = new ArrayList<>();
            try {
                List<FileItem> items =
                        upload.parseRequest(new ServletRequestContext(this));
                int maxPostSize = getConnector().getMaxPostSize();
                int postSize = 0;
                String enc = getCharacterEncoding();
                Charset charset = null;
                if (enc != null) {
                    try {
                        charset = B2CConverter.getCharset(enc);
                    } catch (UnsupportedEncodingException e) {
                        // Ignore
                    }
                }
                for (FileItem item : items) {
                    ApplicationPart part = new ApplicationPart(item, location);
                    parts.add(part);
                    if (part.getSubmittedFileName() == null) {
                        String name = part.getName();
                        String value = null;
                        try {
                            String encoding = parameters.getEncoding();
                            if (encoding == null) {
                                if (enc == null) {
                                    encoding = Parameters.DEFAULT_ENCODING;
                                } else {
                                    encoding = enc;
                                }
                            }
                            value = part.getString(encoding);
                        } catch (UnsupportedEncodingException uee) {
                            try {
                                value = part.getString(Parameters.DEFAULT_ENCODING);
                            } catch (UnsupportedEncodingException e) {
                                // Should not be possible
                            }
                        }
                        if (maxPostSize > 0) {
                            // Have to calculate equivalent size. Not completely
                            // accurate but close enough.
                            if (charset == null) {
                                // Name length
                                postSize += name.getBytes().length;
                            } else {
                                postSize += name.getBytes(charset).length;
                            }
                            if (value != null) {
                                // Equals sign
                                postSize++;
                                // Value length
                                postSize += part.getSize();
                            }
                            // Value separator
                            postSize++;
                            if (postSize > maxPostSize) {
                                throw new IllegalStateException(sm.getString(
                                        ""coyoteRequest.maxPostSizeExceeded""));
                            }
                        }
                        parameters.addParameter(name, value);
                    }
                }

                success = true;
            } catch (InvalidContentTypeException e) {
                partsParseException = new ServletException(e);
            } catch (FileUploadBase.SizeException e) {
                checkSwallowInput();
                partsParseException = new IllegalStateException(e);
            } catch (FileUploadException e) {
                partsParseException = new IOException(e);
            } catch (IllegalStateException e) {
                checkSwallowInput();
                partsParseException = e;
            }
        } finally {
            if (partsParseException != null || !success) {
                parameters.setParseFailed(true);
            }
        }
    }"
51,1226,tomcat,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.tomcat.util.buf,org.apache.tomcat.util.buf.UDecoder,,URLDecode,,String,"String,bytes,ox",388,388,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/tomcat/util/buf/UDecoder.java#L388,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/tomcat/util/buf/UDecoder.java,,close,"public static String URLDecode(String str) {
        return URLDecode(str, null);
    }"
52,1637,tomcat,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.catalina.core,org.apache.catalina.core.StandardContext,,getDeploymentDescriptor,,br = new BufferedReader(new InputStreamReader(stream));,,6069,6069,close,https://github.com/apache/tomcat/tree/411e4cc9b12bb4fd5aadfbb585db9b40afc90d3d//java/org/apache/catalina/core/StandardContext.java#L6069,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/core/StandardContext.java,,unknown,"public String getDeploymentDescriptor() {

        InputStream stream = null;
        ServletContext servletContext = getServletContext();
        if (servletContext != null) {
            stream = servletContext.getResourceAsStream(
                org.apache.catalina.startup.Constants.ApplicationWebXml);
        }
        if (stream == null) {
            return """";
        }
        StringBuilder sb = new StringBuilder();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(stream));
            String strRead = """";
            while (strRead != null) {
                sb.append(strRead);
                strRead = br.readLine();
            }
        } catch (IOException e) {
            return """";
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ioe) {/*Ignore*/}
            }
        }

        return sb.toString();
    }"
53,1294,tomcat,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.catalina.util,org.apache.catalina.util.Base64,,encode,,String,"String,encodedData,result",181,181,close,https://github.com/apache/tomcat/tree/3787242a83ee5555c79fd2e4c6b6952e9195ed8b//java/org/apache/catalina/util/Base64.java#L181,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/util/Base64.java,,unknown,"public static String encode(byte[] binaryData) {
        int      lengthDataBits    = binaryData.length*EIGHTBIT;
        int      fewerThan24bits   = lengthDataBits%TWENTYFOURBITGROUP;
        int      numberTriplets    = lengthDataBits/TWENTYFOURBITGROUP;
        byte     encodedData[]     = null;


        if (fewerThan24bits != 0)
        {
            //data not divisible by 24 bit
            encodedData = new byte[ (numberTriplets + 1 ) * 4 ];
        }
        else
        {
            // 16 or 8 bit
            encodedData = new byte[ numberTriplets * 4 ];
        }

        byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;

        int encodedIndex = 0;
        int dataIndex   = 0;
        int i           = 0;
        //log.debug(""number of triplets = "" + numberTriplets);
        for ( i = 0; i<numberTriplets; i++ )
        {
            dataIndex = i*3;
            b1 = binaryData[dataIndex];
            b2 = binaryData[dataIndex + 1];
            b3 = binaryData[dataIndex + 2];

            //log.debug(""b1= "" + b1 +"", b2= "" + b2 + "", b3= "" + b3);

            l  = (byte)(b2 & 0x0f);
            k  = (byte)(b1 & 0x03);

            encodedIndex = i * 4;
            byte val1 = ((b1 & SIGN)==0)?(byte)(b1>>2):(byte)((b1)>>2^0xc0);
            byte val2 = ((b2 & SIGN)==0)?(byte)(b2>>4):(byte)((b2)>>4^0xf0);
            byte val3 = ((b3 & SIGN)==0)?(byte)(b3>>6):(byte)((b3)>>6^0xfc);

            encodedData[encodedIndex]   = lookUpBase64Alphabet[ val1 ];
            //log.debug( ""val2 = "" + val2 );
            //log.debug( ""k4   = "" + (k<<4) );
            //log.debug(  ""vak  = "" + (val2 | (k<<4)) );
            encodedData[encodedIndex+1] =
                lookUpBase64Alphabet[ val2 | ( k<<4 )];
            encodedData[encodedIndex+2] =
                lookUpBase64Alphabet[ (l <<2 ) | val3 ];
            encodedData[encodedIndex+3] = lookUpBase64Alphabet[ b3 & 0x3f ];
        }

        // form integral number of 6-bit groups
        dataIndex    = i*3;
        encodedIndex = i*4;
        if (fewerThan24bits == EIGHTBIT )
        {
            b1 = binaryData[dataIndex];
            k = (byte) ( b1 &0x03 );
            //log.debug(""b1="" + b1);
            //log.debug(""b1<<2 = "" + (b1>>2) );
            byte val1 = ((b1 & SIGN)==0)?(byte)(b1>>2):(byte)((b1)>>2^0xc0);
            encodedData[encodedIndex]     = lookUpBase64Alphabet[ val1 ];
            encodedData[encodedIndex + 1] = lookUpBase64Alphabet[ k<<4 ];
            encodedData[encodedIndex + 2] = PAD;
            encodedData[encodedIndex + 3] = PAD;
        }
        else if (fewerThan24bits == SIXTEENBIT)
        {

            b1 = binaryData[dataIndex];
            b2 = binaryData[dataIndex +1 ];
            l = (byte) (b2 & 0x0f);
            k = (byte) (b1 & 0x03);

            byte val1 = ((b1 & SIGN) == 0)?(byte)(b1>>2):(byte)((b1)>>2^0xc0);
            byte val2 = ((b2 & SIGN) == 0)?(byte)(b2>>4):(byte)((b2)>>4^0xf0);

            encodedData[encodedIndex]     = lookUpBase64Alphabet[ val1 ];
            encodedData[encodedIndex + 1] =
                lookUpBase64Alphabet[ val2 | ( k<<4 )];
            encodedData[encodedIndex + 2] = lookUpBase64Alphabet[ l<<2 ];
            encodedData[encodedIndex + 3] = PAD;
        }

        String result;
        try {
            result = new String(encodedData,
                    B2CConverter.getCharset(""ISO-8859-1""));
        } catch (UnsupportedEncodingException e) {
            // Should never happen but in case it does...
            result = new String(encodedData);
        }
        return result;
    }"
54,1144,tomcat,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.tomcat.buildutil,org.apache.tomcat.buildutil.Txt2Html,,convert,,FileWriter,"FileWriter,PrintWriter,to",130,130,close,https://github.com/apache/tomcat/tree/ad9a49cb08bf004af97cad465bba45d21d112325//java/org/apache/tomcat/buildutil/Txt2Html.java#L130,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/tomcat/buildutil/Txt2Html.java,,close,"private void convert( File from, File to )
        throws IOException
    {
        // Open files:
        BufferedReader in = new BufferedReader( new FileReader( from ) );
        PrintWriter out = new PrintWriter( new FileWriter( to ) );

        // Output header:
        out.println( ""<html><body><pre>"" );

        // Convert, line-by-line:
        String line;
        while( (line = in.readLine()) != null ) {
            StringBuilder result = new StringBuilder();
            int len = line.length();
            for( int i = 0; i < len; i++ ) {
                char c = line.charAt( i );
                switch( c ) {
                    case '&':
                        result.append( ""&amp;"" );
                        break;
                    case '<':
                        result.append( ""&lt;"" );
                        break;
                    default:
                        result.append( c );
                }
            }
            out.println( result.toString() );
        }

        // Output footer:
        out.println( ""</pre></body></html>"" );

        // Close streams:
        out.close();
        in.close();
    }"
55,1410,tomcat,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.catalina.util,org.apache.catalina.util.RequestUtil,,URLDecode,,String,"String,bytes,ox",233,233,close,https://github.com/apache/tomcat/tree/ad9a49cb08bf004af97cad465bba45d21d112325//java/org/apache/catalina/util/RequestUtil.java#L233,https://github.com/apache/tomcat/tree/2b5ab0627098a0b6654afebb914d7c25fd98638d//java/org/apache/catalina/util/RequestUtil.java,,unknown,"public static String URLDecode(String str) {
        return URLDecode(str, null);
    }"
56,9469,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jorphan.io,org.apache.jorphan.io.TextFile,,getText,,FileReader,"FileReader,reader,this",141,141,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/jorphan/org/apache/jorphan/io/TextFile.java#L141,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/jorphan/org/apache/jorphan/io/TextFile.java,,open,"public String getText() {
        String lineEnd = System.getProperty(""line.separator""); //$NON-NLS-1$
        StringBuilder sb = new StringBuilder();
        Reader reader = null;
        BufferedReader br = null;
        try {
            if (encoding == null) {
                reader = new FileReader(this);
            } else {
                reader = new InputStreamReader(new FileInputStream(this), encoding);
            }
            br = new BufferedReader(reader);
            String line = ""NOTNULL""; //$NON-NLS-1$
            while (line != null) {
                line = br.readLine();
                if (line != null) {
                    sb.append(line + lineEnd);
                }
            }
        } catch (IOException ioe) {
            log.error("""", ioe); //$NON-NLS-1$
        } finally {
            JOrphanUtils.closeQuietly(br); // closes reader as well
        }

        return sb.toString();
    }"
57,9472,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.StatGraphVisualizer,,actionPerformed,,writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?,,569,569,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java#L569,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java,,close,"@Override
    public void actionPerformed(ActionEvent event) {
        boolean forceReloadData = false;
        final Object eventSource = event.getSource();
        if (eventSource == displayButton) {
            actionMakeGraph();
        } else if (eventSource == saveGraph) {
            saveGraphToFile = true;
            try {
                ActionRouter.getInstance().getAction(
                        ActionNames.SAVE_GRAPHICS,SaveGraphics.class.getName()).doAction(
                                new ActionEvent(this,event.getID(),ActionNames.SAVE_GRAPHICS));
            } catch (Exception e) {
                log.error(e.getMessage());
            }
        } else if (eventSource == saveTable) {
            JFileChooser chooser = FileDialoger.promptToSaveFile(""statistics.csv"");    //$NON-NLS-1$
            if (chooser == null) {
                return;
            }
            FileWriter writer = null;
            try {
                writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?
                CSVSaveService.saveCSVStats(getAllTableData(),writer,saveHeaders.isSelected() ? COLUMNS : null);
            } catch (FileNotFoundException e) {
                log.warn(e.getMessage());
            } catch (IOException e) {
                log.warn(e.getMessage());
            } finally {
                JOrphanUtils.closeQuietly(writer);
            }
        } else if (eventSource == chooseForeColor) {
            Color color = JColorChooser.showDialog(
                    null,
                    JMeterUtils.getResString(""aggregate_graph_choose_color""), //$NON-NLS-1$
                    colorBarGraph);
            if (color != null) {
                colorForeGraph = color;
            }
        } else if (eventSource == syncWithName) {
            graphTitle.setText(namePanel.getName());
        } else if (eventSource == dynamicGraphSize) {
            // if use dynamic graph size is checked, we disable the dimension fields
            if (dynamicGraphSize.isSelected()) {
                graphWidth.setEnabled(false);
                graphHeight.setEnabled(false);
            } else {
                graphWidth.setEnabled(true);
                graphHeight.setEnabled(true);
            }
        } else if (eventSource == columnSelection) {
            if (columnSelection.isSelected()) {
                columnMatchLabel.setEnabled(true);
                applyFilterBtn.setEnabled(true);
                caseChkBox.setEnabled(true);
                regexpChkBox.setEnabled(true);
            } else {
                columnMatchLabel.setEnabled(false);
                applyFilterBtn.setEnabled(false);
                caseChkBox.setEnabled(false);
                regexpChkBox.setEnabled(false);
                // Force reload data
                forceReloadData = true;
            }
        }
        // Not 'else if' because forceReloadData 
        if (eventSource == applyFilterBtn || forceReloadData) {
            if (columnSelection.isSelected() && columnMatchLabel.getText() != null
                    && columnMatchLabel.getText().length() > 0) {
                pattern = createPattern(columnMatchLabel.getText());
            } else if (forceReloadData) {
                pattern = null;
                matcher = null;
            }
            if (getFile() != null && getFile().length() > 0) {
                clearData();
                FilePanel filePanel = (FilePanel) getFilePanel();
                filePanel.actionPerformed(event);
            }
        } else if (eventSource instanceof JButton) {
            // Changing color for column
            JButton btn = ((JButton) eventSource);
            if (btn.getName() != null) {
                try {
                    BarGraph bar = eltList.get(Integer.parseInt(btn.getName()));
                    Color color = JColorChooser.showDialog(null, bar.getLabel(), bar.getBackColor());
                    if (color != null) {
                        bar.setBackColor(color);
                        btn.setBackground(bar.getBackColor());
                    }
                } catch (NumberFormatException nfe) { } // nothing to do
            }
        }
    }"
58,9475,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.proxy,org.apache.jmeter.protocol.http.proxy.Proxy,,run,,"log.debug(port + ""Initial request: "" + new String(ba));",,180,180,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java#L180,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java,,open,"@Override
    public void run() {
        // Check which HTTPSampler class we should use
        String httpSamplerName = target.getSamplerTypeName();

        HttpRequestHdr request = new HttpRequestHdr(httpSamplerName);
        SampleResult result = null;
        HeaderManager headers = null;
        HTTPSamplerBase sampler = null;
        final boolean isDebug = log.isDebugEnabled();
        if (isDebug) {
            log.debug(port + ""===================================================================="");
        }
        try {
            // Now, parse initial request (in case it is a CONNECT request)
            byte[] ba = request.parse(new BufferedInputStream(clientSocket.getInputStream()));
            if (ba.length == 0) {
                if (isDebug) {
                    log.debug(port + ""Empty request, ignored"");
                }
                throw new JMeterException(); // hack to skip processing
            }
            if (isDebug) {
                log.debug(port + ""Initial request: "" + new String(ba));
            }
            outStreamClient = clientSocket.getOutputStream();

            if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {
                if (isDebug) {
                    log.debug(port + ""Method CONNECT => SSL"");
                }
                // write a OK reponse to browser, to engage SSL exchange
                outStreamClient.write((""HTTP/1.0 200 OK\r\n\r\n"").getBytes(SampleResult.DEFAULT_HTTP_ENCODING)); // $NON-NLS-1$
                outStreamClient.flush();
               // With ssl request, url is host:port (without https:// or path)
                String[] param = request.getUrl().split("":"");  // $NON-NLS-1$
                if (param.length == 2) {
                    if (isDebug) {
                        log.debug(port + ""Start to negotiate SSL connection, host: "" + param[0]);
                    }
                    clientSocket = startSSL(clientSocket, param[0]);
                } else {
                    // Should not happen, but if it does we don't want to continue 
                    log.error(""In SSL request, unable to find host and port in CONNECT request: "" + request.getUrl());
                    throw new JMeterException(); // hack to skip processing
                }
                // Re-parse (now it's the http request over SSL)
                try {
                    ba = request.parse(new BufferedInputStream(clientSocket.getInputStream()));
                } catch (IOException ioe) { // most likely this is because of a certificate error
                    final String url = param.length>0 ?  "" for '""+ param[0] +""'"" : """";
                    log.warn(port + ""Problem with SSL certificate""+url+""? Ensure browser is set to accept the JMeter proxy cert: "" + ioe.getMessage());
                    // won't work: writeErrorToClient(HttpReplyHdr.formInternalError());
                    result = generateErrorResult(result, request, ioe, ""\n**ensure browser is set to accept the JMeter proxy certificate**""); // Generate result (if nec.) and populate it
                    throw new JMeterException(); // hack to skip processing
                }
                if (isDebug) {
                    log.debug(port + ""Reparse: "" + new String(ba));
                }
                if (ba.length == 0) {
                    log.warn(port + ""Empty response to http over SSL. Probably waiting for user to authorize the certificate for "" + request.getUrl());
                    throw new JMeterException(); // hack to skip processing
                }
            }

            SamplerCreator samplerCreator = SAMPLERFACTORY.getSamplerCreator(request, pageEncodings, formEncodings);
            sampler = samplerCreator.createAndPopulateSampler(request, pageEncodings, formEncodings);

            /*
             * Create a Header Manager to ensure that the browsers headers are
             * captured and sent to the server
             */
            headers = request.getHeaderManager();
            sampler.setHeaderManager(headers);

            sampler.threadStarted(); // Needed for HTTPSampler2
            if (isDebug) {
                log.debug(port + ""Execute sample: "" + sampler.getMethod() + "" "" + sampler.getUrl());
            }
            result = sampler.sample();

            // Find the page encoding and possibly encodings for forms in the page
            // in the response from the web server
            String pageEncoding = addPageEncoding(result);
            addFormEncodings(result, pageEncoding);

            writeToClient(result, new BufferedOutputStream(clientSocket.getOutputStream()));
            samplerCreator.postProcessSampler(sampler, result);
        } catch (JMeterException jme) {
            // ignored, already processed
        } catch (UnknownHostException uhe) {
            log.warn(port + ""Server Not Found."", uhe);
            writeErrorToClient(HttpReplyHdr.formServerNotFound());
            result = generateErrorResult(result, request, uhe); // Generate result (if nec.) and populate it
        } catch (IllegalArgumentException e) {
            log.error(port + ""Not implemented (probably used https)"", e);
            writeErrorToClient(HttpReplyHdr.formNotImplemented(""Probably used https instead of http. "" +
                    ""To record https requests, see "" +
                    ""<a href=\""http://jmeter.apache.org/usermanual/component_reference.html#HTTP(S)_Test_Script_Recorder\"">HTTP(S) Test Script Recorder documentation</a>""));
            result = generateErrorResult(result, request, e); // Generate result (if nec.) and populate it
        } catch (Exception e) {
            log.error(port + ""Exception when processing sample"", e);
            writeErrorToClient(HttpReplyHdr.formInternalError());
            result = generateErrorResult(result, request, e); // Generate result (if nec.) and populate it
        } finally {
            if(sampler != null && isDebug) {
                log.debug(port + ""Will deliver sample "" + sampler.getName());
            }
            /*
             * We don't want to store any cookies in the generated test plan
             */
            if (headers != null) {
                headers.removeHeaderNamed(HTTPConstants.HEADER_COOKIE);// Always remove cookies
                headers.removeHeaderNamed(HTTPConstants.HEADER_AUTHORIZATION);// Always remove authorization
                // Remove additional headers
                for(String hdr : HEADERS_TO_REMOVE){
                    headers.removeHeaderNamed(hdr);
                }
            }
            if(result != null) // deliverSampler allows sampler to be null, but result must not be null
            {
                target.deliverSampler(sampler, new TestElement[] { captureHttpHeaders ? headers : null }, result);
            }
            try {
                clientSocket.close();
            } catch (Exception e) {
                log.error(port + ""Failed to close client socket"", e);
            }
            if(sampler != null) {
                sampler.threadFinished(); // Needed for HTTPSampler2
            }
        }
    }"
59,9485,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.control,org.apache.jmeter.protocol.http.control.AuthManager,,save,,FileWriter,"FileWriter,PrintWriter,file,writer",280,280,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java#L280,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java,,open,"public void save(String authFile) throws IOException {
        File file = new File(authFile);
        if (!file.isAbsolute()) {
            file = new File(System.getProperty(""user.dir""),authFile);
        }
        PrintWriter writer = null;
        try {
            writer = new PrintWriter(new FileWriter(file));
            writer.println(""# JMeter generated Authorization file"");
            for (int i = 0; i < getAuthObjects().size(); i++) {
                Authorization auth = (Authorization) getAuthObjects().get(i).getObjectValue();
                writer.println(auth.toString());
            }
            writer.flush();
            writer.close();
        } finally {
            JOrphanUtils.closeQuietly(writer);
        }
    }"
60,9487,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.util.accesslog,org.apache.jmeter.protocol.http.util.accesslog.TCLogParser,,getReader,,BufferedReader,"BufferedReader,FileReader,file",211,211,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java#L211,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java,,open,"private static BufferedReader getReader(File file) throws IOException {
        if (! isGZIP(file)) {
            return new BufferedReader(new FileReader(file));
        }
        GZIPInputStream in = new GZIPInputStream(new FileInputStream(file));
        return new BufferedReader(new InputStreamReader(in));
    }"
61,9489,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.sampler,org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase,,errorResult,,PrintStream,"PrintStream,e,text,printStackTrace",872,872,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java#L872,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java,,open,"protected HTTPSampleResult errorResult(Throwable e, HTTPSampleResult res) {
        res.setSampleLabel(""Error: "" + res.getSampleLabel());
        res.setDataType(SampleResult.TEXT);
        ByteArrayOutputStream text = new ByteArrayOutputStream(200);
        e.printStackTrace(new PrintStream(text));
        res.setResponseData(text.toByteArray());
        res.setResponseCode(NON_HTTP_RESPONSE_CODE+"": ""+e.getClass().getName());
        res.setResponseMessage(NON_HTTP_RESPONSE_MESSAGE+"": ""+e.getMessage());
        res.setSuccessful(false);
        res.setMonitor(this.isMonitor());
        return res;
    }"
62,9494,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.samplers,org.apache.jmeter.samplers.SampleResult,,setResponseData,,response,"response,responseData,getBytes",670,670,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/samplers/SampleResult.java#L670,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/samplers/SampleResult.java,,open,"public void setResponseData(byte[] response) {
        responseDataAsString = null;
        responseData = response == null ? EMPTY_BA : response;
    }"
63,9507,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.util,org.apache.jmeter.util.BeanShellClient,,sendLine,,line,"line,outPipe,getBytes,write",85,85,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/util/BeanShellClient.java#L85,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/util/BeanShellClient.java,,open,"private static void sendLine( String line, OutputStream outPipe )
    throws IOException
    {
        outPipe.write( line.getBytes() ); // TODO - charset?
        outPipe.flush();
    }"
64,9518,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.util,org.apache.jmeter.util.JMeterUtils,,getResourceFileAsText,,BufferedReader,"BufferedReader,InputStreamReader,fileReader,is",614,614,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/util/JMeterUtils.java#L614,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/util/JMeterUtils.java,,open,"public static String getResourceFileAsText(String name) {
        BufferedReader fileReader = null;
        try {
            String lineEnd = System.getProperty(""line.separator""); // $NON-NLS-1$
            InputStream is = JMeterUtils.class.getClassLoader().getResourceAsStream(name);
            if(is != null) {
                fileReader = new BufferedReader(new InputStreamReader(is));
                StringBuilder text = new StringBuilder();
                String line = ""NOTNULL""; // $NON-NLS-1$
                while (line != null) {
                    line = fileReader.readLine();
                    if (line != null) {
                        text.append(line);
                        text.append(lineEnd);
                    }
                }
                // Done by finally block: fileReader.close();
                return text.toString();
            } else {
                return """"; // $NON-NLS-1$                
            }
        } catch (IOException e) {
            return """"; // $NON-NLS-1$
        } finally {
            IOUtils.closeQuietly(fileReader);
        }
    }"
65,9529,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jorphan.logging,org.apache.jorphan.logging.LoggingManager,,makeWriter,,PrintWriter,"PrintWriter,System,wt,out",196,196,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/jorphan/org/apache/jorphan/logging/LoggingManager.java#L196,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/jorphan/org/apache/jorphan/logging/LoggingManager.java,,unknown,"private static Writer makeWriter(String logFile, String propName) {
        // If the name contains at least one set of paired single-quotes, reformat using DateFormat
        final int length = logFile.split(""'"",-1).length;
        if (length > 1 && length %2 == 1){
            try {
                SimpleDateFormat df = new SimpleDateFormat(logFile);
                logFile = df.format(new Date());
            } catch (Exception ignored) {
            }
        }
        Writer wt;
        isWriterSystemOut = false;
        try {
            wt = new FileWriter(logFile);
        } catch (Exception e) {
            System.out.println(propName + ""="" + logFile + "" "" + e.toString());
            System.out.println(""["" + propName + ""-> System.out]"");
            isWriterSystemOut = true;
            wt = new PrintWriter(System.out);
        }
        return wt;
    }"
66,9532,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.functions,org.apache.jmeter.functions.FileRowColContainer,,load,,FileReader,"FileReader,fileName",78,78,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/functions/org/apache/jmeter/functions/FileRowColContainer.java#L78,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/functions/org/apache/jmeter/functions/FileRowColContainer.java,,open,"private void load() throws IOException, FileNotFoundException {

        BufferedReader myBread = null;
        try {
            FileReader fis = new FileReader(fileName);
            myBread = new BufferedReader(fis);
            String line = myBread.readLine();
            /*
             * N.B. Stop reading the file if we get a blank line: This allows
             * for trailing comments in the file
             */
            while (line != null && line.length() > 0) {
                fileData.add(splitLine(line, delimiter));
                line = myBread.readLine();
            }
        } catch (FileNotFoundException e) {
            fileData.clear();
            log.warn(e.toString());
            throw e;
        } catch (IOException e) {
            fileData.clear();
            log.warn(e.toString());
            throw e;
        } finally {
            if (myBread != null) {
                myBread.close();
            }
        }
    }"
67,9534,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.control,org.apache.jmeter.protocol.http.control.AuthManager,,addFile,,BufferedReader,"BufferedReader,FileReader,file,reader",308,308,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java#L308,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java,,open,"public void addFile(String authFile) throws IOException {
        File file = new File(authFile);
        if (!file.isAbsolute()) {
            file = new File(System.getProperty(""user.dir"") + File.separator + authFile);
        }
        if (!file.canRead()) {
            throw new IOException(""The file you specified cannot be read."");
        }

        BufferedReader reader = null;
        boolean ok = true;
        try {
            reader = new BufferedReader(new FileReader(file));
            String line;
            while ((line = reader.readLine()) != null) {
                try {
                    if (line.startsWith(""#"") || JOrphanUtils.isBlank(line)) { //$NON-NLS-1$
                        continue;
                    }
                    StringTokenizer st = new StringTokenizer(line, ""\t""); //$NON-NLS-1$
                    String url = st.nextToken();
                    String user = st.nextToken();
                    String pass = st.nextToken();
                    String domain = """";
                    String realm = """";
                    if (st.hasMoreTokens()){// Allow for old format file without the extra columnns
                        domain = st.nextToken();
                        realm = st.nextToken();
                    }
                    Mechanism mechanism = Mechanism.BASIC_DIGEST;
                    if (st.hasMoreTokens()){// Allow for old format file without mechanism support
                        mechanism = Mechanism.valueOf(st.nextToken());
                    }
                    Authorization auth = new Authorization(url, user, pass, domain, realm, mechanism);
                    getAuthObjects().addItem(auth);
                } catch (NoSuchElementException e) {
                    log.error(""Error parsing auth line: '"" + line + ""'"");
                    ok = false;
                }
            }
        } finally {
            JOrphanUtils.closeQuietly(reader);
        }
        if (!ok){
            JMeterUtils.reportErrorToUser(""One or more errors found when reading the Auth file - see the log file"");
        }
    }"
68,9537,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.assertions,org.apache.jmeter.assertions.HTMLAssertion,,writeOutput,,FileWriter,"FileWriter,false,lFilename,lOutputWriter",200,200,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/components/org/apache/jmeter/assertions/HTMLAssertion.java#L200,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/assertions/HTMLAssertion.java,,open,"private void writeOutput(String inOutput) {
        String lFilename = getFilename();

        // check if filename defined
        if ((lFilename != null) && (!"""".equals(lFilename.trim()))) {
            FileWriter lOutputWriter = null;
            try {

                // open file
                lOutputWriter = new FileWriter(lFilename, false);

                // write to file
                lOutputWriter.write(inOutput);

                // flush
                lOutputWriter.flush();

                if (log.isDebugEnabled()) {
                    log.debug(""writeOutput() -> output successfully written to file "" + lFilename);
                }

            } catch (IOException ex) {
                log.warn(""writeOutput() -> could not write output to file "" + lFilename, ex);
            } finally {
                // close file
                IOUtils.closeQuietly(lOutputWriter);
            }
        }
    }"
69,9539,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.control,org.apache.jmeter.protocol.http.control.CookieManager,,addFile,,BufferedReader,"BufferedReader,FileReader,file,reader",190,190,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java#L190,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java,,open,"public void addFile(String cookieFile) throws IOException {
        File file = new File(cookieFile);
        if (!file.isAbsolute()) {
            file = new File(System.getProperty(""user.dir"") // $NON-NLS-1$
                    + File.separator + cookieFile);
        }
        BufferedReader reader = null;
        if (file.canRead()) {
            reader = new BufferedReader(new FileReader(file)); // TODO Charset ?
        } else {
            throw new IOException(""The file you specified cannot be read."");
        }

        // N.B. this must agree with the save() and cookieToString() methods
        String line;
        try {
            final CollectionProperty cookies = getCookies();
            while ((line = reader.readLine()) != null) {
                try {
                    if (line.startsWith(""#"") || JOrphanUtils.isBlank(line)) {//$NON-NLS-1$
                        continue;
                    }
                    String[] st = JOrphanUtils.split(line, TAB, false);

                    final int _domain = 0;
                    //final int _ignored = 1;
                    final int _path = 2;
                    final int _secure = 3;
                    final int _expires = 4;
                    final int _name = 5;
                    final int _value = 6;
                    final int _fields = 7;
                    if (st.length!=_fields) {
                        throw new IOException(""Expected ""+_fields+"" fields, found ""+st.length+"" in ""+line);
                    }

                    if (st[_path].length()==0) {
                        st[_path] = ""/""; //$NON-NLS-1$
                    }
                    boolean secure = Boolean.parseBoolean(st[_secure]);
                    long expires = Long.parseLong(st[_expires]);
                    if (expires==Long.MAX_VALUE) {
                        expires=0;
                    }
                    //long max was used to represent a non-expiring cookie, but that caused problems
                    Cookie cookie = new Cookie(st[_name], st[_value], st[_domain], st[_path], secure, expires);
                    cookies.addItem(cookie);
                } catch (NumberFormatException e) {
                    throw new IOException(""Error parsing cookie line\n\t'"" + line + ""'\n\t"" + e);
                }
            }
        } finally {
            reader.close();
         }
    }"
70,9540,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.reporters,org.apache.jmeter.reporters.ResultCollector,,loadExistingFile,,dataReader = new BufferedReader(new FileReader(file)); // TODO Charset ?,,334,334,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/reporters/ResultCollector.java#L334,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/reporters/ResultCollector.java,,open,"public void loadExistingFile() {
        final Visualizer visualizer = getVisualizer();
        if (visualizer == null) {
            return; // No point reading the file if there's no visualiser
        }
        boolean parsedOK = false;
        String filename = getFilename();
        File file = new File(filename);
        if (file.exists()) {
            BufferedReader dataReader = null;
            BufferedInputStream bufferedInputStream = null;
            try {
                dataReader = new BufferedReader(new FileReader(file)); // TODO Charset ?
                // Get the first line, and see if it is XML
                String line = dataReader.readLine();
                dataReader.close();
                dataReader = null;
                if (line == null) {
                    log.warn(filename+"" is empty"");
                } else {
                    if (!line.startsWith(""<?xml "")){// No, must be CSV //$NON-NLS-1$
                        CSVSaveService.processSamples(filename, visualizer, this);
                        parsedOK = true;
                    } else { // We are processing XML
                        try { // Assume XStream
                            bufferedInputStream = new BufferedInputStream(new FileInputStream(file));
                            SaveService.loadTestResults(bufferedInputStream,
                                    new ResultCollectorHelper(this, visualizer));
                            parsedOK = true;
                        } catch (ConversionException e) {
                            final String message = e.getShortMessage();
                            if (message.startsWith(""sampleResult"")) { // probably Avalon format
                                log.info(""Failed to load ""+filename+"" using XStream. Assuming Avalon format, as message was: ""+message);
                                OldSaveService.processSamples(filename, visualizer, this);
                                parsedOK = true;
                            } else {
                                log.warn(""Failed to load ""+filename+"" using XStream. Error was: ""+e);
                            }
                        } catch (Exception e) {
                            log.warn(""Failed to load ""+filename+"" using XStream. Error was: ""+e);
                        }
                    }
                }
            } catch (IOException e) {
                log.warn(""Problem reading JTL file: ""+file);
            } catch (JMeterError e){
                log.warn(""Problem reading JTL file: ""+file);
            } catch (RuntimeException e){ // e.g. NullPointerException
                log.warn(""Problem reading JTL file: ""+file,e);
            } catch (OutOfMemoryError e) {
                log.warn(""Problem reading JTL file: ""+file,e);
            } catch (ConfigurationException e) { // Avalon only
                log.warn(""Problem reading Avalon JTL file: ""+file,e);
            } catch (SAXException e) { // Avalon only
                log.warn(""Problem reading Avalon JTL file: ""+file,e);
            } finally {
                JOrphanUtils.closeQuietly(dataReader);
                JOrphanUtils.closeQuietly(bufferedInputStream);
                if (!parsedOK) {
                    GuiPackage.showErrorMessage(
                                ""Error loading results file - see log file"",
                                ""Result file loader"");
                }
            }
        } else {
            GuiPackage.showErrorMessage(
                    ""Error loading results file - could not open file"",
                    ""Result file loader"");
        }
    }"
71,9541,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.services,org.apache.jmeter.services.FileServer,,createBufferedWriter,,OutputStreamWriter,"OutputStreamWriter,fos,osw",434,434,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/services/FileServer.java#L434,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/services/FileServer.java,,open,"private BufferedWriter createBufferedWriter(FileEntry fileEntry) throws IOException {
        FileOutputStream fos = new FileOutputStream(fileEntry.file);
        OutputStreamWriter osw = null;
        // If file encoding is specified, write using that encoding, otherwise use default platform encoding
        String charsetName = fileEntry.charSetEncoding;
        if(!JOrphanUtils.isBlank(charsetName)) {
            osw = new OutputStreamWriter(fos, charsetName);
        } else {
            osw = new OutputStreamWriter(fos);
        }
        return new BufferedWriter(osw);
    }"
72,9545,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.sampler,org.apache.jmeter.protocol.http.sampler.PostWriter,,sendPostData,,file,"file,getBytes,getHeader",112,112,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java#L112,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java,,open,"public String sendPostData(URLConnection connection, HTTPSamplerBase sampler) throws IOException {
        // Buffer to hold the post body, except file content
        StringBuilder postedBody = new StringBuilder(1000);

        HTTPFileArg files[] = sampler.getHTTPFiles();

        String contentEncoding = sampler.getContentEncoding();
        if(contentEncoding == null || contentEncoding.length() == 0) {
            contentEncoding = ENCODING;
        }

        // Check if we should do a multipart/form-data or an
        // application/x-www-form-urlencoded post request
        if(sampler.getUseMultipartForPost()) {
            OutputStream out = connection.getOutputStream();

            // Write the form data post body, which we have constructed
            // in the setHeaders. This contains the multipart start divider
            // and any form data, i.e. arguments
            out.write(formDataPostBody);
            // Retrieve the formatted data using the same encoding used to create it
            postedBody.append(new String(formDataPostBody, contentEncoding));

            // Add any files
            for (int i=0; i < files.length; i++) {
                HTTPFileArg file = files[i];
                // First write the start multipart file
                byte[] header = file.getHeader().getBytes();  // TODO - charset?
                out.write(header);
                // Retrieve the formatted data using the same encoding used to create it
                postedBody.append(new String(header)); // TODO - charset?
                // Write the actual file content
                writeFileToStream(file.getPath(), out);
                // We just add placeholder text for file content
                postedBody.append(""<actual file content, not shown here>""); // $NON-NLS-1$
                // Write the end of multipart file
                byte[] fileMultipartEndDivider = getFileMultipartEndDivider();
                out.write(fileMultipartEndDivider);
                // Retrieve the formatted data using the same encoding used to create it
                postedBody.append(new String(fileMultipartEndDivider, ENCODING));
                if(i + 1 < files.length) {
                    out.write(CRLF);
                    postedBody.append(new String(CRLF, SampleResult.DEFAULT_HTTP_ENCODING));
                }
            }
            // Write end of multipart
            byte[] multipartEndDivider = getMultipartEndDivider();
            out.write(multipartEndDivider);
            postedBody.append(new String(multipartEndDivider, ENCODING));

            out.flush();
            out.close();
        }
        else {
            // If there are no arguments, we can send a file as the body of the request
            if(sampler.getArguments() != null && !sampler.hasArguments() && sampler.getSendFileAsPostBody()) {
                OutputStream out = connection.getOutputStream();
                // we're sure that there is at least one file because of
                // getSendFileAsPostBody method's return value.
                HTTPFileArg file = files[0];
                writeFileToStream(file.getPath(), out);
                out.flush();
                out.close();

                // We just add placeholder text for file content
                postedBody.append(""<actual file content, not shown here>""); // $NON-NLS-1$
            }
            else if (formDataUrlEncoded != null){ // may be null for PUT
                // In an application/x-www-form-urlencoded request, we only support
                // parameters, no file upload is allowed
                OutputStream out = connection.getOutputStream();
                out.write(formDataUrlEncoded);
                out.flush();
                out.close();

                postedBody.append(new String(formDataUrlEncoded, contentEncoding));
            }
        }
        return postedBody.toString();
    }"
73,9546,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.proxy,org.apache.jmeter.protocol.http.proxy.Proxy,,generateErrorResult,,e.printStackTrace(new PrintStream(text));,,452,452,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java#L452,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java,,open,"private SampleResult generateErrorResult(SampleResult result, HttpRequestHdr request, Exception e) {
        return generateErrorResult(result, request, e, """");
    }"
74,9550,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jorphan.collections,org.apache.jorphan.collections.Data,,getDataFromResultSet,,String,"String,o,o",385,385,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/jorphan/org/apache/jorphan/collections/Data.java#L385,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/jorphan/org/apache/jorphan/collections/Data.java,,unknown,"public static Data getDataFromResultSet(ResultSet rs) throws SQLException {
        ResultSetMetaData meta = rs.getMetaData();
        Data data = new Data();

        int numColumns = meta.getColumnCount();
        String[] dbCols = new String[numColumns];
        for (int i = 0; i < numColumns; i++) {
            dbCols[i] = meta.getColumnName(i + 1);
            data.addHeader(dbCols[i]);
        }

        while (rs.next()) {
            data.next();
            for (int i = 0; i < numColumns; i++) {
                Object o = rs.getObject(i + 1);
                if (o instanceof byte[]) {
                    o = new String((byte[]) o); // TODO - charset?
                }
                data.addColumnValue(dbCols[i], o);
            }
        }
        return data;
    }"
75,9556,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.control,org.apache.jmeter.protocol.http.control.HeaderManager,,save,,FileWriter,"FileWriter,PrintWriter,file",110,110,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java#L110,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java,,open,"public void save(String headFile) throws IOException {
        File file = new File(headFile);
        if (!file.isAbsolute()) {
            file = new File(System.getProperty(""user.dir"")// $NON-NLS-1$
                    + File.separator + headFile);
        }
        PrintWriter writer = new PrintWriter(new FileWriter(file)); // TODO Charset ?
        writer.println(""# JMeter generated Header file"");// $NON-NLS-1$
        final CollectionProperty hdrs = getHeaders();
        for (int i = 0; i < hdrs.size(); i++) {
            final JMeterProperty hdr = hdrs.get(i);
            Header head = (Header) hdr.getObjectValue();
            writer.println(head.toString());
        }
        writer.flush();
        writer.close();
    }"
76,9561,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.sampler,org.apache.jmeter.protocol.http.sampler.AjpSampler,,setConnectionHeaders,,stringBody,"stringBody,getBytes",297,297,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java#L297,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java,,open,"private String setConnectionHeaders(URL url, String host, String method)
    throws IOException {
        HeaderManager headers = getHeaderManager();
        AuthManager auth = getAuthManager();
        StringBuilder hbuf = new StringBuilder();
        // Allow Headers to override Host setting
        hbuf.append(""Host"").append(COLON_SPACE).append(host).append(NEWLINE);//$NON-NLS-1$
        setInt(0xA00b); //Host
        setString(host);
        if(headers != null) {
            CollectionProperty coll = headers.getHeaders();
            PropertyIterator i = coll.iterator();
            while(i.hasNext()) {
                Header header = (Header)i.next().getObjectValue();
                String n = header.getName();
                String v = header.getValue();
                hbuf.append(n).append(COLON_SPACE).append(v).append(NEWLINE);
                int hc = translateHeader(n);
                if(hc > 0) {
                    setInt(hc+AJP_HEADER_BASE);
                } else {
                    setString(n);
                }
                setString(v);
            }
        }
        if(method.equals(HTTPConstants.POST)) {
            int cl = -1;
            HTTPFileArg[] hfa = getHTTPFiles();
            if(hfa.length > 0) {
                HTTPFileArg fa = hfa[0];
                String fn = fa.getPath();
                File input = new File(fn);
                cl = (int)input.length();
                if(body != null) {
                    JOrphanUtils.closeQuietly(body);
                    body = null;
                }
                body = new BufferedInputStream(new FileInputStream(input));
                setString(HTTPConstants.HEADER_CONTENT_DISPOSITION);
                setString(""form-data; name=\""""+encode(fa.getParamName())+
                      ""\""; filename=\"""" + encode(fn) +""\""""); //$NON-NLS-1$ //$NON-NLS-2$
                String mt = fa.getMimeType();
                hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(mt).append(NEWLINE);
                setInt(0xA007); // content-type
                setString(mt);
            } else {
                hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED).append(NEWLINE);
                setInt(0xA007); // content-type
                setString(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                StringBuilder sb = new StringBuilder();
                boolean first = true;
                PropertyIterator args = getArguments().iterator();
                while(args.hasNext()) {
                    JMeterProperty arg = args.next();
                    if(first) {
                        first = false;
                    } else {
                        sb.append('&');
                    }
                    sb.append(arg.getStringValue());
                }
                stringBody = sb.toString();
                byte [] sbody = stringBody.getBytes(); // TODO - charset?
                cl = sbody.length;
                body = new ByteArrayInputStream(sbody);
            }
            hbuf.append(HTTPConstants.HEADER_CONTENT_LENGTH).append(COLON_SPACE).append(String.valueOf(cl)).append(NEWLINE);
            setInt(0xA008); // Content-length
            setString(String.valueOf(cl));
        }
        if(auth != null) {
            String authHeader = auth.getAuthHeaderForURL(url);
            if(authHeader != null) {
                setInt(0xA005); // Authorization
                setString(authHeader);
                hbuf.append(HTTPConstants.HEADER_AUTHORIZATION).append(COLON_SPACE).append(authHeader).append(NEWLINE);
            }
        }
        return hbuf.toString();
    }"
77,9564,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.control,org.apache.jmeter.protocol.http.control.CookieManager,,save,,FileWriter,"FileWriter,PrintWriter,file",164,164,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java#L164,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java,,open,"public void save(String authFile) throws IOException {
        File file = new File(authFile);
        if (!file.isAbsolute()) {
            file = new File(System.getProperty(""user.dir"") // $NON-NLS-1$
                    + File.separator + authFile);
        }
        PrintWriter writer = new PrintWriter(new FileWriter(file)); // TODO Charset ?
        writer.println(""# JMeter generated Cookie file"");// $NON-NLS-1$
        PropertyIterator cookies = getCookies().iterator();
        long now = System.currentTimeMillis();
        while (cookies.hasNext()) {
            Cookie cook = (Cookie) cookies.next().getObjectValue();
            final long expiresMillis = cook.getExpiresMillis();
            if (expiresMillis == 0 || expiresMillis > now) { // only save unexpired cookies
                writer.println(cookieToString(cook));
            }
        }
        writer.flush();
        writer.close();
    }"
78,9565,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.StatVisualizer,,actionPerformed,,writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?,,265,265,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/components/org/apache/jmeter/visualizers/StatVisualizer.java#L265,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/visualizers/StatVisualizer.java,,close,"@Override
    public void actionPerformed(ActionEvent ev) {
        if (ev.getSource() == saveTable) {
            JFileChooser chooser = FileDialoger.promptToSaveFile(""aggregate.csv"");//$NON-NLS-1$
            if (chooser == null) {
                return;
            }
            FileWriter writer = null;
            try {
                writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?
                CSVSaveService.saveCSVStats(model,writer, saveHeaders.isSelected());
            } catch (FileNotFoundException e) {
                log.warn(e.getMessage());
            } catch (IOException e) {
                log.warn(e.getMessage());
            } finally {
                JOrphanUtils.closeQuietly(writer);
            }
        }
    }"
79,9570,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.proxy,org.apache.jmeter.protocol.http.proxy.HttpRequestHdr,,parse,,String,"String,log,rawPostData,debug",151,151,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java#L151,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java,,open,"public byte[] parse(InputStream in) throws IOException {
        boolean inHeaders = true;
        int readLength = 0;
        int dataLength = 0;
        boolean firstLine = true;
        ByteArrayOutputStream clientRequest = new ByteArrayOutputStream();
        ByteArrayOutputStream line = new ByteArrayOutputStream();
        int x;
        while ((inHeaders || readLength < dataLength) && ((x = in.read()) != -1)) {
            line.write(x);
            clientRequest.write(x);
            if (firstLine && !CharUtils.isAscii((char) x)){// includes \n
                throw new IllegalArgumentException(""Only ASCII supported in headers (perhaps SSL was used?)"");
            }
            if (inHeaders && (byte) x == (byte) '\n') { // $NON-NLS-1$
                if (line.size() < 3) {
                    inHeaders = false;
                    firstLine = false; // cannot be first line either
                }
                final String reqLine = line.toString();
                if (firstLine) {
                    parseFirstLine(reqLine);
                    firstLine = false;
                } else {
                    // parse other header lines, looking for Content-Length
                    final int contentLen = parseLine(reqLine);
                    if (contentLen > 0) {
                        dataLength = contentLen; // Save the last valid content length one
                    }
                }
                if (log.isDebugEnabled()){
                    log.debug(""Client Request Line: '"" + reqLine.replaceFirst(""\r\n$"", ""<CRLF>"") + ""'"");
                }
                line.reset();
            } else if (!inHeaders) {
                readLength++;
            }
        }
        // Keep the raw post data
        rawPostData = line.toByteArray();

        if (log.isDebugEnabled()){
            log.debug(""rawPostData in default JRE encoding: "" + new String(rawPostData)); // TODO - charset?
            log.debug(""Request: '"" + clientRequest.toString().replaceAll(""\r\n"", ""<CRLF>"") + ""'"");
        }
        return clientRequest.toByteArray();
    }"
80,9571,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.save,org.apache.jmeter.save.SaveService,,getOutputStreamWriter,,OutputStreamWriter,"OutputStreamWriter,outStream",545,545,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/save/SaveService.java#L545,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/save/SaveService.java,,close,"private static OutputStreamWriter getOutputStreamWriter(OutputStream outStream) {
        // Check if we have a encoding to use from properties
        Charset charset = getFileEncodingCharset();
        if(charset != null) {
            return new OutputStreamWriter(outStream, charset);
        }
        else {
            // We use the default character set encoding of the JRE
            return new OutputStreamWriter(outStream);
        }
    }"
81,9586,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.control,org.apache.jmeter.protocol.http.control.HeaderManager,,addFile,,BufferedReader,"BufferedReader,FileReader,file,reader",137,137,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java#L137,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java,,open,"public void addFile(String headerFile) throws IOException {
        File file = new File(headerFile);
        if (!file.isAbsolute()) {
            file = new File(System.getProperty(""user.dir"")// $NON-NLS-1$
                    + File.separator + headerFile);
        }
        if (!file.canRead()) {
            throw new IOException(""The file you specified cannot be read."");
        }

        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(file)); // TODO Charset ?
            String line;
            while ((line = reader.readLine()) != null) {
                try {
                    if (line.startsWith(""#"") || JOrphanUtils.isBlank(line)) {// $NON-NLS-1$
                        continue;
                    }
                    String[] st = JOrphanUtils.split(line, ""\t"", "" "");// $NON-NLS-1$ $NON-NLS-2$
                    int name = 0;
                    int value = 1;
                    Header header = new Header(st[name], st[value]);
                    getHeaders().addItem(header);
                } catch (Exception e) {
                    throw new IOException(""Error parsing header line\n\t'"" + line + ""'\n\t"" + e);
                }
            }
        } finally {
            IOUtils.closeQuietly(reader);
        }
    }"
82,9588,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.sampler,org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl$ViewableFileBody,,writeTo,,out,"out,getBytes,write",894,894,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java#L894,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,,open,"@Override
        public void writeTo(final OutputStream out) throws IOException {
            if (hideFileData) {
                out.write(""<actual file content, not shown here>"".getBytes());// encoding does not really matter here
            } else {
                super.writeTo(out);
            }
        }"
83,9589,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.system,org.apache.jmeter.protocol.system.SystemSampler,,sample,,nativeCommand,"nativeCommand,results,getBytes,getOutResult,setResponseData",185,185,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java#L185,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java,,open,"@Override
    public SampleResult sample(Entry entry) {
        SampleResult results = new SampleResult();
        results.setDataType(SampleResult.TEXT);
        results.setSampleLabel(getName());
        
        String command = getCommand();
        Arguments args = getArguments();
        Arguments environment = getEnvironmentVariables();
        boolean checkReturnCode = getCheckReturnCode();
        int expectedReturnCode = getExpectedReturnCode();
        List<String> cmds = new ArrayList<String>(args.getArgumentCount()+1);
        StringBuilder cmdLine = new StringBuilder((null == command) ? """" : command);
        cmds.add(command);
        for (int i=0;i<args.getArgumentCount();i++) {
            Argument arg = args.getArgument(i);
            cmds.add(arg.getPropertyAsString(Argument.VALUE));
            cmdLine.append("" "");
            cmdLine.append(cmds.get(i+1));
        }

        Map<String,String> env = new HashMap<String, String>();
        for (int i=0;i<environment.getArgumentCount();i++) {
            Argument arg = environment.getArgument(i);
            env.put(arg.getName(), arg.getPropertyAsString(Argument.VALUE));
        }
        
        File directory = null;
        if(StringUtils.isEmpty(getDirectory())) {
            directory = new File(FileServer.getDefaultBase());
            if(log.isDebugEnabled()) {
                log.debug(""Using default directory:""+directory.getAbsolutePath());
            }
        } else {
            directory = new File(getDirectory());
            if(log.isDebugEnabled()) {
                log.debug(""Using configured directory:""+directory.getAbsolutePath());
            }
        }
        
        if(log.isDebugEnabled()) {
            log.debug(""Will run :""+cmdLine + "" using working directory:""+directory.getAbsolutePath()+
                    "" with environment:""+env);
        }

        results.setSamplerData(""Working Directory:""+directory.getAbsolutePath()+
                ""\nEnvironment:""+env+
                ""\nExecuting:"" + cmdLine.toString());

        SystemCommand nativeCommand = null;
        try {
            nativeCommand = new SystemCommand(directory, getTimeout(), POLL_INTERVAL, env, getStdin(), getStdout(), getStderr());
            results.sampleStart();
            int returnCode = nativeCommand.run(cmds);
            results.sampleEnd();
            results.setResponseCode(Integer.toString(returnCode)); // TODO is this the best way to do this?
            if(log.isDebugEnabled()) {
                log.debug(""Ran :""+cmdLine + "" using working directory:""+directory.getAbsolutePath()+
                        "" with execution environment:""+nativeCommand.getExecutionEnvironment()+ "" => "" + returnCode);
            }

            if (checkReturnCode && (returnCode != expectedReturnCode)) {
                results.setSuccessful(false);
                results.setResponseMessage(""Uexpected return code.  Expected [""+expectedReturnCode+""]. Actual [""+returnCode+""]."");
            } else {
                results.setSuccessful(true);
                results.setResponseMessage(""OK"");
            }
        } catch (IOException ioe) {
            results.sampleEnd();
            results.setSuccessful(false);
            // results.setResponseCode(""???""); TODO what code should be set here?
            results.setResponseMessage(""Exception occured whilst executing System Call: "" + ioe);
        } catch (InterruptedException ie) {
            results.sampleEnd();
            results.setSuccessful(false);
            // results.setResponseCode(""???""); TODO what code should be set here?
            results.setResponseMessage(""System Sampler Interupted whilst executing System Call: "" + ie);
        }

        if (nativeCommand != null) {
            results.setResponseData(nativeCommand.getOutResult().getBytes()); // default charset is deliberate here
        }
            
        return results;
    }"
84,9590,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.functions,org.apache.jmeter.functions.StringFromFile,,openFile,,BufferedReader,"BufferedReader,FileReader,fileName,myBread",201,201,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/functions/org/apache/jmeter/functions/StringFromFile.java#L201,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/functions/org/apache/jmeter/functions/StringFromFile.java,,open,"private synchronized void openFile() {
        String tn = Thread.currentThread().getName();
        fileName = ((CompoundVariable) values[0]).execute();

        String start = """";
        if (values.length >= PARAM_START) {
            start = ((CompoundVariable) values[PARAM_START - 1]).execute();
            try {
                // Low chances to be non numeric, we parse
                myStart = Integer.parseInt(start);
            } catch(NumberFormatException e) {
                myStart = COUNT_UNUSED;// Don't process invalid numbers
                log.warn(""Exception parsing ""+start + "" as int, value will not be considered as Start Number sequence"");
            }
        }
        // Have we used myCurrent yet?
        // Set to 1 if start number is missing (to allow for end without start)
        if (myCurrent == COUNT_UNUSED) {
            myCurrent = myStart == COUNT_UNUSED ? 1 : myStart;
        }

        if (values.length >= PARAM_END) {
            String tmp = ((CompoundVariable) values[PARAM_END - 1]).execute();
            try {
                // Low chances to be non numeric, we parse
                myEnd = Integer.parseInt(tmp);
            } catch(NumberFormatException e) {
                myEnd = COUNT_UNUSED;// Don't process invalid numbers (including """")
                log.warn(""Exception parsing ""+tmp + "" as int, value will not be considered as End Number sequence"");
            }
        }

        if (values.length >= PARAM_START) {
            log.info(tn + "" Start = "" + myStart + "" Current = "" + myCurrent + "" End = "" + myEnd);//$NON-NLS-1$
            if (myEnd != COUNT_UNUSED) {
                if (myCurrent > myEnd) {
                    log.info(tn + "" No more files to process, "" + myCurrent + "" > "" + myEnd);//$NON-NLS-1$
                    myBread = null;
                    return;
                }
            }
            /*
             * DecimalFormat adds the number to the end of the format if there
             * are no formatting characters, so we need a way to prevent this
             * from messing up the file name.
             *
             */
            if (myStart != COUNT_UNUSED) // Only try to format if there is a
                                            // number
            {
                log.info(tn + "" using format "" + fileName);
                try {
                    DecimalFormat myFormatter = new DecimalFormat(fileName);
                    fileName = myFormatter.format(myCurrent);
                } catch (NumberFormatException e) {
                    log.warn(""Bad file name format "", e);
                }
            }
            myCurrent++;// for next time
        }

        log.info(tn + "" opening file "" + fileName);//$NON-NLS-1$
        try {
            myBread = new BufferedReader(new FileReader(fileName));
        } catch (Exception e) {
            log.error(""openFile() error: "" + e.toString());//$NON-NLS-1$
            myBread = null;
        }
    }"
85,9592,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.http.util,org.apache.jmeter.protocol.http.util.Base64Encoder,,encode,,encode,"encode,s,getBytes",41,41,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/http/org/apache/jmeter/protocol/http/util/Base64Encoder.java#L41,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/util/Base64Encoder.java,,open,"public static String encode(String s) {
        return encode(s.getBytes()); // TODO - charset?
    }"
86,9599,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.save,org.apache.jmeter.save.SaveService,,getInputStreamReader,,InputStreamReader,"InputStreamReader,inStream",533,533,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/save/SaveService.java#L533,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/save/SaveService.java,,close,"private static InputStreamReader getInputStreamReader(InputStream inStream) {
        // Check if we have a encoding to use from properties
        Charset charset = getFileEncodingCharset();
        if(charset != null) {
            return new InputStreamReader(inStream, charset);
        }
        else {
            // We use the default character set encoding of the JRE
            return new InputStreamReader(inStream);
        }
    }"
87,9604,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.assertions,org.apache.jmeter.assertions.HTMLAssertion,,getResult,,log,"log,os,debug,toString",148,148,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/components/org/apache/jmeter/assertions/HTMLAssertion.java#L148,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/assertions/HTMLAssertion.java,,open,"@Override
    public AssertionResult getResult(SampleResult inResponse) {
        log.debug(""HTMLAssertions.getResult() called"");

        // no error as default
        AssertionResult result = new AssertionResult(getName());

        if (inResponse.getResponseData().length == 0) {
            return result.setResultForNull();
        }

        result.setFailure(false);

        // create parser
        Tidy tidy = null;
        try {
            if (log.isDebugEnabled()){
                log.debug(""HTMLAssertions.getResult(): Setup tidy ..."");
                log.debug(""doctype: "" + getDoctype());
                log.debug(""errors only: "" + isErrorsOnly());
                log.debug(""error threshold: "" + getErrorThreshold());
                log.debug(""warning threshold: "" + getWarningThreshold());
                log.debug(""html mode: "" + isHTML());
                log.debug(""xhtml mode: "" + isXHTML());
                log.debug(""xml mode: "" + isXML());
            }
            tidy = new Tidy();
            tidy.setInputEncoding(""UTF8"");
            tidy.setOutputEncoding(""UTF8"");
            tidy.setQuiet(false);
            tidy.setShowWarnings(true);
            tidy.setOnlyErrors(isErrorsOnly());
            tidy.setDocType(getDoctype());
            if (isXHTML()) {
                tidy.setXHTML(true);
            } else if (isXML()) {
                tidy.setXmlTags(true);
            }
            tidy.setErrfile(getFilename());

            if (log.isDebugEnabled()) {
                log.debug(""err file: "" + getFilename());
                log.debug(""getParser : tidy parser created - "" + tidy);
                log.debug(""HTMLAssertions.getResult(): Tidy instance created!"");
            }

        } catch (Exception e) {//TODO replace with proper Exception
            log.error(""Unable to instantiate tidy parser"", e);
            result.setFailure(true);
            result.setFailureMessage(""Unable to instantiate tidy parser"");
            // return with an error
            return result;
        }

        /*
         * Run tidy.
         */
        try {
            log.debug(""HTMLAssertions.getResult(): start parsing with tidy ..."");

            StringWriter errbuf = new StringWriter();
            tidy.setErrout(new PrintWriter(errbuf));
            // Node node = tidy.parseDOM(new
            // ByteArrayInputStream(response.getResponseData()), null);
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            log.debug(""Start : parse"");
            Node node = tidy.parse(new ByteArrayInputStream(inResponse.getResponseData()), os);
            if (log.isDebugEnabled()) {
                log.debug(""node : "" + node);
                log.debug(""End   : parse"");
                log.debug(""HTMLAssertions.getResult(): parsing with tidy done!"");
                log.debug(""Output: "" + os.toString());
            }

            // write output to file
            writeOutput(errbuf.toString());

            // evaluate result
            if ((tidy.getParseErrors() > getErrorThreshold())
                    || (!isErrorsOnly() && (tidy.getParseWarnings() > getWarningThreshold()))) {
                if (log.isDebugEnabled()) {
                    log.debug(""HTMLAssertions.getResult(): errors/warnings detected:"");
                    log.debug(errbuf.toString());
                }
                result.setFailure(true);
                result.setFailureMessage(MessageFormat.format(""Tidy Parser errors:   "" + tidy.getParseErrors()
                        + "" (allowed "" + getErrorThreshold() + "") "" + ""Tidy Parser warnings: ""
                        + tidy.getParseWarnings() + "" (allowed "" + getWarningThreshold() + "")"", new Object[0]));
                // return with an error

            } else if ((tidy.getParseErrors() > 0) || (tidy.getParseWarnings() > 0)) {
                // return with no error
                log.debug(""HTMLAssertions.getResult(): there were errors/warnings but threshold to high"");
                result.setFailure(false);
            } else {
                // return with no error
                log.debug(""HTMLAssertions.getResult(): no errors/warnings detected:"");
                result.setFailure(false);
            }

        } catch (Exception e) {//TODO replace with proper Exception
            // return with an error
            log.warn(""Cannot parse result content"", e);
            result.setFailure(true);
            result.setFailureMessage(e.getMessage());
        }
        return result;
    }"
88,9613,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.util,org.apache.jmeter.util.JSR223TestElement,,processFileOrScript,,"fileReader = new BufferedReader(new FileReader(scriptFile),",,164,164,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/util/JSR223TestElement.java#L164,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/util/JSR223TestElement.java,,open,"protected Object processFileOrScript(ScriptEngine scriptEngine, Bindings bindings) throws IOException, ScriptException {
        if (bindings == null) {
            bindings = scriptEngine.createBindings();
        }
        populateBindings(bindings);
        File scriptFile = new File(getFilename()); 
        // Hack: bsh-2.0b5.jar BshScriptEngine implements Compilable but throws ""java.lang.Error: unimplemented""
        boolean supportsCompilable = scriptEngine instanceof Compilable 
                && !(scriptEngine.getClass().getName().equals(""bsh.engine.BshScriptEngine""));
        if (!StringUtils.isEmpty(getFilename())) {
            if (scriptFile.exists() && scriptFile.canRead()) {
                BufferedReader fileReader = null;
                try {
                    if (supportsCompilable) {
                        String cacheKey = 
                                getScriptLanguage()+""#""+
                                scriptFile.getAbsolutePath()+""#""+
                                        scriptFile.lastModified();
                        CompiledScript compiledScript = 
                                compiledScriptsCache.get(cacheKey);
                        if (compiledScript==null) {
                            synchronized (compiledScriptsCache) {
                                compiledScript = 
                                        compiledScriptsCache.get(cacheKey);
                                if (compiledScript==null) {
                                    // TODO Charset ?
                                    fileReader = new BufferedReader(new FileReader(scriptFile), 
                                            (int)scriptFile.length()); 
                                    compiledScript = 
                                            ((Compilable) scriptEngine).compile(fileReader);
                                    compiledScriptsCache.put(cacheKey, compiledScript);
                                }
                            }
                        }
                        return compiledScript.eval(bindings);
                    } else {
                        // TODO Charset ?
                        fileReader = new BufferedReader(new FileReader(scriptFile), 
                                (int)scriptFile.length()); 
                        return scriptEngine.eval(fileReader, bindings);                    
                    }
                } finally {
                    IOUtils.closeQuietly(fileReader);
                }
            }  else {
                throw new ScriptException(""Script file '""+scriptFile.getAbsolutePath()+""' does not exist or is unreadable for element:""+getName());
            }
        } else if (!StringUtils.isEmpty(getScript())){
            if (supportsCompilable && !StringUtils.isEmpty(cacheKey)) {
                CompiledScript compiledScript = 
                        compiledScriptsCache.get(cacheKey);
                if (compiledScript==null) {
                    synchronized (compiledScriptsCache) {
                        compiledScript = 
                                compiledScriptsCache.get(cacheKey);
                        if (compiledScript==null) {
                            compiledScript = 
                                    ((Compilable) scriptEngine).compile(getScript());
                            compiledScriptsCache.put(cacheKey, compiledScript);
                        }
                    }
                }
                return compiledScript.eval(bindings);
            } else {
                return scriptEngine.eval(getScript(), bindings);
            }
        } else {
            throw new ScriptException(""Both script file and script text are empty for element:""+getName());            
        }
    }"
89,9618,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.tcp.sampler,org.apache.jmeter.protocol.tcp.sampler.TCPClientImpl,,read,,log,"log,w,w,debug,size,toString",113,113,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java#L113,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java,,open,"@Override
    public String read(InputStream is) throws ReadException{
        ByteArrayOutputStream w = new ByteArrayOutputStream();
        try {
            byte[] buffer = new byte[4096];
            int x = 0;
            while ((x = is.read(buffer)) > -1) {
                w.write(buffer, 0, x);
                if (useEolByte && (buffer[x - 1] == eolByte)) {
                    break;
                }
            }

            // do we need to close byte array (or flush it?)
            if(log.isDebugEnabled()) {
                log.debug(""Read: "" + w.size() + ""\n"" + w.toString());
            }
            return w.toString(charset);
        } catch (IOException e) {
            throw new ReadException("""", e, w.toString());
        }
    }"
90,9624,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.jdbc.sampler,org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler,,sample,,res.setResponseData(ex.getMessage().getBytes());,,95,95,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java#L95,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java,,open,"@Override
    public SampleResult sample(Entry e) {
        log.debug(""sampling jdbc"");

        SampleResult res = new SampleResult();
        res.setSampleLabel(getName());
        res.setSamplerData(toString());
        res.setDataType(SampleResult.TEXT);
        res.setContentType(""text/plain""); // $NON-NLS-1$
        res.setDataEncoding(ENCODING);

        // Assume we will be successful
        res.setSuccessful(true);
        res.setResponseMessageOK();
        res.setResponseCodeOK();


        res.sampleStart();
        Connection conn = null;

        try {
            if(JOrphanUtils.isBlank(getDataSource())) {
                throw new IllegalArgumentException(""Variable Name must not be null in ""+getName());
            }

            try {
                conn = DataSourceElement.getConnection(getDataSource());
            } finally {
                res.latencyEnd(); // use latency to measure connection time
            }
            res.setResponseHeaders(conn.toString());
            res.setResponseData(execute(conn));
        } catch (SQLException ex) {
            final String errCode = Integer.toString(ex.getErrorCode());
            res.setResponseMessage(ex.toString());
            res.setResponseCode(ex.getSQLState()+ "" "" +errCode);
            res.setResponseData(ex.getMessage().getBytes());
            res.setSuccessful(false);
        } catch (Exception ex) {
            res.setResponseMessage(ex.toString());
            res.setResponseCode(""000"");
            res.setResponseData(ex.getMessage().getBytes());
            res.setSuccessful(false);
        } finally {
            close(conn);
        }

        // TODO: process warnings? Set Code and Message to success?
        res.sampleEnd();
        return res;
    }"
91,9626,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.services,org.apache.jmeter.services.FileServer,,createBufferedReader,,InputStreamReader,"InputStreamReader,fis,isr",405,405,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/services/FileServer.java#L405,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/services/FileServer.java,,open,"private BufferedReader createBufferedReader(FileEntry fileEntry) throws IOException {
        FileInputStream fis = new FileInputStream(fileEntry.file);
        InputStreamReader isr = null;
        // If file encoding is specified, read using that encoding, otherwise use default platform encoding
        String charsetName = fileEntry.charSetEncoding;
        if(!JOrphanUtils.isBlank(charsetName)) {
            isr = new InputStreamReader(fis, charsetName);
        } else {
            isr = new InputStreamReader(fis);
        }
        return new BufferedReader(isr);
    }"
92,9639,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.ftp.sampler,org.apache.jmeter.protocol.ftp.sampler.FTPSampler,,sample,,contents,"contents,getBytes",210,210,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java#L210,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java,,open,"@Override
    public SampleResult sample(Entry e) {
        SampleResult res = new SampleResult();
        res.setSuccessful(false); // Assume failure
        String remote = getRemoteFilename();
        String local = getLocalFilename();
        boolean binaryTransfer = isBinaryMode();
        res.setSampleLabel(getName());
        final String label = getLabel();
        res.setSamplerData(label);
        try {
            res.setURL(new URL(label));
        } catch (MalformedURLException e1) {
            log.warn(""Cannot set URL: ""+e1.getLocalizedMessage());
        }
        InputStream input = null;
        OutputStream output = null;

        res.sampleStart();
        FTPClient ftp = new FTPClient();
        try {
            savedClient = ftp;
            final int port = getPortAsInt();
            if (port > 0){
                ftp.connect(getServer(),port);
            } else {
                ftp.connect(getServer());
            }
            res.latencyEnd();
            int reply = ftp.getReplyCode();
            if (FTPReply.isPositiveCompletion(reply))
            {
                if (ftp.login( getUsername(), getPassword())){
                    if (binaryTransfer) {
                        ftp.setFileType(FTP.BINARY_FILE_TYPE);
                    }
                    ftp.enterLocalPassiveMode();// should probably come from the setup dialog
                    boolean ftpOK=false;
                    if (isUpload()) {
                        String contents=getLocalFileContents();
                        if (contents.length() > 0){
                            byte bytes[] = contents.getBytes(); // TODO - charset?
                            input = new ByteArrayInputStream(bytes);
                            res.setBytes(bytes.length);
                        } else {
                            File infile = new File(local);
                            res.setBytes((int)infile.length());
                            input = new BufferedInputStream(new FileInputStream(infile));
                        }
                        ftpOK = ftp.storeFile(remote, input);
                    } else {
                        final boolean saveResponse = isSaveResponse();
                        ByteArrayOutputStream baos=null; // No need to close this
                        OutputStream target=null; // No need to close this
                        if (saveResponse){
                            baos  = new ByteArrayOutputStream();
                            target=baos;
                        }
                        if (local.length()>0){
                            output=new FileOutputStream(local);
                            if (target==null) {
                                target=output;
                            } else {
                                target = new TeeOutputStream(output,baos);
                            }
                        }
                        if (target == null){
                            target=new NullOutputStream();
                        }
                        input = ftp.retrieveFileStream(remote);
                        if (input == null){// Could not access file or other error
                            res.setResponseCode(Integer.toString(ftp.getReplyCode()));
                            res.setResponseMessage(ftp.getReplyString());
                        } else {
                            long bytes = IOUtils.copy(input,target);
                            ftpOK = bytes > 0;
                            if (saveResponse && baos != null){
                                res.setResponseData(baos.toByteArray());
                                if (!binaryTransfer) {
                                    res.setDataType(SampleResult.TEXT);
                                }
                            } else {
                                res.setBytes((int) bytes);
                            }
                        }
                    }

                    if (ftpOK) {
                        res.setResponseCodeOK();
                        res.setResponseMessageOK();
                        res.setSuccessful(true);
                    } else {
                        res.setResponseCode(Integer.toString(ftp.getReplyCode()));
                        res.setResponseMessage(ftp.getReplyString());
                    }
                } else {
                    res.setResponseCode(Integer.toString(ftp.getReplyCode()));
                    res.setResponseMessage(ftp.getReplyString());
                }
            } else {
                res.setResponseCode(""501""); // TODO
                res.setResponseMessage(""Could not connect"");
                //res.setResponseCode(Integer.toString(ftp.getReplyCode()));
                res.setResponseMessage(ftp.getReplyString());
            }
        } catch (IOException ex) {
            res.setResponseCode(""000""); // TODO
            res.setResponseMessage(ex.toString());
        } finally {
            savedClient = null;
            if (ftp.isConnected()) {
                try {
                    ftp.logout();
                } catch (IOException ignored) {
                }
                try {
                    ftp.disconnect();
                } catch (IOException ignored) {
                }
            }
            IOUtils.closeQuietly(input);
            IOUtils.closeQuietly(output);
        }

        res.sampleEnd();
        return res;
    }"
93,9641,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.samplers,org.apache.jmeter.samplers.SampleResult,,getResponseDataAsString,,String,"String,responseData",702,702,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/samplers/SampleResult.java#L702,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/samplers/SampleResult.java,,close,"public String getResponseDataAsString() {
        try {
            if(responseDataAsString == null) {
                responseDataAsString= new String(responseData,getDataEncodingWithDefault());
            }
            return responseDataAsString;
        } catch (UnsupportedEncodingException e) {
            log.warn(""Using platform default as ""+getDataEncodingWithDefault()+"" caused ""+e);
            return new String(responseData); // N.B. default charset is used deliberately here
        }
    }"
94,9642,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.visualizers,org.apache.jmeter.visualizers.SummaryReport,,actionPerformed,,writer = new FileWriter(chooser.getSelectedFile());,,260,260,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/components/org/apache/jmeter/visualizers/SummaryReport.java#L260,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/visualizers/SummaryReport.java,,close,"@Override
    public void actionPerformed(ActionEvent ev) {
        if (ev.getSource() == saveTable) {
            JFileChooser chooser = FileDialoger.promptToSaveFile(""summary.csv"");//$NON-NLS-1$
            if (chooser == null) {
                return;
            }
            FileWriter writer = null;
            try {
                writer = new FileWriter(chooser.getSelectedFile());
                CSVSaveService.saveCSVStats(model,writer, saveHeaders.isSelected());
            } catch (FileNotFoundException e) {
                log.warn(e.getMessage());
            } catch (IOException e) {
                log.warn(e.getMessage());
            } finally {
                JOrphanUtils.closeQuietly(writer);
            }
        }
    }"
95,9646,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jorphan.io,org.apache.jorphan.io.TextFile,,setText,,FileWriter,"FileWriter,this,writer",116,116,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/jorphan/org/apache/jorphan/io/TextFile.java#L116,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/jorphan/org/apache/jorphan/io/TextFile.java,,open,"public void setText(String body) {
        Writer writer = null;
        try {
            if (encoding == null) {
                writer = new FileWriter(this);
            } else {
                writer = new OutputStreamWriter(new FileOutputStream(this), encoding);
            }
            writer.write(body);
            writer.flush();
        } catch (IOException ioe) {
            log.error("""", ioe);
        } finally {
            JOrphanUtils.closeQuietly(writer);
        }
    }"
96,9653,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.jms.sampler,org.apache.jmeter.protocol.jms.sampler.SubscriberSampler,,sample,,buffer,"buffer,result,getBytes,setResponseData,toString",192,192,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java#L192,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java,,open,"@Override
    public SampleResult sample() {
        // run threadStarted only if Destination setup on each sample
        if (!isDestinationStatic()) {
            threadStarted(true);
        }
        SampleResult result = new SampleResult();
        result.setDataType(SampleResult.TEXT);
        result.setSampleLabel(getName());
        result.sampleStart();
        if (exceptionDuringInit != null) {
            result.sampleEnd();
            result.setSuccessful(false);
            result.setResponseCode(""000"");
            result.setResponseMessage(exceptionDuringInit.toString());
            return result; 
        }
        if (stopBetweenSamples){ // If so, we need to start collection here
            try {
                SUBSCRIBER.start();
            } catch (JMSException e) {
                log.warn(""Problem starting subscriber"", e);
            }
        }
        StringBuilder buffer = new StringBuilder();
        StringBuilder propBuffer = new StringBuilder();
        
        int loop = getIterationCount();
        int read = 0;
        
        long until = 0L;
        long now = System.currentTimeMillis();
        if (timeout > 0) {
            until = timeout + now; 
        }
        while (!interrupted
                && (until == 0 || now < until)
                && read < loop) {
            Message msg;
            try {
                msg = SUBSCRIBER.getMessage(calculateWait(until, now));
                if (msg != null){
                    read++;
                    extractContent(buffer, propBuffer, msg, (read == loop));
                }
            } catch (JMSException e) {
                log.warn(""Error ""+e.toString());
            }
            now = System.currentTimeMillis();
        }
        result.sampleEnd();
        result.setResponseMessage(read + "" samples messages received"");
        if (getReadResponseAsBoolean()) {
            result.setResponseData(buffer.toString().getBytes()); // TODO - charset?
        } else {
            result.setBytes(buffer.toString().getBytes().length); // TODO - charset?
        }
        result.setResponseHeaders(propBuffer.toString());
        if (read == 0) {
            result.setResponseCode(""404""); // Not found
            result.setSuccessful(false);
        } else { // TODO set different status if not enough messages found?
            result.setResponseCodeOK();
            result.setSuccessful(true);
        }
        result.setResponseMessage(read + "" message(s) received successfully"");
        result.setSamplerData(loop + "" messages expected"");
        result.setSampleCount(read);
        
        if (stopBetweenSamples){
            try {
                SUBSCRIBER.stop();
            } catch (JMSException e) {
                log.warn(""Problem stopping subscriber"", e);
            }
        }
        // run threadFinished only if Destination setup on each sample (stop Listen queue)
        if (!isDestinationStatic()) {
            threadFinished(true);
        }
        return result;
    }"
97,9666,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.protocol.mongodb.sampler,org.apache.jmeter.protocol.mongodb.sampler.MongoScriptSampler,,sample,,res,"res,resultAsString,getBytes,setResponseData",80,80,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSampler.java#L80,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSampler.java,,open,"@Override
    public SampleResult sample(Entry e) {
        trace(""sample()"");

        SampleResult res = new SampleResult();
        String data = getScript();

        res.setSampleLabel(getTitle());
        res.setResponseCodeOK();
        res.setResponseCode(""200""); // $NON-NLS-1$
        res.setSuccessful(true);
        res.setResponseMessageOK();
        res.setSamplerData(data);
        res.setDataType(SampleResult.TEXT);
        res.setContentType(""text/plain""); // $NON-NLS-1$
        res.sampleStart();

        try {
            MongoDB mongoDB = MongoSourceElement.getMongoDB(getSource());
            MongoScriptRunner runner = new MongoScriptRunner();
            DB db = mongoDB.getDB(getDatabase(), getUsername(), getPassword());
            res.latencyEnd();
            Object result = runner.evaluate(db, data);
            EvalResultHandler handler = new EvalResultHandler();
            String resultAsString = handler.handle(result);
            res.setResponseData(resultAsString.getBytes());
        } catch (Exception ex) {
            res.setResponseCode(""500""); // $NON-NLS-1$
            res.setSuccessful(false);
            res.setResponseMessage(ex.toString());
            res.setResponseData(ex.getMessage().getBytes());
        } finally {
            res.sampleEnd();
        }
        return res;
    }"
98,9667,jmeter,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.jmeter.util,org.apache.jmeter.util.BeanShellClient,,main,,FileReader,"FileReader,file",59,59,close,https://github.com/apache/jmeter/tree/032cc396b962c0b5ac6a31f0b756d624be34efd0//src/core/org/apache/jmeter/util/BeanShellClient.java#L59,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/util/BeanShellClient.java,,open,"public static void main(String [] args) throws Exception{
        if (args.length < MINARGS){
            System.out.println(""Please provide ""+MINARGS+"" or more arguments:"");
            System.out.println(""serverhost serverport filename [arg1 arg2 ...]"");
            System.out.println(""e.g. "");
            System.out.println(""localhost 9000 extras/remote.bsh apple blake 7"");
            return;
        }
        String host=args[0];
        String portString = args[1];
        String file=args[2];

        int port=Integer.parseInt(portString)+1;// convert to telnet port

        System.out.println(""Connecting to BSH server on ""+host+"":""+portString);

        Socket sock = new Socket(host,port);
        InputStream is = sock.getInputStream();

        OutputStream os = sock.getOutputStream();

        InputStreamReader fis = new FileReader(file);

        new SockRead(is).start();

        sendLine(""bsh.prompt=\""\"";"",os);// Prompt is unnecessary

        sendLine(""String [] args={"",os);
        for (int i=MINARGS; i<args.length;i++){
            sendLine(""\""""+args[i]+""\"",\n"",os);
        }
        sendLine(""};"",os);

        int b;
        while ((b=fis.read()) != -1){
            os.write(b);
        }
        fis.close();
        sendLine(""bsh.prompt=\""bsh % \"";"",os);// Reset for other users
        os.flush();
        os.close();
        sock.shutdownOutput(); // Tell server that we are done
    }"
99,9474,jmeter,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.jmeter.assertions,org.apache.jmeter.assertions.XMLSchemaAssertion,,getResult,,String,"String,data,getResultBody",74,74,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/components/org/apache/jmeter/assertions/XMLSchemaAssertion.java#L74,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/assertions/XMLSchemaAssertion.java,,close,"public AssertionResult getResult(SampleResult response) {
        AssertionResult result = new AssertionResult(getName());
        // Note: initialised with error = failure = false

        byte data[] = response.getResponseData();
        if (data.length == 0) {
            return result.setResultForNull();
        }
        String resultData = new String(getResultBody(data)); // TODO - charset?

        String xsdFileName = getXsdFileName();
        if (log.isDebugEnabled()) {
            log.debug(""xmlString: "" + resultData);
            log.debug(""xsdFileName: "" + xsdFileName);
        }
        if (xsdFileName == null || xsdFileName.length() == 0) {
            result.setResultForFailure(FILE_NAME_IS_REQUIRED);
        } else {
            setSchemaResult(result, resultData, xsdFileName);
        }
        return result;
    }"
100,9493,jmeter,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.jmeter.protocol.http.proxy,org.apache.jmeter.protocol.http.proxy.Proxy,,writeToClient,,out.write(responseHeaders.getBytes()); // TODO - charset?,,434,434,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java#L434,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java,,close,"private void writeToClient(SampleResult res, OutputStream out, boolean forcedHTTPS) throws IOException {
        try {
            String responseHeaders = massageResponseHeaders(res, forcedHTTPS);
            out.write(responseHeaders.getBytes()); // TODO - charset?
            out.write(CRLF_BYTES);
            out.write(res.getResponseData());
            out.flush();
            log.debug(""Done writing to client"");
        } catch (IOException e) {
            log.error("""", e);
            throw e;
        } finally {
            try {
                out.close();
            } catch (Exception ex) {
                log.warn(""Error while closing socket"", ex);
            }
        }
    }"
101,9520,jmeter,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.jmeter.protocol.http.sampler,org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl,,sendPostData,,String,"String,bos,postedBody,append,toByteArray",968,968,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java#L968,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java,,close,"private String sendPostData(HttpPost post)  throws IOException {
        // Buffer to hold the post body, except file content
        StringBuilder postedBody = new StringBuilder(1000);
        HTTPFileArg files[] = getHTTPFiles();
        // Check if we should do a multipart/form-data or an
        // application/x-www-form-urlencoded post request
        if(getUseMultipartForPost()) {
            // If a content encoding is specified, we use that as the
            // encoding of any parameter values
            String contentEncoding = getContentEncoding();
            if(contentEncoding != null && contentEncoding.length() == 0) {
                contentEncoding = null;
            }

            // Write the request to our own stream
            MultipartEntity multiPart = new MultipartEntity(
                    getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT);
            // Create the parts
            // Add any parameters
            PropertyIterator args = getArguments().iterator();
            while (args.hasNext()) {
               HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
               String parameterName = arg.getName();
               if (arg.isSkippable(parameterName)){
                   continue;
               }
               FormBodyPart formPart;
               StringBody stringBody = new StringBody(arg.getValue(),
                       Charset.forName(contentEncoding == null ? ""US-ASCII"" : contentEncoding));
               formPart = new FormBodyPart(arg.getName(), stringBody);                   
               multiPart.addPart(formPart);
            }

            // Add any files
            // Cannot retrieve parts once added to the MultiPartEntity, so have to save them here.
            ViewableFileBody[] fileBodies = new ViewableFileBody[files.length];
            for (int i=0; i < files.length; i++) {
                HTTPFileArg file = files[i];
                fileBodies[i] = new ViewableFileBody(new File(file.getPath()), file.getMimeType());
                multiPart.addPart(file.getParamName(),fileBodies[i]);
            }

            post.setEntity(multiPart);

            if (multiPart.isRepeatable()){
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                for(ViewableFileBody fileBody : fileBodies){
                    fileBody.hideFileData = true;
                }
                multiPart.writeTo(bos);
                for(ViewableFileBody fileBody : fileBodies){
                    fileBody.hideFileData = false;
                }
                bos.flush();
                // We get the posted bytes using the encoding used to create it
                postedBody.append(new String(bos.toByteArray(),
                        contentEncoding == null ? ""US-ASCII"" // $NON-NLS-1$ this is the default used by HttpClient
                        : contentEncoding));
                bos.close();
            } else {
                postedBody.append(""<Multipart was not repeatable, cannot view what was sent>""); // $NON-NLS-1$
            }

//            // Set the content type TODO - needed?
//            String multiPartContentType = multiPart.getContentType().getValue();
//            post.setHeader(HEADER_CONTENT_TYPE, multiPartContentType);

        } else { // not multipart
            // Check if the header manager had a content type header
            // This allows the user to specify his own content-type for a POST request
            Header contentTypeHeader = post.getFirstHeader(HEADER_CONTENT_TYPE);
            boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
            // If there are no arguments, we can send a file as the body of the request
            // TODO: needs a multiple file upload scenerio
            if(!hasArguments() && getSendFileAsPostBody()) {
                // If getSendFileAsPostBody returned true, it's sure that file is not null
                HTTPFileArg file = files[0];
                if(!hasContentTypeHeader) {
                    // Allow the mimetype of the file to control the content type
                    if(file.getMimeType() != null && file.getMimeType().length() > 0) {
                        post.setHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                    }
                    else {
                        post.setHeader(HEADER_CONTENT_TYPE, APPLICATION_X_WWW_FORM_URLENCODED);
                    }
                }

                FileEntity fileRequestEntity = new FileEntity(new File(file.getPath()),(String) null);// TODO is null correct?
                post.setEntity(fileRequestEntity);

                // We just add placeholder text for file content
                postedBody.append(""<actual file content, not shown here>"");
            } else {
                // In a post request which is not multipart, we only support
                // parameters, no file upload is allowed

                // If a content encoding is specified, we set it as http parameter, so that
                // the post body will be encoded in the specified content encoding
                String contentEncoding = getContentEncoding();
                boolean haveContentEncoding = false;
                if(contentEncoding != null && contentEncoding.trim().length() > 0) {
                    post.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, contentEncoding);
                    haveContentEncoding = true;
                } else if (contentEncoding != null && contentEncoding.trim().length() == 0){
                    contentEncoding=null;
                }

                // If none of the arguments have a name specified, we
                // just send all the values as the post body
                if(getSendParameterValuesAsPostBody()) {
                    // Allow the mimetype of the file to control the content type
                    // This is not obvious in GUI if you are not uploading any files,
                    // but just sending the content of nameless parameters
                    // TODO: needs a multiple file upload scenerio
                    if(!hasContentTypeHeader) {
                        HTTPFileArg file = files.length > 0? files[0] : null;
                        if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
                            post.setHeader(HEADER_CONTENT_TYPE, file.getMimeType());
                        }
                        else {
                             // TODO - is this the correct default?
                            post.setHeader(HEADER_CONTENT_TYPE, APPLICATION_X_WWW_FORM_URLENCODED);
                        }
                    }

                    // Just append all the parameter values, and use that as the post body
                    StringBuilder postBody = new StringBuilder();
                    PropertyIterator args = getArguments().iterator();
                    while (args.hasNext()) {
                        HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
                        String value;
                        if (haveContentEncoding){
                            value = arg.getEncodedValue(contentEncoding);
                        } else {
                            value = arg.getEncodedValue();
                        }
                        postBody.append(value);
                    }
                    StringEntity requestEntity = new StringEntity(postBody.toString(), post.getFirstHeader(HEADER_CONTENT_TYPE).getValue(), contentEncoding);
                    post.setEntity(requestEntity);
                    postedBody.append(postBody.toString()); // TODO OK?
                } else {
                    // It is a normal post request, with parameter names and values

                    // Set the content type
                    if(!hasContentTypeHeader) {
                        post.setHeader(HEADER_CONTENT_TYPE, APPLICATION_X_WWW_FORM_URLENCODED);
                    }
                    // Add the parameters
                    PropertyIterator args = getArguments().iterator();
                    List <NameValuePair> nvps = new ArrayList <NameValuePair>();
                    String urlContentEncoding = contentEncoding;
                    if(urlContentEncoding == null || urlContentEncoding.length() == 0) {
                        // Use the default encoding for urls
                        urlContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;
                    }
                    while (args.hasNext()) {
                        HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
                        // The HTTPClient always urlencodes both name and value,
                        // so if the argument is already encoded, we have to decode
                        // it before adding it to the post request
                        String parameterName = arg.getName();
                        if (arg.isSkippable(parameterName)){
                            continue;
                        }
                        String parameterValue = arg.getValue();
                        if(!arg.isAlwaysEncoded()) {
                            // The value is already encoded by the user
                            // Must decode the value now, so that when the
                            // httpclient encodes it, we end up with the same value
                            // as the user had entered.
                            parameterName = URLDecoder.decode(parameterName, urlContentEncoding);
                            parameterValue = URLDecoder.decode(parameterValue, urlContentEncoding);
                        }
                        // Add the parameter, httpclient will urlencode it
                        nvps.add(new BasicNameValuePair(parameterName, parameterValue));
                    }
                    UrlEncodedFormEntity entity = new UrlEncodedFormEntity(nvps, urlContentEncoding);
                    post.setEntity(entity);
                    if (entity.isRepeatable()){
                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
                        post.getEntity().writeTo(bos);
                        bos.flush();
                        // We get the posted bytes using the encoding used to create it
                        if (contentEncoding != null) {
                            postedBody.append(new String(bos.toByteArray(), contentEncoding));
                        } else {
                            postedBody.append(new String(bos.toByteArray()));
                        }
                        bos.close();
                    }  else {
                        postedBody.append(""<RequestEntity was not repeatable, cannot view what was sent>"");
                    }
                }

//                // If the request entity is repeatable, we can send it first to
//                // our own stream, so we can return it
//                if(post.getEntity().isRepeatable()) {
//                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
//                    post.getEntity().writeTo(bos);
//                    bos.flush();
//                    // We get the posted bytes using the encoding used to create it
//                    if (contentEncoding != null) {
//                        postedBody.append(new String(bos.toByteArray(), contentEncoding));
//                    } else {
//                        postedBody.append(new String(bos.toByteArray()));
//                    }
//                    bos.close();
//                }
//                else {
//                    postedBody.append(""<RequestEntity was not repeatable, cannot view what was sent>"");
//                }
            }
        }
        return postedBody.toString();
    }"
102,9536,jmeter,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.jmeter.protocol.http.proxy,org.apache.jmeter.protocol.http.proxy.HttpRequestHdr,,populateSampler,,postData = new String(rawPostData);,,380,380,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java#L380,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java,,unknown,"private void populateSampler(Map<String, String> pageEncodings, Map<String, String> formEncodings)
            throws MalformedURLException, UnsupportedEncodingException {
        sampler.setDomain(serverName());
        if (log.isDebugEnabled()) {
            log.debug(""Proxy: setting server: "" + sampler.getDomain());
        }
        sampler.setMethod(method);
        log.debug(""Proxy: setting method: "" + sampler.getMethod());
        sampler.setPort(serverPort());
        if (log.isDebugEnabled()) {
            log.debug(""Proxy: setting port: "" + sampler.getPort());
        }
        if (url.indexOf(""//"") > -1) {
            String protocol = url.substring(0, url.indexOf("":""));
            if (log.isDebugEnabled()) {
                log.debug(""Proxy: setting protocol to : "" + protocol);
            }
            sampler.setProtocol(protocol);
        } else if (sampler.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT) {
            sampler.setProtocol(HTTPS);
            if (log.isDebugEnabled()) {
                log.debug(""Proxy: setting protocol to https"");
            }
        } else {
            if (log.isDebugEnabled()) {
                log.debug(""Proxy setting default protocol to: http"");
            }
            sampler.setProtocol(HTTP);
        }

        URL pageUrl = null;
        if(sampler.isProtocolDefaultPort()) {
            pageUrl = new URL(sampler.getProtocol(), sampler.getDomain(), getPath());
        }
        else {
            pageUrl = new URL(sampler.getProtocol(), sampler.getDomain(), sampler.getPort(), getPath());
        }
        String urlWithoutQuery = getUrlWithoutQuery(pageUrl);


        // Check if the request itself tells us what the encoding is
        String contentEncoding = null;
        String requestContentEncoding = ConversionUtils.getEncodingFromContentType(getContentType());
        if(requestContentEncoding != null) {
            contentEncoding = requestContentEncoding;
        }
        else {
            // Check if we know the encoding of the page
            if (pageEncodings != null) {
                synchronized (pageEncodings) {
                    contentEncoding = pageEncodings.get(urlWithoutQuery);
                }
            }
            // Check if we know the encoding of the form
            if (formEncodings != null) {
                synchronized (formEncodings) {
                    String formEncoding = formEncodings.get(urlWithoutQuery);
                    // Form encoding has priority over page encoding
                    if (formEncoding != null) {
                        contentEncoding = formEncoding;
                    }
                }
            }
        }

        // Get the post data using the content encoding of the request
        String postData = null;
        if (log.isDebugEnabled()) {
            if(contentEncoding != null) {
                log.debug(""Using encoding "" + contentEncoding + "" for request body"");
            }
            else {
                log.debug(""No encoding found, using JRE default encoding for request body"");
            }
        }
        if (contentEncoding != null) {
            postData = new String(rawPostData, contentEncoding);
        } else {
            // Use default encoding
            postData = new String(rawPostData);
        }

        if(contentEncoding != null) {
            sampler.setPath(getPath(), contentEncoding);
        }
        else {
            // Although the spec says UTF-8 should be used for encoding URL parameters,
            // most browser use ISO-8859-1 for default if encoding is not known.
            // We use null for contentEncoding, then the url parameters will be added
            // with the value in the URL, and the ""encode?"" flag set to false
            sampler.setPath(getPath(), null);
        }
        if (log.isDebugEnabled()) {
            log.debug(""Proxy: setting path: "" + sampler.getPath());
        }
        if (!HTTPConstants.CONNECT.equals(getMethod()) && numberRequests) {
            requestNumber++;
            sampler.setName(requestNumber + "" "" + sampler.getPath());
        } else {
            sampler.setName(sampler.getPath());
        }

        // Set the content encoding
        if(contentEncoding != null) {
            sampler.setContentEncoding(contentEncoding);
        }

        // If it was a HTTP GET request, then all parameters in the URL
        // has been handled by the sampler.setPath above, so we just need
        // to do parse the rest of the request if it is not a GET request
        if((!HTTPConstants.CONNECT.equals(getMethod())) && (!HTTPConstants.GET.equals(method))) {
            // Check if it was a multipart http post request
            final String contentType = getContentType();
            MultipartUrlConfig urlConfig = getMultipartConfig(contentType);
            if (urlConfig != null) {
                urlConfig.parseArguments(postData);
                // Tell the sampler to do a multipart post
                sampler.setDoMultipartPost(true);
                // Remove the header for content-type and content-length, since
                // those values will most likely be incorrect when the sampler
                // performs the multipart request, because the boundary string
                // will change
                getHeaderManager().removeHeaderNamed(CONTENT_TYPE);
                getHeaderManager().removeHeaderNamed(CONTENT_LENGTH);

                // Set the form data
                sampler.setArguments(urlConfig.getArguments());
                // Set the file uploads
                sampler.setHTTPFiles(urlConfig.getHTTPFileArgs().asArray());
            // used when postData is pure xml (eg. an xml-rpc call) or for PUT
            } else if (postData.trim().startsWith(""<?"") || ""PUT"".equals(sampler.getMethod())) {
                sampler.addNonEncodedArgument("""", postData, """");
            } else if (contentType == null || contentType.startsWith(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED) ){
                // It is the most common post request, with parameter name and values
                // We also assume this if no content type is present, to be most backwards compatible,
                // but maybe we should only parse arguments if the content type is as expected
                sampler.parseArguments(postData.trim(), contentEncoding); //standard name=value postData
            } else if (postData.length() > 0) {
                if (isBinaryContent(contentType)) {
                    try {
                        File tempDir = new File(binaryDirectory);
                        File out = File.createTempFile(method, binaryFileSuffix, tempDir);
                        FileUtils.writeByteArrayToFile(out,rawPostData);
                        HTTPFileArg [] files = {new HTTPFileArg(out.getPath(),"""",contentType)};
                        sampler.setHTTPFiles(files);
                    } catch (IOException e) {
                        log.warn(""Could not create binary file: ""+e);
                    }
                } else {
                    // Just put the whole postbody as the value of a parameter
                    sampler.addNonEncodedArgument("""", postData, """"); //used when postData is pure xml (ex. an xml-rpc call)
                }
            }
        }
        if (log.isDebugEnabled()) {
            log.debug(""sampler path = "" + sampler.getPath());
        }
    }"
103,9660,jmeter,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.jmeter.save,org.apache.jmeter.save.CSVSaveService,,processSamples,,dataReader = new BufferedReader(new FileReader(filename)); // TODO Charset ?,,131,131,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/core/org/apache/jmeter/save/CSVSaveService.java#L131,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/core/org/apache/jmeter/save/CSVSaveService.java,,close,"public static void processSamples(String filename, Visualizer visualizer,
            ResultCollector resultCollector) throws IOException {
        BufferedReader dataReader = null;
        final boolean errorsOnly = resultCollector.isErrorLogging();
        final boolean successOnly = resultCollector.isSuccessOnlyLogging();
        try {
            dataReader = new BufferedReader(new FileReader(filename)); // TODO Charset ?
            dataReader.mark(400);// Enough to read the header column names
            // Get the first line, and see if it is the header
            String line = dataReader.readLine();
            if (line == null) {
                throw new IOException(filename + "": unable to read header line"");
            }
            long lineNumber = 1;
            SampleSaveConfiguration saveConfig = CSVSaveService
                    .getSampleSaveConfiguration(line, filename);
            if (saveConfig == null) {// not a valid header
                log.info(filename
                        + "" does not appear to have a valid header. Using default configuration."");
                saveConfig = (SampleSaveConfiguration) resultCollector
                        .getSaveConfig().clone(); // may change the format later
                dataReader.reset(); // restart from beginning
                lineNumber = 0;
            }
            String[] parts;
            final char delim = saveConfig.getDelimiter().charAt(0);
            // TODO: does it matter that an empty line will terminate the loop?
            // CSV output files should never contain empty lines, so probably
            // not
            // If so, then need to check whether the reader is at EOF
            while ((parts = csvReadFile(dataReader, delim)).length != 0) {
                lineNumber++;
                SampleEvent event = CSVSaveService
                        .makeResultFromDelimitedString(parts, saveConfig,
                                lineNumber);
                if (event != null) {
                    final SampleResult result = event.getResult();
                    if (ResultCollector.isSampleWanted(result.isSuccessful(),
                            errorsOnly, successOnly)) {
                        visualizer.add(result);
                    }
                }
            }
        } finally {
            JOrphanUtils.closeQuietly(dataReader);
        }
    }"
104,9662,jmeter,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.jmeter.protocol.http.util,org.apache.jmeter.protocol.http.util.LoopbackHTTPSocket,,<init>,,os,"os,getBytes,write",69,69,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/protocol/http/org/apache/jmeter/protocol/http/util/LoopbackHTTPSocket.java#L69,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/util/LoopbackHTTPSocket.java,,close,
105,9665,jmeter,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.jmeter.protocol.tcp.sampler,org.apache.jmeter.protocol.tcp.sampler.TCPClientImpl,,write,,os,"os,s,getBytes,write",63,63,close,https://github.com/apache/jmeter/tree/e21247b3b461bf0af80f0e80cb876dfb1f83ca9f//src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java#L63,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java,,close,"public void write(OutputStream os, String s)  throws IOException{
        os.write(s.getBytes()); // TODO - charset?
        os.flush();
        if(log.isDebugEnabled()) {
            log.debug(""Wrote: "" + s);
        }
    }"
106,9581,jmeter,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.jmeter.assertions,org.apache.jmeter.assertions.XMLAssertion,,getResult,,String,"String,getResultBody,responseData",69,69,close,https://github.com/apache/jmeter/tree/adca9fe1d982342e0cec8d1e410dabd0967bb852//src/components/org/apache/jmeter/assertions/XMLAssertion.java#L69,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/components/org/apache/jmeter/assertions/XMLAssertion.java,,close,"@Override
    public AssertionResult getResult(SampleResult response) {
        // no error as default
        AssertionResult result = new AssertionResult(getName());
        byte[] responseData = response.getResponseData();
        if (responseData.length == 0) {
            return result.setResultForNull();
        }
        result.setFailure(false);

        // the result data
        String resultData = new String(getResultBody(responseData)); // TODO - charset?

        SAXBuilder builder = myBuilder.get();

        try {
            builder.build(new StringReader(resultData));
        } catch (JDOMException e) {
            log.debug(""Cannot parse result content"", e); // may well happen
            result.setFailure(true);
            result.setFailureMessage(e.getMessage());
        } catch (IOException e) {
            log.error(""Cannot read result content"", e); // should never happen
            result.setError(true);
            result.setFailureMessage(e.getMessage());
        }

        return result;
    }"
107,9608,jmeter,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.jmeter.protocol.http.sampler,org.apache.jmeter.protocol.http.sampler.HTTPSampleResult,,getDataEncodingWithDefault,,Math,"Math,String,bytes,bytes,java,ENGLISH,Locale,length,min,toLowerCase,util",212,212,close,https://github.com/apache/jmeter/tree/adca9fe1d982342e0cec8d1e410dabd0967bb852//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java#L212,https://github.com/apache/jmeter/tree/b3f452902a78827bd885e6dbf30b14d11fb4df93//src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java,,close,"@Override
    public String getDataEncodingWithDefault() {
        if (getDataEncodingNoDefault() == null && getContentType().startsWith(""text/html"")){ // $NON-NLS-1$
            byte[] bytes=getResponseData();
            // get the start of the file
            // TODO - charset?
            String prefix = new String(bytes,0,Math.min(bytes.length, 2000)).toLowerCase(java.util.Locale.ENGLISH);
            // Extract the content-type if present
            final String METATAG = ""<meta http-equiv=\""content-type\"" content=\""""; // $NON-NLS-1$
            int tagstart=prefix.indexOf(METATAG);
            if (tagstart!=-1){
                tagstart += METATAG.length();
                int tagend = prefix.indexOf('\""', tagstart); // $NON-NLS-1$
                if (tagend!=-1){
                    // TODO use fixed charset:
                    final String ct = new String(bytes,tagstart,tagend-tagstart); // TODO - charset?
                    setEncodingAndType(ct);// Update the dataEncoding
                }
            }
        }
        return super.getDataEncodingWithDefault(DEFAULT_HTTP_ENCODING);
    }"
108,4153,cassandra,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.cassandra.utils,org.apache.cassandra.utils.BytesReadTrackerTest,,testReadLine,,ByteArrayInputStream,"ByteArrayInputStream,DataInputStream,getBytes",202,202,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java#L202,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java,,unknown,"@Test(expected = UnsupportedOperationException.class)
    public void testReadLine() throws Exception
    {
        DataInputStream in = new DataInputStream(new ByteArrayInputStream(""1"".getBytes()));
        BytesReadTracker tracker = new BytesReadTracker(in);

        try
        {
            // throws UnsupportedOperationException
            tracker.readLine();
        }
        finally
        {
            in.close();
        }
    }"
109,4600,cassandra,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.cassandra.stress.util,org.apache.cassandra.stress.util.Operation,,getUnQuotedCqlBlob,,getUnQuotedCqlBlob,"getUnQuotedCqlBlob,isCQL3,term,getBytes",240,240,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//tools/stress/src/org/apache/cassandra/stress/util/Operation.java#L240,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//tools/stress/src/org/apache/cassandra/stress/util/Operation.java,,unknown,"protected String getUnQuotedCqlBlob(String term, boolean isCQL3)
    {
        return getUnQuotedCqlBlob(term.getBytes(), isCQL3);
    }"
110,7295,cassandra,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.cassandra.utils,org.apache.cassandra.utils.BytesReadTrackerTest,,testSkipBytesAndReadFully,,testStr,"testStr,getBytes",168,168,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java#L168,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//test/unit/org/apache/cassandra/utils/BytesReadTrackerTest.java,,unknown,"@Test
    public void testSkipBytesAndReadFully() throws Exception
    {
        String testStr = ""1234567890"";
        byte[] testData = testStr.getBytes();

        DataInputStream in = new DataInputStream(new ByteArrayInputStream(testData));
        BytesReadTracker tracker = new BytesReadTracker(in);

        try
        {
            // read first 5 bytes
            byte[] out = new byte[5];
            tracker.readFully(out, 0, 5);
            assertEquals(""12345"", new String(out));
            assertEquals(5, tracker.getBytesRead());

            // then skip 2 bytes
            tracker.skipBytes(2);
            assertEquals(7, tracker.getBytesRead());

            // and read the rest
            out = new byte[3];
            tracker.readFully(out);
            assertEquals(""890"", new String(out));
            assertEquals(10, tracker.getBytesRead());

            assertEquals(testData.length, tracker.getBytesRead());
        }
        finally
        {
            in.close();
        }
    }"
111,8317,cassandra,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.cassandra.db,org.apache.cassandra.db.NameSortTest,,validateNameSort,,ByteBufferUtil,"ByteBufferUtil,String,assertEquals,bytes,column,string,value",108,108,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//test/unit/org/apache/cassandra/db/NameSortTest.java#L108,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//test/unit/org/apache/cassandra/db/NameSortTest.java,,unknown,"private void validateNameSort(Keyspace keyspace, int N) throws IOException
    {
        for (int i = 0; i < N; ++i)
        {
            DecoratedKey key = Util.dk(Integer.toString(i));
            ColumnFamily cf;

            cf = Util.getColumnFamily(keyspace, key, ""Standard1"");
            Collection<Column> columns = cf.getSortedColumns();
            for (Column column : columns)
            {
                String name = ByteBufferUtil.string(column.name());
                int j = Integer.valueOf(name.substring(name.length() - 1));
                byte[] bytes = j % 2 == 0 ? ""a"".getBytes() : ""b"".getBytes();
                assertEquals(new String(bytes), ByteBufferUtil.string(column.value()));
            }
        }
    }"
112,8522,cassandra,DM_DEFAULT_ENCODING,C,last,,I18N,org.apache.cassandra.db,org.apache.cassandra.db.ColumnFamilyStoreTest$6,,apply,,String,"String,arg0,array,name",1980,1980,close,https://github.com/apache/cassandra/tree/4ed2234078c4d302c256332252a8ddd6ae345484//test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java#L1980,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java,,unknown,"public String apply(Column arg0)
            {
                return new String(arg0.name().array());
            }"
113,8975,cassandra,DM_DEFAULT_ENCODING,A,last,,I18N,org.apache.cassandra.db,org.apache.cassandra.db.SchemaCheckVerbHandler,,doVerb,,Schema,"Schema,message,message,getBytes,getInternalReply,getVersion,getVersion,instance,toString",37,37,close,https://github.com/apache/cassandra/tree/7efab48e72247734ae38eabfc61a9ff0a5aa87ec//src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java#L37,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java,,unknown,"public void doVerb(Message message, String id)
    {
        logger.debug(""Received schema check request."");
        Message response = message.getInternalReply(Schema.instance.getVersion().toString().getBytes(), message.getVersion());
        MessagingService.instance().sendReply(response, id, message.getFrom());
    }"
114,6725,cassandra,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.cassandra.db.compaction,org.apache.cassandra.db.compaction.CompactionsTest,,testBlacklisting,,ByteArrayOutputStream,"ByteArrayOutputStream,PrintStream,System,setErr",373,373,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//test/unit/org/apache/cassandra/db/compaction/CompactionsTest.java#L373,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//test/unit/org/apache/cassandra/db/compaction/CompactionsTest.java,,unknown,"public void testBlacklisting(String compactionStrategy) throws Exception
    {
        // this test does enough rows to force multiple block indexes to be used
        Table table = Table.open(TABLE1);
        final ColumnFamilyStore cfs = table.getColumnFamilyStore(""Standard1"");

        final int ROWS_PER_SSTABLE = 10;
        final int SSTABLES = DatabaseDescriptor.getIndexInterval() * 2 / ROWS_PER_SSTABLE;

        cfs.setCompactionStrategyClass(compactionStrategy);

        // disable compaction while flushing
        cfs.disableAutoCompaction();
        //test index corruption
        //now create a few new SSTables
        long maxTimestampExpected = Long.MIN_VALUE;
        Set<DecoratedKey> inserted = new HashSet<DecoratedKey>();
        for (int j = 0; j < SSTABLES; j++)
        {
            for (int i = 0; i < ROWS_PER_SSTABLE; i++)
            {
                DecoratedKey key = Util.dk(String.valueOf(i % 2));
                RowMutation rm = new RowMutation(TABLE1, key.key);
                long timestamp = j * ROWS_PER_SSTABLE + i;
                rm.add(new QueryPath(""Standard1"", null, ByteBufferUtil.bytes(String.valueOf(i / 2))),
                        ByteBufferUtil.EMPTY_BYTE_BUFFER,
                        timestamp);
                maxTimestampExpected = Math.max(timestamp, maxTimestampExpected);
                rm.apply();
                inserted.add(key);
            }
            cfs.forceBlockingFlush();
            assertMaxTimestamp(cfs, maxTimestampExpected);
            assertEquals(inserted.toString(), inserted.size(), Util.getRangeSlice(cfs).size());
        }

        Collection<SSTableReader> sstables = cfs.getSSTables();
        int currentSSTable = 0;
        int sstablesToCorrupt = 8;

        // corrupt first 'sstablesToCorrupt' SSTables
        for (SSTableReader sstable : sstables)
        {
            if(currentSSTable + 1 > sstablesToCorrupt)
                break;

            RandomAccessFile raf = null;

            try
            {
                raf = new RandomAccessFile(sstable.getFilename(), ""rw"");
                assertNotNull(raf);
                raf.write(0xFFFFFF);
            }
            finally
            {
                FileUtils.closeQuietly(raf);
            }

            currentSSTable++;
        }

        int failures = 0;

        // close error output steam to avoid printing ton of useless RuntimeException
        System.err.close();

        try
        {
            // in case something will go wrong we don't want to loop forever using for (;;)
            for (int i = 0; i < sstables.size(); i++)
            {
                try
                {
                    cfs.forceMajorCompaction();
                }
                catch (Exception e)
                {
                    failures++;
                    continue;
                }

                assertEquals(sstablesToCorrupt + 1, cfs.getSSTables().size());
                break;
            }
        }
        finally
        {
            System.setErr(new PrintStream(new ByteArrayOutputStream()));
        }


        cfs.truncate();
        assertEquals(failures, sstablesToCorrupt);
    }"
115,9007,cassandra,DM_DEFAULT_ENCODING,B,last,,I18N,org.apache.cassandra.db.compaction,org.apache.cassandra.db.compaction.CompactionsPurgeTest,,testCompactionPurgeTombstonedSuperColumn,,ByteBuffer,"ByteBuffer,ByteBufferUtil,QueryPath,String,cfName,i,i,rm,scName,EMPTY_BYTE_BUFFER,add,getBytes,valueOf,wrap",300,300,close,https://github.com/apache/cassandra/tree/69337a43670f71ae1fc55e23d6a9031230423900//test/unit/org/apache/cassandra/db/compaction/CompactionsPurgeTest.java#L300,https://github.com/apache/cassandra/tree/f3e38cb638113c2a23855a104d6082da5bc10ddb//test/unit/org/apache/cassandra/db/compaction/CompactionsPurgeTest.java,,unknown,"@Test
    public void testCompactionPurgeTombstonedSuperColumn() throws IOException, ExecutionException, InterruptedException
    {
        CompactionManager.instance.disableAutoCompaction();

        String tableName = ""Keyspace1"";
        String cfName = ""Super5"";
        Table table = Table.open(tableName);
        ColumnFamilyStore cfs = table.getColumnFamilyStore(cfName);

        DecoratedKey key = Util.dk(""key5"");
        RowMutation rm;

        ByteBuffer scName = ByteBufferUtil.bytes(""sc"");

        // inserts
        rm = new RowMutation(tableName, key.key);
        for (int i = 0; i < 10; i++)
        {
            rm.add(new QueryPath(cfName, scName, ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, i);
        }
        rm.apply();

        // deletes supercolumn with timestamp such that not all columns go
        rm = new RowMutation(tableName, key.key);
        rm.delete(new QueryPath(cfName, scName, null), 4);
        rm.apply();

        // flush and major compact
        cfs.forceBlockingFlush();
        Util.compactAll(cfs).get();

        // re-inserts with timestamp lower than delete
        rm = new RowMutation(tableName, key.key);
        for (int i = 0; i < 5; i++)
        {
            rm.add(new QueryPath(cfName, scName, ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, i);
        }
        rm.apply();

        // Check that the second insert did went in
        ColumnFamily cf = cfs.getColumnFamily(QueryFilter.getIdentityFilter(key, new QueryPath(cfName)));
        SuperColumn sc = (SuperColumn)cf.getColumn(scName);
        assert sc != null;
        assertEquals(10, sc.getColumnCount());
    }"
